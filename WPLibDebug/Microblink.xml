<?xml version="1.0"?>
<doc>
    <assembly>
        "ManagedBridge"
    </assembly>
    <members>
        <member name="M:photopay.UKDriverLicenseData.validate">
Method calculates valid property

</member>
        <member name="F:photopay.UKDriverLicenseData.nameHistory_">
Objects responsible for keeping track of recognitions 
</member>
        <member name="F:photopay.UKDriverLicenseData.kAddressConfidenceThreshold">
Threshold for address confidence level 
</member>
        <member name="F:photopay.UKDriverLicenseData.kDriverNumberConfidenceThrshold">
Threshold for driver number confidence level 
</member>
        <member name="F:photopay.UKDriverLicenseData.kExpiryDateConfidenceThreshold">
Threshold for expiry date confidence level 
</member>
        <member name="F:photopay.UKDriverLicenseData.kIssueDateConfidenceThreshold">
Threshold for issue date confidence level 
</member>
        <member name="F:photopay.UKDriverLicenseData.kBirthDataConfidenceTreshold">
Threshold for birth data 
</member>
        <member name="F:photopay.UKDriverLicenseData.kSurnameConfidenceThreshold">
Threshold for last name confidence level 
</member>
        <member name="F:photopay.UKDriverLicenseData.kNameConfidenceThreshold">
Threshold for first name confidence level 
</member>
        <member name="M:photopay.UKDriverLicenseData.addExtractionResults(std.vector&lt;photopay.ExtractionResult&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Adds extraction results to history

 @param extractionResults

</member>
        <member name="M:photopay.UKDriverLicenseData.Dispose">
Destructor

</member>
        <member name="M:photopay.UKDriverLicenseData.resetData">
Resets the data to default values

</member>
        <member name="M:photopay.UKDriverLicenseData.op_Assign(photopay.UKDriverLicenseData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Assignment operator

 @param other
 @return

</member>
        <member name="M:photopay.UKDriverLicenseData.#ctor(photopay.UKDriverLicenseData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor
@param other

</member>
        <member name="M:photopay.UKDriverLicenseData.#ctor">
Default constructor

</member>
        <member name="M:cvSetIdentity(System.Void*,CvScalar)">
* Finds selected eigen values and vectors of a symmetric matrix */
</member>
        <member name="M:cv.LogPolar_Adjacent.Dispose">
Destructor

</member>
        <member name="M:cv.LogPolar_Adjacent.to_cartesian(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Transformation from cortical image to retinal (inverse log-polar) image.
\param source the cortical image
\return the transformed image (retinal image)

</member>
        <member name="M:cv.LogPolar_Adjacent.to_cortical(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Transformation from Cartesian image to cortical (log-polar) image.
\param source the Cartesian image
\return the transformed image (cortical image)

</member>
        <member name="M:cv.LogPolar_Adjacent.#ctor(System.Int32,System.Int32,cv.Point_&lt;System.Int32&gt;,System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Int32)">
Constructor
\param w the width of the input image
\param h the height of the input image
\param center the transformation center: where the output precision is maximal
\param R the number of rings of the cortical image (default value 70 pixel)
\param ro0 the radius of the blind spot (default value 3 pixel)
\param smin the size of the subpixel (default value 0.25 pixel)
\param full \a 1 (default value) means that the retinal image (the inverse transform) is computed within the circumscribing circle.
            \a 0 means that the retinal image is computed within the inscribed circle.
\param S the number of sectors of the cortical image (default value 70 pixel).
         Its value is usually internally computed to obtain a pixel aspect ratio equals to 1.
\param sp \a 1 (default value) means that the parameter \a S is internally computed.
          \a 0 means that the parameter \a S is provided by the user.

</member>
        <member name="T:cv.LogPolar_Adjacent">
 Adjacent receptive fields technique

All the Cartesian pixels, whose coordinates in the cortical domain share the same integer part, are assigned to the same RF.
The precision of the boundaries of the RF can be improved by breaking each pixel into subpixels and assigning each of them to the correct RF.
This technique is implemented from: Traver, V., Pla, F.: Log-polar mapping template design: From task-level requirements
to geometry parameters. Image Vision Comput. 26(10) (2008) 1354-1370

More details can be found in http://dx.doi.org/10.1007/978-3-642-23968-7_5

</member>
        <member name="M:cv.LogPolar_Overlapping.Dispose">
Destructor

</member>
        <member name="M:cv.LogPolar_Overlapping.to_cartesian(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Transformation from cortical image to retinal (inverse log-polar) image.
\param source the cortical image
\return the transformed image (retinal image)

</member>
        <member name="M:cv.LogPolar_Overlapping.to_cortical(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Transformation from Cartesian image to cortical (log-polar) image.
\param source the Cartesian image
\return the transformed image (cortical image)

</member>
        <member name="M:cv.LogPolar_Overlapping.#ctor(System.Int32,System.Int32,cv.Point_&lt;System.Int32&gt;,System.Int32,System.Double,System.Int32,System.Int32,System.Int32)">
Constructor
\param w the width of the input image
\param h the height of the input image
\param center the transformation center: where the output precision is maximal
\param R the number of rings of the cortical image (default value 70 pixel)
\param ro0 the radius of the blind spot (default value 3 pixel)
\param full \a 1 (default value) means that the retinal image (the inverse transform) is computed within the circumscribing circle.
            \a 0 means that the retinal image is computed within the inscribed circle.
\param S the number of sectors of the cortical image (default value 70 pixel).
         Its value is usually internally computed to obtain a pixel aspect ratio equals to 1.
\param sp \a 1 (default value) means that the parameter \a S is internally computed.
          \a 0 means that the parameter \a S is provided by the user.

</member>
        <member name="T:cv.LogPolar_Overlapping">
Overlapping circular receptive fields technique

The Cartesian plane is divided in two regions: the fovea and the periphery.
The fovea (oversampling) is handled by using the bilinear interpolation technique described above, whereas in
the periphery we use the overlapping Gaussian circular RFs.

More details can be found in http://dx.doi.org/10.1007/978-3-642-23968-7_5

</member>
        <member name="M:cv.LogPolar_Interp.Dispose">
Destructor

</member>
        <member name="M:cv.LogPolar_Interp.to_cartesian(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Transformation from cortical image to retinal (inverse log-polar) image.
\param source the cortical image
\return the transformed image (retinal image)

</member>
        <member name="M:cv.LogPolar_Interp.to_cortical(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Transformation from Cartesian image to cortical (log-polar) image.
\param source the Cartesian image
\return the transformed image (cortical image)

</member>
        <member name="M:cv.LogPolar_Interp.#ctor(System.Int32,System.Int32,cv.Point_&lt;System.Int32&gt;,System.Int32,System.Double,System.Int32,System.Int32,System.Int32,System.Int32)">
Constructor
\param w the width of the input image
\param h the height of the input image
\param center the transformation center: where the output precision is maximal
\param R the number of rings of the cortical image (default value 70 pixel)
\param ro0 the radius of the blind spot (default value 3 pixel)
\param full \a 1 (default value) means that the retinal image (the inverse transform) is computed within the circumscribing circle.
            \a 0 means that the retinal image is computed within the inscribed circle.
\param S the number of sectors of the cortical image (default value 70 pixel).
         Its value is usually internally computed to obtain a pixel aspect ratio equals to 1.
\param sp \a 1 (default value) means that the parameter \a S is internally computed.
          \a 0 means that the parameter \a S is provided by the user.

</member>
        <member name="T:cv.LogPolar_Interp">
Bilinear interpolation technique.

The value of a desired cortical pixel is obtained through a bilinear interpolation of the values
of the four nearest neighbouring Cartesian pixels to the center of the RF.
The same principle is applied to the inverse transformation.

More details can be found in http://dx.doi.org/10.1007/978-3-642-23968-7_5

</member>
        <member name="M:cv.linemod.getDefaultLINEMOD">
 \brief Factory function for detector using LINE-MOD algorithm with color gradients
 and depth normals.

 Default parameter settings suitable for VGA images.

</member>
        <member name="M:cv.linemod.getDefaultLINE">
 \brief Factory function for detector using LINE algorithm with color gradients.

 Default parameter settings suitable for VGA images.

</member>
        <member name="M:cv.linemod.Detector.getTemplates(cv.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
 \brief Get the template pyramid identified by template_id.

 For example, with 2 modalities (Gradient, Normal) and two pyramid levels
 (L0, L1), the order is (GradientL0, NormalL0, GradientL1, NormalL1).

</member>
        <member name="M:cv.linemod.Detector.pyramidLevels">
\brief Get number of pyramid levels used by this detector.

</member>
        <member name="M:cv.linemod.Detector.getT(System.Int32)">
\brief Get sampling step T at pyramid_level.

</member>
        <member name="M:cv.linemod.Detector.getModalities">
 \brief Get the modalities used by this detector.

 You are not permitted to add/remove modalities, but you may dynamic_cast them to
 tweak parameters.

</member>
        <member name="M:cv.linemod.Detector.addSyntheticTemplate(std.vector&lt;cv.linemod.Template&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Add a new object template computed by external means.

</member>
        <member name="M:cv.linemod.Detector.addTemplate(std.vector&lt;cv.Mat&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Rect_&lt;System.Int32&gt;*)">
 \brief Add new object template.

 \param      sources      Source images, one for each modality.
 \param      class_id     Object class ID.
 \param      object_mask  Mask separating object from background.
 \param[out] bounding_box Optionally return bounding box of the extracted features.

 \return Template ID, or -1 if failed to extract a valid template.

</member>
        <member name="M:cv.linemod.Detector.#ctor(std.vector&lt;cv.Ptr&lt;cv.linemod.Modality&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 \brief Constructor.

 \param modalities       Modalities to use (color gradients, depth normals, ...).
 \param T_pyramid        Value of the sampling step T at each pyramid level. The
                         number of pyramid levels is T_pyramid.size().

</member>
        <member name="M:cv.linemod.Detector.#ctor">
\brief Empty constructor, initialize with read().

</member>
        <member name="T:cv.linemod.Detector">
\brief Object detector using the LINE template matching algorithm with any set of
modalities.

</member>
        <member name="M:cv.linemod.Match.op_LessThan(cv.linemod.Match!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Sort matches with high similarity to the front
</member>
        <member name="T:cv.linemod.Match">
\brief Represents a successful template match.

</member>
        <member name="M:cv.linemod.colormap(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Mat*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Debug function to colormap a quantized image for viewing.

</member>
        <member name="M:cv.linemod.DepthNormal.#ctor(System.Int32,System.Int32,System.UInt32,System.Int32)">
 \brief Constructor.

 \param distance_threshold   Ignore pixels beyond this distance.
 \param difference_threshold When computing normals, ignore contributions of pixels whose
                             depth difference with the central pixel is above this threshold.
 \param num_features         How many features a template must contain.
 \param extract_threshold    Consider as candidate feature only if there are no differing
                             orientations within a distance of extract_threshold.

</member>
        <member name="M:cv.linemod.DepthNormal.#ctor">
\brief Default constructor. Uses reasonable default parameter values.

</member>
        <member name="T:cv.linemod.DepthNormal">
\brief Modality that computes quantized surface normals from a dense depth map.

</member>
        <member name="M:cv.linemod.ColorGradient.#ctor(System.Single,System.UInt32,System.Single)">
 \brief Constructor.

 \param weak_threshold   When quantizing, discard gradients with magnitude less than this.
 \param num_features     How many features a template must contain.
 \param strong_threshold Consider as candidate features only gradients whose norms are
                         larger than this.

</member>
        <member name="M:cv.linemod.ColorGradient.#ctor">
\brief Default constructor. Uses reasonable default parameter values.

</member>
        <member name="T:cv.linemod.ColorGradient">
\brief Modality that computes quantized gradient orientations from a color image.

</member>
        <member name="M:cv.linemod.Modality.create(cv.FileNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Load a modality from file.

</member>
        <member name="M:cv.linemod.Modality.create(cv.String!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 \brief Create modality by name.

 The following modality types are supported:
 - "ColorGradient"
 - "DepthNormal"

</member>
        <member name="M:cv.linemod.Modality.process(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 \brief Form a quantized image pyramid from a source image.

 \param[in] src  The source image. Type depends on the modality.
 \param[in] mask Optional mask. If not empty, unmasked pixels are set to zero
                 in quantized image and cannot be extracted as features.

</member>
        <member name="T:cv.linemod.Modality">
 \brief Interface for modalities that plug into the LINE template matching representation.

 \todo Max response, to allow optimization of summing (255/MAX) features as uint8

</member>
        <member name="M:cv.linemod.QuantizedPyramid.selectScatteredFeatures(std.vector&lt;cv.linemod.QuantizedPyramid.Candidate&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;cv.linemod.Feature&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.Single)">
 \brief Choose candidate features so that they are not bunched together.

 \param[in]  candidates   Candidate features sorted by score.
 \param[out] features     Destination vector of selected features.
 \param[in]  num_features Number of candidates to select.
 \param[in]  distance     Hint for desired distance between features.

</member>
        <member name="M:cv.linemod.QuantizedPyramid.Candidate.op_LessThan(cv.linemod.QuantizedPyramid.Candidate!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Sort candidates with high score to the front
</member>
        <member name="T:cv.linemod.QuantizedPyramid.Candidate">
Candidate feature with a score
</member>
        <member name="M:cv.linemod.QuantizedPyramid.pyrDown">
 \brief Go to the next pyramid level.

 \todo Allow pyramid scale factor other than 2

</member>
        <member name="M:cv.linemod.QuantizedPyramid.extractTemplate(cv.linemod.Template*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 \brief Extract most discriminant features at current pyramid level to form a new template.

 \param[out] templ The new template.

</member>
        <member name="M:cv.linemod.QuantizedPyramid.quantize(cv.Mat*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 \brief Compute quantized image at current pyramid level for online detection.

 \param[out] dst The destination 8-bit image. For each pixel at most one bit is set,
                 representing its classification.

</member>
        <member name="T:cv.linemod.QuantizedPyramid">
\brief Represents a modality operating over an image pyramid.

</member>
        <member name="T:cv.linemod.Feature">
@todo Convert doxy comments to rst
\brief Discriminant feature described by its location and label.

</member>
        <member name="M:cv.Hamming.op_FunctionCall(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
this will count the bits in a ^ b

</member>
        <member name="M:cv.BriefDescriptorExtractor.info">
@todo read and write for brief
</member>
        <member name="T:cv.StarAdjuster">
An adjuster for StarFeatureDetector, this one adjusts the responseThreshold for now
 * TODO find a faster way to converge the parameters for Star - use CvStarDetectorParams

</member>
        <member name="M:cv.FastAdjuster.#ctor(System.Int32,System.Boolean,System.Int32,System.Int32)">
\param init_thresh the initial threshold to start with, default = 20
     * \param nonmax whether to use non max or not for fast feature detection

</member>
        <member name="T:cv.FastAdjuster">
\brief an adjust for the FAST detector. This will basically decrement or increment the
 * threshold by 1

</member>
        <member name="M:cv.DynamicAdaptedFeatureDetector.#ctor(cv.Ptr&lt;cv.AdjusterAdapter&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Int32)">
\param adjuster an AdjusterAdapter that will do the detection and parameter adjustment
     *  \param max_features the maximum desired number of features
     *  \param max_iters the maximum number of times to try to adjust the feature detector params
     *          for the FastAdjuster this can be high, but with Star or Surf this can get time consuming
     *  \param min_features the minimum desired features

</member>
        <member name="M:cv.AdjusterAdapter.good">
are params maxed out or still valid?
     * \return false if the parameters can't be adjusted any more

</member>
        <member name="M:cv.AdjusterAdapter.tooMany(System.Int32,System.Int32)">
too many features were detected so, adjust the detector params accordingly
     * \param max the maximum number of desired features
     * \param n_detected the number previously detected

</member>
        <member name="M:cv.AdjusterAdapter.tooFew(System.Int32,System.Int32)">
too few features were detected so, adjust the detector params accordingly
     * \param min the minimum number of desired features
     * \param n_detected the number previously detected

</member>
        <member name="M:cv.AdjusterAdapter.Dispose">
pure virtual interface

</member>
        <member name="T:cv.AdjusterAdapter">
\brief A feature detector parameter adjuster, this is used by the DynamicAdaptedFeatureDetector
 *  and is a wrapper for FeatureDetector that allow them to be adjusted after a detection

</member>
        <member name="M:cv.FREAK.selectPairs(std.vector&lt;cv.Mat&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;std.vector&lt;cv.KeyPoint&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst,System.Boolean)">
select the 512 "best description pairs"
         * @param images grayscale images set
         * @param keypoints set of detected keypoints
         * @param corrThresh correlation threshold
         * @param verbose print construction information
         * @return list of best pair indexes

</member>
        <member name="M:cv.FREAK.defaultNorm">
returns the default norm type 
</member>
        <member name="M:cv.FREAK.descriptorType">
returns the descriptor type 
</member>
        <member name="M:cv.FREAK.descriptorSize">
returns the descriptor length in bytes 
</member>
        <member name="M:cv.FREAK.#ctor(System.Boolean,System.Boolean,System.Single,System.Int32,std.vector&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Constructor
         * @param orientationNormalized enable orientation normalization
         * @param scaleNormalized enable scale normalization
         * @param patternScale scaling of the description pattern
         * @param nbOctave number of octaves covered by the detected keypoints
         * @param selectedPairs (optional) user defined selected pairs

</member>
        <member name="T:cv.BackgroundSubtractorGMG">
Background Subtractor module. Takes a series of images and returns a sequence of mask (8UC1)
images of the same size, where 255 indicates Foreground and 0 represents Background.
This class implements an algorithm described in "Visual Tracking of Human Visitors under
Variable-Lighting Conditions for a Responsive Audio Art Installation," A. Godbehere,
A. Matsukawa, K. Goldberg, American Control Conference, Montreal, June 2012.

</member>
        <member name="M:cv.LineSegmentDetector.compareSegments(cv.Size_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv._InputArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv._InputArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv._InputOutputArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Draw both vectors on the image canvas. Uses blue for lines 1 and red for lines 2.

 @param size      The size of the image, where lines were found.
 @param lines1    The first lines that need to be drawn. Color - Blue.
 @param lines2    The second lines that need to be drawn. Color - Red.
 @param image     Optional image, where lines will be drawn.
                  Should have the size of the image, where the lines were found
 @return          The number of mismatching pixels between lines1 and lines2.

</member>
        <member name="M:cv.LineSegmentDetector.drawSegments(cv._InputOutputArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv._InputArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Draw lines on the given canvas.

 @param image     The image, where lines will be drawn.
                  Should have the size of the image, where the lines were found
 @param lines     The lines that need to be drawn

</member>
        <member name="M:cv.LineSegmentDetector.detect(cv._InputArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv._OutputArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv._OutputArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv._OutputArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv._OutputArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Detect lines in the input image.

 @param _image    A grayscale(CV_8UC1) input image.
                  If only a roi needs to be selected, use
                  lsd_ptr-&gt;detect(image(roi), ..., lines);
                  lines += Scalar(roi.x, roi.y, roi.x, roi.y);
 @param _lines    Return: A vector of Vec4i elements specifying the beginning and ending point of a line.
                          Where Vec4i is (x1, y1, x2, y2), point 1 is the start, point 2 - end.
                          Returned lines are strictly oriented depending on the gradient.
 @param width     Return: Vector of widths of the regions, where the lines are found. E.g. Width of line.
 @param prec      Return: Vector of precisions with which the lines are found.
 @param nfa       Return: Vector containing number of false alarms in the line region, with precision of 10%.
                          The bigger the value, logarithmically better the detection.
                              * -1 corresponds to 10 mean false alarms
                              * 0 corresponds to 1 mean false alarm
                              * 1 corresponds to 0.1 mean false alarms
                          This vector will be calculated _only_ when the objects type is REFINE_ADV

</member>
        <member name="M:resolveCMakeBuildDirPath(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Resolves the given relative path in CMake build folder to full platform specific path.
@param relativePath relative path in unix form, for example "ZicerOcrModelBuilder/model_all.z"
@return resolved path

</member>
        <member name="M:getCMakeBuildDirPath">
Returns the path to CMake build folder.
@return the path to CMake build folder.

</member>
        <member name="M:resolveCorePhotoPayPath(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Resolves the given relative path in core-photopay folder to full platform specific path.
@param relativePath relative path in unix form, for example "Matlab/mlacs/IMG_0715.jpg"
@return resolved path, for example "/home/dodo/Work/PhotoPay/core-photopay/Matlab/mlacs/IMG_0715.jpg" on unix or "c:\\users\\dodo\\Desktop\\PhotoPay\\core-photopay\\Matlab\\mlacs\\IMG_0715.jpg"

</member>
        <member name="M:getCorePhotoPayPath">
Returns the path to core-photopay folder that can be used in some tests.
@return the path to core-photopay folder that can be used in some tests.

</member>
        <member name="M:resolveOldTestImagesPath(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Similar to resolveTestImagesPath, but expects input in form "../TestImages/subpath"

</member>
        <member name="M:resolveTestImagesPath(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Resolves the given relative path in TestImages folder to full platform specific path.
@param relativePath relative path in unix form, for example "Cro/video/HUB3/Nexus 5/LGE Nexus 5 - 2014-02-20 16-57-51.ppv"
@return resolved path, for example "/home/dodo/PhotoPayImages/Cro/video/HUB3/Nexus 5/LGE Nexus 5 - 2014-02-20 16-57-51.ppv" on unix or "c:\\users\\dodo\\PhotoPayImages\\Cro\\video\\HUB3\\Nexus 5\\LGE Nexus 5 - 2014-02-20 16-57-51.ppv"

</member>
        <member name="M:getTestImagesPath">

  Created on: 31/05/2014
      Author: dodo

 Copyright (c)2014 Racuni.hr d.o.o. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.

Returns the path to TestImages folder that can be used in all tests.
@return the path to TestImages folder that can be used in all tests.

</member>
        <member name="D:_onexit_t">
warnings and errors are always printed
</member>
        <member name="M:setLogMessageProxy(=FUNC:System.Void(_tagLogLevel,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*))">
Sets a logging callback function for proxying logging to a nother part of the system

</member>
        <member name="D:LogMessageProxyFunction">
Type specifying a logging function callback

</member>
        <member name="M:PPLogf(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,BTEllipsis)">
Log that doesn't add prefix nor newline at the end of string.
Behaves exactly as printf.

</member>
        <member name="M:PPInfo(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,BTEllipsis)">
Write information to log.
@param fmt message format with parameters

</member>
        <member name="M:PPLog(_tagLogLevel,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsConst,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,BTEllipsis)">
Log message
@param lvl message lov level
@param funcName name of function that generated message
@param filename of the file where message was generated
@param line line where message was generated
@param fmt message format with parameters

</member>
        <member name="M:disableFileLogging">
@brief restores default behavious as it were before calling setLogFilename

</member>
        <member name="M:setLogFilename(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
 @brief set the name of the file to which log output will be printed

 @param filename name of file to which log will be printed
 @param fileIsSecondaryLog if set to true, log outputs will be printed
 			both to default output and given filename; if
 			set to false, log outputs will be printed only
	 		to given filename.

</member>
        <member name="M:_memccpy(System.Void*,System.Void!System.Runtime.CompilerServices.IsConst*,System.Int32,System.UInt32)">
nothing is logged
only warnings and errors are logged
warnings, errors and information are logged
warnings, errors, information and debug outputs are logged
everything is logged
</member>
        <member name="D:int8_t">
 PP_WARN_UNUSED_RESULT tells the compiler to emit a warning if a function's
 return value is not used by the caller.

 Place this attribute at the very beginning of a function definition. For
 example, write

   PP_WARN_UNUSED_RESULT int foo();

 or

   PP_WARN_UNUSED_RESULT int foo() { return 42; }

</member>
        <member name="M:Microblink.BarcodeDetailedData.GetAllData(System.String,System.Byte[]*)">
BarcodeDetailedData *
</member>
        <member name="M:Microblink.BarcodeElement.#ctor(Ref&lt;barcode.BarcodeElement&gt;)">
BarcodeElement *
</member>
        <member name="P:Microblink.USDLRecognitionResult.kDataDiscriminator">
            <summary>Optional on compact encoding.

		Document discriminator.</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kUniqueCustomerId">
            <summary>Optional on AAMVA version 01.

		A number or alphanumeric string used by some jurisdictions to identify a "customer" across multiple data bases.</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kNonResident">
            <summary>Optional on AAMVA version 01.

		Non-Resident Indicator. "Y". Used by some jurisdictions to indicate holder of the document is a non-resident.</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kMedicalIndicator">
            <summary>Optional on AAMVA version 01.

		Medical Indicator/Codes.
		STATE SPECIFIC. Freeform; Standard "TBD"</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kHAZMATExpirationDate">
            <summary>Optional on AAMVA 04, 05, 06, 07, 08 and Compact Encoding

		Date on which the hazardous material endorsement granted by the document is
		no longer valid. (MMDDCCYY format)</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kComplianceType">
            <summary>Optional on AAMVA 04, 05, 06, 07, 08 and Compact Encoding

		DHS required field that indicates compliance: "M" = materially compliant;
		"F" = fully compliant; and, "N" = non-compliant.</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kAuditInformation">
            <summary>Optional on AAMVA 02, 03, 04, 05, 06, 07, 08 and Compact Encoding

		A string of letters and/or numbers that identifies when, where, and by whom a driver
		license/ID card was made.</summary>
            <remarks>If audit information is not used on the card or the MRT, it
		must be included in the driver record.</remarks>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kNumberOfDuplicates">
            <summary>Optional on AAMVA version 01.

		Number of duplicate cards issued for a license or ID if any.</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kPermitIssueDate">
            <summary>Optional on AAMVA version 01.

		Driver Permit Issue Date. MMDDCCYY format. Date permit was issued.</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kPermitIdentifier">
            <summary>Optional on AAMVA version 01.

		Type of permit.</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kPermitExpirationDate">
            <summary>Optional on AAMVA version 01.

		Driver Permit Expiration Date. MMDDCCYY format. Date permit expires.</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kIssueTimestamp">
            <summary>Optional on AAMVA version 01.

		Issue Timestamp. A string used by some jurisdictions to validate the document against their data base.</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kLimitedDurationDocument">
            <summary>Optional on AAMVA 04, 05, 06, 07, 08 and Compact Encoding

		DHS required field that indicates that the cardholder has temporary lawful status = "1".</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kDocumentDiscriminator">
            <summary>Mandatory on AAMVA 02, 03, 04, 05, 06, 07, 08 and Compact Encoding</summary>
            <remarks>Number must uniquely identify a particular document issued to that customer
		from others that may have been issued in the past. This number may serve multiple
		purposes of document discrimination, audit information number, and/or inventory control.</remarks>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kCardRevisionDate">
            <summary>Optional on AAMVA 04, 05, 06, 07, 08 and Compact Encoding

		DHS required field that indicates date of the most recent version change or
		modification to the visible format of the DL/ID (MMDDCCYY format)</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kInventoryControlNumber">
            <summary>Optional on AAMVA 02, 03, 04, 05, 06, 07, 08

		A string of letters and/or numbers that is affixed to the raw materials (card stock,
		laminate, etc.) used in producing driver licenses and ID cards. (DHS recommended field)</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kJurisdictionRestrictionCodeDescription">
            <summary>Optional on AAMVA 02, 03, 04, 05, 06, 07, 08 and Compact Encoding

		Text describing the jurisdiction-specific restriction code(s) that curtail driving privileges.</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kJurisdictionEndorsmentCodeDescription">
            <summary>Optional on AAMVA 02, 03, 04, 05, 06, 07, 08 and Compact Encoding

		Text that explains the jurisdiction-specific code(s) that indicates additional
		driving privileges granted to the cardholder beyond the vehicle class.</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kJurisdictionVehicleClassificationDescription">
            <summary>Optional on AAMVA 02, 03, 04, 05, 06, 07, 08 and Compact Encoding

		Text that explains the jurisdiction-specific code(s) for classifications
		of vehicles cardholder is authorized to drive.</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kBiometricData">
            <summary>Optional on compact encodings.

		Biometric data block</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kBiometricDataLength">
            <summary>Optional on compact encodings.

		Biometric data block length</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kBDBFormatType">
            <summary>Optional on compact encodings.

		BDB format type</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kBDBFormatOwner">
            <summary>Optional on compact encodings.

		BDB format owner</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kPortraitImage">
            <summary>Optional on compact encoding.

		Portrait image</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kImageType">
            <summary>Optional on compact encoding.

		Type of image</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kImageTimestamp">
            <summary>Optional on compact encoding.

		Portrait image timestamp</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kAKADateOfBirth">
            <summary>Optional on AAMVA 01. (MMDDCCYY format)

		ALTERNATIVE DATES(S) given as date of birth.</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kVeteran">
            <summary>Optional on AAMVA 07, 08

		Field that indicates that the cardholder is a veteran = "1"</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kOrganDonor">
            <summary>Optional on AAMVA 06, 07, 08

		Field that indicates that the cardholder is an organ donor = "1".</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kAKASuffixName">
            <summary>Optional on AAMVA 01, 03, 04, 05, 06, 07, 08 and Compact Encoding

		Other suffix by which cardholder is known.</summary>
            <remarks>The Suffix Code Portion, if submitted, can contain only the Suffix Codes shown in the following table (e.g., Andrew Johnson, III = JOHNSON@ANDREW@@3RD):

		Suffix     Meaning or Synonym
		JR         Junior
		SR         Senior or Esquire 1ST First
		2ND        Second
		3RD        Third
		4TH        Fourth
		5TH        Fifth
		6TH        Sixth
		7TH        Seventh
		8TH        Eighth
		9TH        Ninth</remarks>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kAKAPrefixName">
            <summary>Optional on AAMVA 01

		ALTERNATIVE PREFIX to Driver Name. Freeform as defined by issuing jurisdiction.</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kAKAGivenName">
            <summary>Optional on AAMVA 01, 03, 04, 05, 06, 07, 08 and Compact Encoding

		Other given name by which cardholder is known</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kAKAFamilyName">
            <summary>Optional on AAMVA 01, 03, 04, 05, 06, 07, 08 and Compact Encoding

		Other family name by which cardholder is known.</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kAKAFullName">
            <summary>Optional on AAMVA version 01, 02

		Other name by which cardholder is known.</summary>
            <remarks>ALTERNATIVE NAME(S) of the individual holding
		the Driver License or ID. FORMAT same as defined in ANSI D20 Data Dictionary.
		(Lastname@Firstname@MI@ suffix if any.)

		(Machine, Mag Stripe uses ‘$’ and Bar Code uses ‘,’ in place of ‘@’)
		Firstname, Middle Initial, Lastname (Human)

		The Name field contains four portions, separated with the "@" delimiter: Last Name (required)
		@ (required)
		First Name (required)
		@ (required if other name portions follow, otherwise optional)
		Middle Name(s) (optional)
		@ (required if other name portions follow, otherwise optional)
		Suffix Code (optional)
		@ (optional)</remarks>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kAKASocialSecurityNumber">
            <summary>Optional on AAMVA version 01.

		Driver "AKA" Social Security Number. FORMAT SAME AS DRIVER SOC SEC NUM. ALTERNATIVE NUMBERS(S) used as SS NUM.</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kSocialSecurityNumber">
            <summary>Optional on AAMVA version 01.

		The number assigned to an individual by the Social Security Administration.</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kUnder21">
            <summary>Optional on AAMVA 05, 06, 07, 08

		Date on which the cardholder turns 21 years old. (MMDDCCYY format)</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kUnder19">
            <summary>Optional on AAMVA 05, 06, 07, 08

		Date on which the cardholder turns 19 years old. (MMDDCCYY format)</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kUnder18">
            <summary>Optional on AAMVA 05, 06, 07, 08

		Date on which the cardholder turns 18 years old. (MMDDCCYY format)</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kHeightCm">
            <summary>Optional on AAMVA 01
		Mandatory on Compact encoding

		HEIGHT in CENTIMETERS</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kHeightIn">
            <summary>Optional on AAMVA 01

		Height (FT/IN)</summary>
            <remarks>FEET (1st char); Inches (2nd and 3rd char).
		Ex. 509 = 5 ft., 9 in.</remarks>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kResidencePostalCode">
            <summary>Optional on AAMVA version 01.

		Driver Residence Postal Code.</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kResidenceJurisdictionCode">
            <summary>Optional on AAMVA version 01.

		Driver Residence Jurisdiction Code.</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kResidenceCity">
            <summary>Optional on AAMVA version 01.

		Driver Residence City</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kResidenceStreetAddress2">
            <summary>Optional on AAMVA version 01.

		Driver Residence Street Address 2.</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kResidenceStreetAddress">
            <summary>Optional on AAMVA version 01.

		Driver Residence Street Address 1.</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kCountryIdentification">
            <summary>Mandatory on AAMVA 02, 03, 04, 05, 06, 07, 08 and Compact Encoding

		Country in which DL/ID is issued. U.S. = USA, Canada = CAN.</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kNamePrefix">
            <summary>Optional on AAMVA 01

		PREFIX to Driver Name. Freeform as defined by issuing jurisdiction.</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kRaceEthnicity">
            <summary>Optional on AAMVA 02, 03, 04, 05, 06, 07, 08 and Compact Encoding

		Codes for race or ethnicity of the cardholder, as defined in ANSI D20.</summary>
            <remarks>Race:
		Code   Description
		AI     Alaskan or American Indian (Having Origins in Any of The Original Peoples of
		North America, and Maintaining Cultural Identification Through Tribal
		Affiliation of Community Recognition)
		AP     Asian or Pacific Islander (Having Origins in Any of the Original Peoples of
		the Far East, Southeast Asia, or Pacific Islands. This Includes China, India,
		Japan, Korea, the Philippines Islands, and Samoa)
		BK     Black (Having Origins in Any of the Black Racial Groups of Africa)
		W      White (Having Origins in Any of The Original Peoples of Europe, North Africa,
		or the Middle East)

		Ethnicity:
		Code   Description
		H      Hispanic Origin (A Person of Mexican, Puerto Rican, Cuban, Central or South
		American or Other Spanish Culture or Origin, Regardless of Race)
		O      Not of Hispanic Origin (Any Person Other Than Hispanic)
		U      Unknown
		</remarks>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kWeightKilograms">
            <summary>Optional on AAMVA 01, 04, 05, 06, 07, 08 and Compact Encoding

		Cardholder weight in kilograms Ex. 84 kg = "084"</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kWeightPounds">
            <summary>Optional on AAMVA 01, 04, 05, 06, 07, 08

		Cardholder weight in pounds Ex. 185 lb = "185"</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kWeightRange">
            <summary>Optional on AAMVA 02, 03, 04, 05, 06, 07, 08

		Indicates the approximate weight range of the cardholder:
		0 = up to 31 kg (up to 70 lbs)
		1 = 32 – 45 kg (71 – 100 lbs)
		2 = 46 - 59 kg (101 – 130 lbs)
		3 = 60 - 70 kg (131 – 160 lbs)
		4 = 71 - 86 kg (161 – 190 lbs)
		5 = 87 - 100 kg (191 – 220 lbs)
		6 = 101 - 113 kg (221 – 250 lbs)
		7 = 114 - 127 kg (251 – 280 lbs)
		8 = 128 – 145 kg (281 – 320 lbs)
		9 = 146+ kg (321+ lbs)</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kPlaceOfBirth">
            <summary>Optional on AAMVA 02, 03, 04, 05, 06, 07, 08 and Compact Encoding

		Country and municipality and/or state/province</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kSecurityVersion">
            <summary>Mandatory on AMMVA Magnetic Stripe Encoding

		Security version beeing used.</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kFederalCommercialVehicleCodes">
            <summary>Mandatory on AAMVA versions 02 and 03.

		Federally established codes for vehicle categories, endorsements, and restrictions
		that are generally applicable to commercial motor vehicles. If the vehicle is not a
		commercial vehicle, "NONE" is to be entered.</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kMiddleNameTruncation">
            <summary>Mandatory on AAMVA 04, 05, 06, 07, 08

		A code that indicates whether a field has been truncated (T), has not been
		truncated (N), or – unknown whether truncated (U).</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kFirstNameTruncation">
            <summary>Mandatory on AAMVA 04, 05, 06, 07, 08 and Compact Encoding

		A code that indicates whether a field has been truncated (T), has not been
		truncated (N), or – unknown whether truncated (U).</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kFamilyNameTruncation">
            <summary>Mandatory on AAMVA 04, 05, 06, 07, 08 and Compact Encoding

		A code that indicates whether a field has been truncated (T), has not been
		truncated (N), or – unknown whether truncated (U).</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kFullAddress">
            <summary>Mandatory on compact encoding.

		Cardholder address.</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kCustomerFullName">
            <summary>Mandatory on AAMVA 01

		NAME of the individual holding the Driver License or ID as defined in
		ANSI D20 Data Dictionary. (Lastname@Firstname@MI@ suffix if any)</summary>
            <remarks>
		(Machine, Mag Stripe uses ‘$’ and Bar Code uses ‘,’ in place of ‘@’)
		Firstname, Middle Initial, Lastname (Human)

		The Name field contains four portions, separated with the "@" delimiter: Last Name (required)
		@ (required)
		First Name (required)
		@ (required if other name portions follow, otherwise optional)
		Middle Name(s) (optional)
		@ (required if other name portions follow, otherwise optional)
		Suffix Code (optional)
		@ (optional)</remarks>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kHeight">
            <summary>Mandatory on AAMVA 02, 03, 04, 05, 06, 07, 08

		Height of cardholder.</summary>
            <remarks>
		Inches (in): number of inches followed by " in"
		example. 6'1'' = "073 in"

		Centimeters (cm): number of centimeters followed by " cm"
		example. 181 centimeters="181 cm"</remarks>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kCustomerMiddleName">
            <summary>Mandatory on AAMVA 04, 05, 06, 07, 08

		Optional on 01.

		Middle name(s) of the cardholder.</summary>
            <remarks>In the case of multiple middle names they
		shall be separated by a comma ",".</remarks>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kStandardRestrictionCode">
            <summary>Optional on AAMVA 01, 02, 03, 04, 05, 06, 07 and 08

		Standard restriction code(s) for cardholder.</summary>
            <remarks> See codes in D20. This data element is a placeholder
		for future efforts to standardize restriction codes.

		Code   Description
		B      Corrective Lenses
		C      Mechanical Devices (Special Brakes, Hand Controls, or Other Adaptive Devices)
		D      Prosthetic Aid
		E      Automatic Transmission
		F      Outside Mirror
		G      Limit to Daylight Only
		H      Limit to Employment
		I      Limited Other
		J      Other
		K      CDL Intrastate Only
		L      Vehicles without air brakes
		M      Except Class A bus
		N      Except Class A and Class B bus
		O      Except Tractor-Trailer
		V      Medical Variance Documentation Required
		W      Farm Waiver</remarks>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kStandardEndorsementCode">
            <summary>Optional on AAMVA 01, 02, 03, 04, 05, 06, 07 and 08

		Standard endorsement code(s) for cardholder.</summary>
            <remarks> See codes in D20. This data element is a
		placeholder for future efforts to standardize endorsement codes.

		Code   Description
		H      Hazardous Material - This endorsement is required for the operation of any vehicle
		transporting hazardous materials requiring placarding, as defined by U.S.
		Department of Transportation regulations.
		L      Motorcycles – Including Mopeds/Motorized Bicycles.
		N      Tank - This endorsement is required for the operation of any vehicle transporting,
		as its primary cargo, any liquid or gaseous material within a tank attached to the vehicle.
		O      Other Jurisdiction Specific Endorsement(s) - This code indicates one or more
		additional jurisdiction assigned endorsements.
		P      Passenger - This endorsement is required for the operation of any vehicle used for
		transportation of sixteen or more occupants, including the driver.
		S      School Bus - This endorsement is required for the operation of a school bus. School bus means a
		CMV used to transport pre-primary, primary, or secondary school students from home to school,
		from school to home, or to and from school sponsored events. School bus does not include a
		bus used as common carrier (49 CRF 383.5).
		T      Doubles/Triples - This endorsement is required for the operation of any vehicle that would be
		referred to as a double or triple.
		X      Combined Tank/HAZ-MAT - This endorsement may be issued to any driver who qualifies for
		both the N and H endorsements.</remarks>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kStandardVehicleClassification">
            <summary>Optional on AAMVA 01, 02, 03, 04, 05, 06, 07, 08 and Compact Encoding

		Standard vehicle classification code(s) for cardholder.</summary>
            <remarks> This data element is a
		placeholder for future efforts to standardize vehicle classifications.</remarks>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kIssuingJurisdiction">
            <summary>Optional on AAMVA 01, 02, 03, 04, 05, 06, 07, 08

		Mandatory on Compact Encoding</summary>
            <remarks>
		Jurisdictions may define a subfile to contain jurisdiction-specific information.
		These subfiles are designated with the first character of “Z” and the second
		character is the first letter of the jurisdiction's name. For example, "ZC" would
		be the designator for a California or Colorado jurisdiction-defined subfile; "ZQ"
		would be the designator for a Quebec jurisdiction-defined subfile. In the case of
		a jurisdiction-defined subfile that has a first letter that could be more than
		one jurisdiction (e.g. California, Colorado, Connecticut) then other data, like
		the IIN or address, must be examined to determine the jurisdiction.</remarks>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kAddressStreet2">
            <summary>Optional on AAMVA 01, 02, 03, 04, 05, 06, 07, 08

		On Compact encoding, use kFullAddress

		Second line of street portion of the cardholder address.</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kHairColor">
            <summary>Optional on AAMVA 01, 02, 03, 04, 05, 06, 07, 08 and Compact Encoding

		Bald, black, blonde, brown, gray, red/auburn, sandy, white, unknown.</summary>
            <remarks>If the issuing
		jurisdiction wishes to abbreviate colors, the three-character codes provided in ANSI D20 must be
		used.

		Code   Description
		BAL    Bald
		BLK    Black
		BLN    Blond
		BRO    Brown
		GRY    Grey
		RED    Red/Auburn
		SDY    Sandy
		WHI    White
		UNK    Unknown</remarks>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kCustomerIdNumber">
            <summary>Mandatory on AAMVA 01, 02, 03, 04, 05, 06, 07, 08 and Compact Encoding

		The number assigned or calculated by the issuing authority.</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kJurisdictionEndorsementCodes">
            <summary>Mandatory on AAMVA 01, 02, 03, 04, 05, 06, 07, 08

		Jurisdiction-specific codes that represent additional privileges
		granted to the cardholder beyond the vehicle class (such as transportation of
		passengers, hazardous materials, operation of motorcycles, etc.).</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kJurisdictionRestrictionCodes">
            <summary>Mandatory on AAMVA 01, 02, 03, 04, 05, 06, 07, 08

		Jurisdiction-specific codes that represent restrictions to driving
		privileges (such as airbrakes, automatic transmission, daylight only, etc.).</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kJurisdictionVehicleClass">
            <summary>Mandatory on AAMVA 01, 02, 03, 04, 05, 06, 07, 08

		Jurisdiction-specific vehicle class / group code</summary>
            <remarks> designating the type
		of vehicle the cardholder has privilege to drive.</remarks>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kJurisdictionVersionNumber">
            <summary>Mandatory on AAMVA 01, 02, 03, 04, 05, 06, 07, 08 and Compact Encoding

		Jurisdiction Version Number</summary>
            <remarks>This is a decimal value between 00 and 99 that
		specifies the jurisdiction version level of the PDF417 bar code format.
		Notwithstanding iterations of this standard, jurisdictions implement incremental
		changes to their bar codes, including new jurisdiction-specific data, compression
		algorithms for digitized images, digital signatures, or new truncation
		conventions used for names and addresses. Each change to the bar code format
		within each AAMVA version (above) must be noted, beginning with Jurisdiction
		Version 00.</remarks>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kDocumentNonexpiring">
            <summary>Optional on AAMVA Magnetic Stripe Encoding

		Field that indicates that the driving and identification privileges granted by the
		document are nonexpiring = "1".</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kDocumentExpirationMonth">
            <summary>Optional on AAMVA Magnetic Stripe Encoding

		Date on which the driving and identification privileges granted by the document are
		no longer valid. (MMYY format)</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kDocumentExpirationDate">
            <summary>Mandatory on AAMVA 01, 02, 03, 04, 05, 06, 07, 08 and Compact Encoding

		Date on which the driving and identification privileges granted by the document are
		no longer valid. (MMDDCCYY format)</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kDocumentIssueDate">
            <summary>Mandatory on AAMVA 01, 02, 03, 04, 05, 06, 07, 08 and Compact Encoding

		Date on which the document was issued. (MMDDCCYY format)</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kIssuerIdentificationNumber">
            <summary>Mandatory on AAMVA 01, 02, 03, 04, 05, 06, 07, 08
		Optional on Compact encoding</summary>
            <remarks>This number uniquely identifies the issuing jurisdiction and can
		be obtained by contacting the ISO Issuing Authority (AAMVA)</remarks>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kAddressPostalCode">
            <summary>Mandatory on AAMVA 01, 02, 03, 04, 05, 06, 07, 08

		On compact encoding, use kFullAddress.</summary>
            <remarks>Postal code portion of the cardholder address in the U.S. and Canada. If the
		trailing portion of the postal code in the U.S. is not known, zeros will be used
		to fill the trailing set of numbers up to nine (9) digits.</remarks>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kAddressJurisdictionCode">
            <summary>Mandatory on AAMVA 01, 02, 03, 04, 05, 06, 07, 08

		On compact encoding, use kFullAddress.</summary>
            <remarks>State portion of the cardholder address.</remarks>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kAddressCity">
            <summary>Mandatory on AAMVA 01, 02, 03, 04, 05, 06, 07, 08

		On compact encoding, use kFullAddress.</summary>
            <remarks>City portion of the cardholder address.</remarks>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kAddressStreet">
            <summary>Mandatory on AAMVA 01, 02, 03, 04, 05, 06, 07, 08

		On compact encoding, use kFullAddress.</summary>
            <remarks>Street portion of the cardholder address.
		The place where the registered driver of a vehicle (individual or corporation) may be contacted such as a house number, street address etc.</remarks>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kEyeColor">
            <summary>Mandatory on AAMVA 01, 02, 03, 04, 05, 06, 07, 08 and Compact encoding

		Color of cardholder's eyes.</summary>
            <remarks>(ANSI D-20 codes)

		Code   Description
		BLK    Black
		BLU    Blue
		BRO    Brown
		GRY    Gray
		GRN    Green
		HAZ    Hazel
		MAR    Maroon
		PNK    Pink
		DIC    Dichromatic
		UNK    Unknown</remarks>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kSex">
            <summary>Mandatory on AAMVA 01, 02, 03, 04, 05, 06, 07, 08 and Compact encoding

		Gender of the cardholder. 1 = male, 2 = female.</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kDateOfBirth">
            <summary>Mandatory on AAMVA 01, 02, 03, 04, 05, 06, 07, 08 and Compact encoding

		Date on which the cardholder was born. (MMDDCCYY format)</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kCustomerFirstName">
            <summary>Mandatory on AAMVA 01, 02, 03, 04, 05, 06, 07, 08 and Compact encoding

		First name of the cardholder.</summary>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kCustomerFamilyName">
            <summary>Mandatory on AAMVA 01, 02, 03, 04, 05, 06, 07, 08 AND compact encoding.

		Family name of the cardholder.</summary>
            <remarks>(Family name is sometimes also called "last name" or "surname.")
		Collect full name for record, print as many characters as possible on portrait side of DL/ID.</remarks>
        </member>
        <member name="P:Microblink.USDLRecognitionResult.kAamvaVersionNumber">
            <summary>Mandatory on all AAMVA driver's license versions.
		
		AAMVA Version Number.</summary>
            <remarks>This is a decimal value between 00 and 99 that
		specifies the version level of the PDF417 bar code format. Version "0" and "00"
		is reserved for bar codes printed to the specification of the American Association
		of Motor Vehicle Administrators (AAMVA) prior to the adoption of the AAMVA DL/ID-2000
		standard. All bar codes compliant with the AAMVA DL/ID-2000 standard are designated
		Version "01." All barcodes compliant with AAMVA Card Design Specification version
		1.0, dated 09-2003 shall be designated Version "02." All barcodes compliant with
		AAMVA Card Design Specification version 2.0, dated 03-2005 shall be designated
		Version "03." All barcodes compliant with AAMVA Card Design Standard version 1.0,
		dated 07-2009 shall be designated Version "04." All barcodes compliant with AAMVA
		Card Design Standard version 1.0, dated 07-2010 shall be designated Version "05."
		All barcodes compliant with AAMVA Card Design Standard version 1.0, dated 07- 2011
		shall be designated Version "06". All barcodes compliant with AAMVA Card Design
		Standard version 1.0, dated 06-2012 shall be designated Version "07". All barcodes
		compliant with this current AAMVA standard shall be designated "08". Should a need
		arise requiring major revision to the format, this field provides the means to
		accommodate additional revision. "Compact" when Compact encoding is used.</remarks>
        </member>
        <member name="M:photopay.DLRecognizer.setAutoScaleDetection(System.Boolean)">
Enables detecting the scale of the image before performing a barcode read.
@param autoScale

</member>
        <member name="M:photopay.DLRecognizer.setAllowNullQuietZone(System.Boolean)">
Enables decoding of barcodes without quiet zone round the barcode
(e.g. text concatenated with barcode blocks)
@param allowNullQuietZone

</member>
        <member name="M:photopay.DLRecognizer.setUseUncertainDecoding(System.Boolean)">
Enables decoding of barcodes where multiple rows are missing from the end of the barcode
(e.g. when more lines at the end of barcode are not printed, and there is not enough
error correction codewords left to compensate for missing rows)
@param useUncertainDecoding

</member>
        <member name="M:photopay.DLRecognizer.resetResults">
Resets the best results in the whole chain
and clears history

</member>
        <member name="M:photopay.DLRecognizer.recognize(mv.StaticImageCache*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;Ref&lt;photopay.RecognitionData&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,photopay.PaymentRecognizerDelegate*)">
     * Method fills the recognition result object with
     * payment data recognized from given image

     * Returns true if scanning was successful, false otherwise

</member>
        <member name="F:photopay.Keys.kDataDiscriminator">
Optional on compact encoding.

Document discriminator.

</member>
        <member name="F:photopay.Keys.kUniqueCustomerId">
Optional on AAMVA version 01.

A number or alphanumeric string used by some jurisdictions to identify a "customer" across multiple data bases.

</member>
        <member name="F:photopay.Keys.kNonResident">
Optional on AAMVA version 01.

Non-Resident Indicator. "Y". Used by some jurisdictions to indicate holder of the document is a non-resident.

</member>
        <member name="F:photopay.Keys.kMedicalIndicator">
Optional on AAMVA version 01.

Medical Indicator/Codes.
STATE SPECIFIC. Freeform; Standard "TBD"

</member>
        <member name="F:photopay.Keys.kHAZMATExpirationDate">
Optional on AAMVA 04, 05, 06, 07, 08 and Compact Encoding

Date on which the hazardous material endorsement granted by the document is
no longer valid. (MMDDCCYY format)

</member>
        <member name="F:photopay.Keys.kComplianceType">
Optional on AAMVA 04, 05, 06, 07, 08 and Compact Encoding

DHS required field that indicates compliance: "M" = materially compliant;
"F" = fully compliant; and, "N" = non-compliant.

</member>
        <member name="F:photopay.Keys.kAuditInformation">
Optional on AAMVA 02, 03, 04, 05, 06, 07, 08 and Compact Encoding

A string of letters and/or numbers that identifies when, where, and by whom a driver
license/ID card was made. If audit information is not used on the card or the MRT, it
must be included in the driver record.

</member>
        <member name="F:photopay.Keys.kNumberOfDuplicates">
Optional on AAMVA version 01.

Number of duplicate cards issued for a license or ID if any.

</member>
        <member name="F:photopay.Keys.kPermitIssueDate">
Optional on AAMVA version 01.

Driver Permit Issue Date. MMDDCCYY format. Date permit was issued.

</member>
        <member name="F:photopay.Keys.kPermitIdentifier">
Optional on AAMVA version 01.

Type of permit.

</member>
        <member name="F:photopay.Keys.kPermitExpirationDate">
Optional on AAMVA version 01.

Driver Permit Expiration Date. MMDDCCYY format. Date permit expires.

</member>
        <member name="F:photopay.Keys.kIssueTimestamp">
Optional on AAMVA version 01.

Issue Timestamp. A string used by some jurisdictions to validate the document against their data base.

</member>
        <member name="F:photopay.Keys.kLimitedDurationDocument">
Optional on AAMVA 04, 05, 06, 07, 08 and Compact Encoding

DHS required field that indicates that the cardholder has temporary lawful status = "1".

</member>
        <member name="F:photopay.Keys.kDocumentDiscriminator">
Mandatory on AAMVA 02, 03, 04, 05, 06, 07, 08 and Compact Encoding

Number must uniquely identify a particular document issued to that customer
from others that may have been issued in the past. This number may serve multiple
purposes of document discrimination, audit information number, and/or inventory control.

</member>
        <member name="F:photopay.Keys.kCardRevisionDate">
Optional on AAMVA 04, 05, 06, 07, 08 and Compact Encoding

DHS required field that indicates date of the most recent version change or
modification to the visible format of the DL/ID (MMDDCCYY format)

</member>
        <member name="F:photopay.Keys.kInventoryControlNumber">
Optional on AAMVA 02, 03, 04, 05, 06, 07, 08

A string of letters and/or numbers that is affixed to the raw materials (card stock,
laminate, etc.) used in producing driver licenses and ID cards. (DHS recommended field)

</member>
        <member name="F:photopay.Keys.kJurisdictionRestrictionCodeDescription">
Optional on AAMVA 02, 03, 04, 05, 06, 07, 08 and Compact Encoding

Text describing the jurisdiction-specific restriction code(s) that curtail driving privileges.

</member>
        <member name="F:photopay.Keys.kJurisdictionEndorsmentCodeDescription">
Optional on AAMVA 02, 03, 04, 05, 06, 07, 08 and Compact Encoding

Text that explains the jurisdiction-specific code(s) that indicates additional
driving privileges granted to the cardholder beyond the vehicle class.

</member>
        <member name="F:photopay.Keys.kJurisdictionVehicleClassificationDescription">
Optional on AAMVA 02, 03, 04, 05, 06, 07, 08 and Compact Encoding

Text that explains the jurisdiction-specific code(s) for classifications
of vehicles cardholder is authorized to drive.

</member>
        <member name="F:photopay.Keys.kBiometricData">
Optional on compact encodings.

Biometric data block

</member>
        <member name="F:photopay.Keys.kBiometricDataLength">
Optional on compact encodings.

Biometric data block length

</member>
        <member name="F:photopay.Keys.kBDBFormatType">
Optional on compact encodings.

BDB format type

</member>
        <member name="F:photopay.Keys.kBDBFormatOwner">
Optional on compact encodings.

BDB format owner

</member>
        <member name="F:photopay.Keys.kPortraitImage">
Optional on compact encoding.

Portrait image

</member>
        <member name="F:photopay.Keys.kImageType">
Optional on compact encoding.

Type of image

</member>
        <member name="F:photopay.Keys.kImageTimestamp">
Optional on compact encoding.

Portrait image timestamp

</member>
        <member name="F:photopay.Keys.kAKADateOfBirth">
Optional on AAMVA 01. (MMDDCCYY format)

ALTERNATIVE DATES(S) given as date of birth.

</member>
        <member name="F:photopay.Keys.kVeteran">
Optional on AAMVA 07, 08

Field that indicates that the cardholder is a veteran = "1"

</member>
        <member name="F:photopay.Keys.kOrganDonor">
Optional on AAMVA 06, 07, 08

Field that indicates that the cardholder is an organ donor = "1".

</member>
        <member name="F:photopay.Keys.kAKASuffixName">
Optional on AAMVA 01, 03, 04, 05, 06, 07, 08 and Compact Encoding

Other suffix by which cardholder is known.

The Suffix Code Portion, if submitted, can contain only the Suffix Codes shown in the following table (e.g., Andrew Johnson, III = JOHNSON@ANDREW@@3RD):

Suffix     Meaning or Synonym
JR         Junior
SR         Senior or Esquire 1ST First
2ND        Second
3RD        Third
4TH        Fourth
5TH        Fifth
6TH        Sixth
7TH        Seventh
8TH        Eighth
9TH        Ninth

</member>
        <member name="F:photopay.Keys.kAKAPrefixName">
Optional on AAMVA 01

ALTERNATIVE PREFIX to Driver Name. Freeform as defined by issuing jurisdiction.

</member>
        <member name="F:photopay.Keys.kAKAGivenName">
Optional on AAMVA 01, 03, 04, 05, 06, 07, 08 and Compact Encoding

Other given name by which cardholder is known

</member>
        <member name="F:photopay.Keys.kAKAMiddleName">
Optional on AAMVA 01

ALTERNATIVE MIDDLE NAME(s) or INITIALS of the individual holding the Driver License or ID.
Hyphenated names acceptable, spaces between names acceptable, but no other
use of special symbols

</member>
        <member name="F:photopay.Keys.kAKAFamilyName">
Optional on AAMVA 01, 03, 04, 05, 06, 07, 08 and Compact Encoding

Other family name by which cardholder is known.

</member>
        <member name="F:photopay.Keys.kAKAFullName">
Optional on AAMVA version 01, 02

Other name by which cardholder is known. ALTERNATIVE NAME(S) of the individual holding
the Driver License or ID. FORMAT same as defined in ANSI D20 Data Dictionary.
(Lastname@Firstname@MI@ suffix if any.)

(Machine, Mag Stripe uses â€$â€™ and Bar Code uses â€,â€™ in place of â€@â€™)
Firstname, Middle Initial, Lastname (Human)

The Name field contains four portions, separated with the "@" delimiter: Last Name (required)
@ (required)
First Name (required)
@ (required if other name portions follow, otherwise optional)
Middle Name(s) (optional)
@ (required if other name portions follow, otherwise optional)
Suffix Code (optional)
@ (optional)

</member>
        <member name="F:photopay.Keys.kAKASocialSecurityNumber">
Optional on AAMVA version 01.

Driver "AKA" Social Security Number. FORMAT SAME AS DRIVER SOC SEC NUM. ALTERNATIVE NUMBERS(S) used as SS NUM.

</member>
        <member name="F:photopay.Keys.kSocialSecurityNumber">
Optional on AAMVA version 01.

The number assigned to an individual by the Social Security Administration.

</member>
        <member name="F:photopay.Keys.kUnder21">
Optional on AAMVA 05, 06, 07, 08

Date on which the cardholder turns 21 years old. (MMDDCCYY format)

</member>
        <member name="F:photopay.Keys.kUnder19">
Optional on AAMVA 05, 06, 07, 08

Date on which the cardholder turns 19 years old. (MMDDCCYY format)

</member>
        <member name="F:photopay.Keys.kUnder18">
Optional on AAMVA 05, 06, 07, 08

Date on which the cardholder turns 18 years old. (MMDDCCYY format)

</member>
        <member name="F:photopay.Keys.kHeightCm">
Optional on AAMVA 01
Mandatory on Compact encoding

HEIGHT in CENTIMETERS

</member>
        <member name="F:photopay.Keys.kHeightIn">
Optional on AAMVA 01

Height (FT/IN)

FEET (1st char); Inches (2nd and 3rd char).
Ex. 509 = 5 ft., 9 in.

</member>
        <member name="F:photopay.Keys.kResidencePostalCode">
Optional on AAMVA version 01.

Driver Residence Postal Code.

</member>
        <member name="F:photopay.Keys.kResidenceJurisdictionCode">
Optional on AAMVA version 01.

Driver Residence Jurisdiction Code.

</member>
        <member name="F:photopay.Keys.kResidenceCity">
Optional on AAMVA version 01.

Driver Residence City

</member>
        <member name="F:photopay.Keys.kResidenceStreetAddress2">
Optional on AAMVA version 01.

Driver Residence Street Address 2.

</member>
        <member name="F:photopay.Keys.kResidenceStreetAddress">
Optional on AAMVA version 01.

Driver Residence Street Address 1.

</member>
        <member name="F:photopay.Keys.kCountryIdentification">
Mandatory on AAMVA 02, 03, 04, 05, 06, 07, 08 and Compact Encoding

Country in which DL/ID is issued. U.S. = USA, Canada = CAN.

</member>
        <member name="F:photopay.Keys.kNamePrefix">
Optional on AAMVA 01

PREFIX to Driver Name. Freeform as defined by issuing jurisdiction.

</member>
        <member name="F:photopay.Keys.kRaceEthnicity">
Optional on AAMVA 02, 03, 04, 05, 06, 07, 08 and Compact Encoding

Codes for race or ethnicity of the cardholder, as defined in ANSI D20.

Race:
Code   Description
AI     Alaskan or American Indian (Having Origins in Any of The Original Peoples of
North America, and Maintaining Cultural Identification Through Tribal
Affiliation of Community Recognition)
AP     Asian or Pacific Islander (Having Origins in Any of the Original Peoples of
the Far East, Southeast Asia, or Pacific Islands. This Includes China, India,
Japan, Korea, the Philippines Islands, and Samoa)
BK     Black (Having Origins in Any of the Black Racial Groups of Africa)
W      White (Having Origins in Any of The Original Peoples of Europe, North Africa,
or the Middle East)

Ethnicity:
Code   Description
H      Hispanic Origin (A Person of Mexican, Puerto Rican, Cuban, Central or South
American or Other Spanish Culture or Origin, Regardless of Race)
O      Not of Hispanic Origin (Any Person Other Than Hispanic) U Unknown


</member>
        <member name="F:photopay.Keys.kWeightKilograms">
Optional on AAMVA 01, 04, 05, 06, 07, 08 and Compact Encoding

Cardholder weight in kilograms Ex. 84 kg = "084"

</member>
        <member name="F:photopay.Keys.kWeightPounds">
Optional on AAMVA 01, 04, 05, 06, 07, 08

Cardholder weight in pounds Ex. 185 lb = "185"

</member>
        <member name="F:photopay.Keys.kWeightRange">
Optional on AAMVA 02, 03, 04, 05, 06, 07, 08

Indicates the approximate weight range of the cardholder:
0 = up to 31 kg (up to 70 lbs)
1 = 32 â€“ 45 kg (71 â€“ 100 lbs)
2 = 46 - 59 kg (101 â€“ 130 lbs)
3 = 60 - 70 kg (131 â€“ 160 lbs)
4 = 71 - 86 kg (161 â€“ 190 lbs)
5 = 87 - 100 kg (191 â€“ 220 lbs)
6 = 101 - 113 kg (221 â€“ 250 lbs)
7 = 114 - 127 kg (251 â€“ 280 lbs)
8 = 128 â€“ 145 kg (281 â€“ 320 lbs)
9 = 146+ kg (321+ lbs)

</member>
        <member name="F:photopay.Keys.kPlaceOfBirth">
Optional on AAMVA 02, 03, 04, 05, 06, 07, 08 and Compact Encoding

Country and municipality and/or state/province

</member>
        <member name="F:photopay.Keys.kSecurityVersion">
      Mandatory on AMMVA Magnetic Stripe Encoding

      Security version beeing used.

</member>
        <member name="F:photopay.Keys.kFederalCommercialVehicleCodes">
Mandatory on AAMVA versions 02 and 03.

Federally established codes for vehicle categories, endorsements, and restrictions
that are generally applicable to commercial motor vehicles. If the vehicle is not a
commercial vehicle, "NONE" is to be entered.

</member>
        <member name="F:photopay.Keys.kMiddleNameTruncation">
Mandatory on AAMVA 04, 05, 06, 07, 08

A code that indicates whether a field has been truncated (T), has not been
truncated (N), or â€“ unknown whether truncated (U).

</member>
        <member name="F:photopay.Keys.kFirstNameTruncation">
Mandatory on AAMVA 04, 05, 06, 07, 08 and Compact Encoding

A code that indicates whether a field has been truncated (T), has not been
truncated (N), or â€“ unknown whether truncated (U).

</member>
        <member name="F:photopay.Keys.kFamilyNameTruncation">
Mandatory on AAMVA 04, 05, 06, 07, 08 and Compact Encoding

A code that indicates whether a field has been truncated (T), has not been
truncated (N), or â€“ unknown whether truncated (U).

</member>
        <member name="F:photopay.Keys.kFullAddress">
Mandatory on compact encoding.

Cardholder address.

</member>
        <member name="F:photopay.Keys.kCustomerFullName">
Mandatory on AAMVA 01

NAME of the individual holding the Driver License or ID as defined in
ANSI D20 Data Dictionary. (Lastname@Firstname@MI@ suffix if any)

(Machine, Mag Stripe uses â€$â€™ and Bar Code uses â€,â€™ in place of â€@â€™)
Firstname, Middle Initial, Lastname (Human)

The Name field contains four portions, separated with the "@" delimiter: Last Name (required)
@ (required)
First Name (required)
@ (required if other name portions follow, otherwise optional)
Middle Name(s) (optional)
@ (required if other name portions follow, otherwise optional)
Suffix Code (optional)
@ (optional)

</member>
        <member name="F:photopay.Keys.kHeight">
Mandatory on AAMVA 02, 03, 04, 05, 06, 07, 08

Height of cardholder.

Inches (in): number of inches followed by " in"
example. 6'1'' = "073 in"

Centimeters (cm): number of centimeters followed by " cm"
example. 181 centimeters="181 cm"

</member>
        <member name="F:photopay.Keys.kCustomerMiddleName">
Mandatory on AAMVA 04, 05, 06, 07, 08

Optional on 01.

Middle name(s) of the cardholder. In the case of multiple middle names they
shall be separated by a comma ",".

</member>
        <member name="F:photopay.Keys.kStandardRestrictionCode">
Optional on AAMVA 01, 02, 03, 04, 05, 06, 07 and 08

Standard restriction code(s) for cardholder. See codes in D20. This data element is a placeholder
for future efforts to standardize restriction codes.

Code   Description
B      Corrective Lenses
C      Mechanical Devices (Special Brakes, Hand Controls, or Other Adaptive Devices)
D      Prosthetic Aid
E      Automatic Transmission
F      Outside Mirror
G      Limit to Daylight Only
H      Limit to Employment
I      Limited Other
J      Other
K      CDL Intrastate Only
L      Vehicles without air brakes
M      Except Class A bus
N      Except Class A and Class B bus
O      Except Tractor-Trailer
V      Medical Variance Documentation Required
W      Farm Waiver

</member>
        <member name="F:photopay.Keys.kStandardEndorsementCode">
Optional on AAMVA 01, 02, 03, 04, 05, 06, 07 and 08

Standard endorsement code(s) for cardholder. See codes in D20. This data element is a
placeholder for future efforts to standardize endorsement codes.

Code   Description
H      Hazardous Material - This endorsement is required for the operation of any vehicle
transporting hazardous materials requiring placarding, as defined by U.S.
Department of Transportation regulations.
L      Motorcycles â€“ Including Mopeds/Motorized Bicycles.
N      Tank - This endorsement is required for the operation of any vehicle transporting,
as its primary cargo, any liquid or gaseous material within a tank attached to the vehicle.
O      Other Jurisdiction Specific Endorsement(s) - This code indicates one or more
additional jurisdiction assigned endorsements.
P      Passenger - This endorsement is required for the operation of any vehicle used for
transportation of sixteen or more occupants, including the driver.
S      School Bus - This endorsement is required for the operation of a school bus. School bus means a
CMV used to transport pre-primary, primary, or secondary school students from home to school,
from school to home, or to and from school sponsored events. School bus does not include a
bus used as common carrier (49 CRF 383.5).
T      Doubles/Triples - This endorsement is required for the operation of any vehicle that would be
referred to as a double or triple.
X      Combined Tank/HAZ-MAT - This endorsement may be issued to any driver who qualifies for
both the N and H endorsements.

</member>
        <member name="F:photopay.Keys.kStandardVehicleClassification">
Optional on AAMVA 01, 02, 03, 04, 05, 06, 07, 08 and Compact Encoding

Standard vehicle classification code(s) for cardholder. This data element is a
placeholder for future efforts to standardize vehicle classifications.

</member>
        <member name="F:photopay.Keys.kIssuingJurisdiction">
Optional on AAMVA 01, 02, 03, 04, 05, 06, 07, 08

Mandatory on Compact Encoding

Jurisdictions may define a subfile to contain jurisdiction-specific information.
These subfiles are designated with the first character of â€śZâ€ť and the second
character is the first letter of the jurisdiction's name. For example, "ZC" would
be the designator for a California or Colorado jurisdiction-defined subfile; "ZQ"
would be the designator for a Quebec jurisdiction-defined subfile. In the case of
a jurisdiction-defined subfile that has a first letter that could be more than
one jurisdiction (e.g. California, Colorado, Connecticut) then other data, like
the IIN or address, must be examined to determine the jurisdiction.

</member>
        <member name="F:photopay.Keys.kAddressStreet2">
Optional on AAMVA 01, 02, 03, 04, 05, 06, 07, 08

On Compact encoding, use kFullAddress

Second line of street portion of the cardholder address.

</member>
        <member name="F:photopay.Keys.kNameSuffix">
Optional on AAMVA 01, 02, 03, 04, 05, 06, 07, 08 and Compact Encoding

Name Suffix (If jurisdiction participates in systems requiring name suffix (PDPS, CDLIS, etc.), the suffix must be collected and displayed on the DL/ID and in the MRT). Collect full name for record, print as many characters as possible on portrait side of DL/ID.
- JR (Junior)
- SR (Senior)
- 1ST or I (First)
- 2ND or II (Second)
- 3RD or III (Third)
- 4TH or IV (Fourth)
- 5TH or V (Fifth)
- 6TH or VI (Sixth)
- 7TH or VII (Seventh)
- 8TH or VIII (Eighth)
- 9TH or IX (Ninth)

</member>
        <member name="F:photopay.Keys.kHairColor">
Optional on AAMVA 01, 02, 03, 04, 05, 06, 07, 08 and Compact Encoding

Bald, black, blonde, brown, gray, red/auburn, sandy, white, unknown. If the issuing
jurisdiction wishes to abbreviate colors, the three-character codes provided in ANSI D20 must be
used.

Code   Description
BAL    Bald
BLK    Black
BLN    Blond
BRO    Brown
GRY    Grey
RED    Red/Auburn
SDY    Sandy
WHI    White 
UNK    Unknown

</member>
        <member name="F:photopay.Keys.kCustomerIdNumber">
Mandatory on AAMVA 01, 02, 03, 04, 05, 06, 07, 08 and Compact Encoding

The number assigned or calculated by the issuing authority.

</member>
        <member name="F:photopay.Keys.kJurisdictionEndorsementCodes">
Mandatory on AAMVA 01, 02, 03, 04, 05, 06, 07, 08

Jurisdiction-specific codes that represent additional privileges
granted to the cardholder beyond the vehicle class (such as transportation of
passengers, hazardous materials, operation of motorcycles, etc.).

</member>
        <member name="F:photopay.Keys.kJurisdictionRestrictionCodes">
Mandatory on AAMVA 01, 02, 03, 04, 05, 06, 07, 08

Jurisdiction-specific codes that represent restrictions to driving
privileges (such as airbrakes, automatic transmission, daylight only, etc.).

</member>
        <member name="F:photopay.Keys.kJurisdictionVehicleClass">
Mandatory on AAMVA 01, 02, 03, 04, 05, 06, 07, 08

Jurisdiction-specific vehicle class / group code, designating the type
of vehicle the cardholder has privilege to drive.

</member>
        <member name="F:photopay.Keys.kJurisdictionVersionNumber">
Mandatory on AAMVA 01, 02, 03, 04, 05, 06, 07, 08 and Compact Encoding

Jurisdiction Version Number: This is a decimal value between 00 and 99 that
specifies the jurisdiction version level of the PDF417 bar code format.
Notwithstanding iterations of this standard, jurisdictions implement incremental
changes to their bar codes, including new jurisdiction-specific data, compression
algorithms for digitized images, digital signatures, or new truncation
conventions used for names and addresses. Each change to the bar code format
within each AAMVA version (above) must be noted, beginning with Jurisdiction
Version 00.

</member>
        <member name="F:photopay.Keys.kDocumentNonexpiring">
     Optional on AAMVA Magnetic Stripe Encoding

     Field that indicates that the driving and identification privileges granted by the
     document are nonexpiring = "1".

</member>
        <member name="F:photopay.Keys.kDocumentExpirationMonth">
     Optional on AAMVA Magnetic Stripe Encoding

     Date on which the driving and identification privileges granted by the document are
     no longer valid. (MMYY format)

</member>
        <member name="F:photopay.Keys.kDocumentExpirationDate">
Mandatory on AAMVA 01, 02, 03, 04, 05, 06, 07, 08 and Compact Encoding
Optional on AAMVA Magnetic Stripe Encoding

Date on which the driving and identification privileges granted by the document are
no longer valid. (MMDDCCYY format)

</member>
        <member name="F:photopay.Keys.kDocumentIssueDate">
Mandatory on AAMVA 01, 02, 03, 04, 05, 06, 07, 08 and Compact Encoding

Date on which the document was issued. (MMDDCCYY format)

</member>
        <member name="F:photopay.Keys.kIssuerIdentificationNumber">
Mandatory on AAMVA 01, 02, 03, 04, 05, 06, 07, 08
Optional on Compact encoding

This number uniquely identifies the issuing jurisdiction and can
be obtained by contacting the ISO Issuing Authority (AAMVA)

</member>
        <member name="F:photopay.Keys.kAddressPostalCode">
Mandatory on AAMVA 01, 02, 03, 04, 05, 06, 07, 08

On compact encoding, use kFullAddress.

Postal code portion of the cardholder address in the U.S. and Canada. If the
trailing portion of the postal code in the U.S. is not known, zeros will be used
to fill the trailing set of numbers up to nine (9) digits.

</member>
        <member name="F:photopay.Keys.kAddressJurisdictionCode">
Mandatory on AAMVA 01, 02, 03, 04, 05, 06, 07, 08

On compact encoding, use kFullAddress.

State portion of the cardholder address.

</member>
        <member name="F:photopay.Keys.kAddressCity">
Mandatory on AAMVA 01, 02, 03, 04, 05, 06, 07, 08

On compact encoding, use kFullAddress.

City portion of the cardholder address.

</member>
        <member name="F:photopay.Keys.kAddressStreet">
Mandatory on AAMVA 01, 02, 03, 04, 05, 06, 07, 08

On compact encoding, use kFullAddress.

Street portion of the cardholder address.
The place where the registered driver of a vehicle (individual or corporation) may be contacted such as a house number, street address etc.

</member>
        <member name="F:photopay.Keys.kEyeColor">
Mandatory on AAMVA 01, 02, 03, 04, 05, 06, 07, 08 and Compact encoding

Color of cardholder's eyes. (ANSI D-20 codes)

Code   Description
BLK    Black
BLU    Blue
BRO    Brown
GRY    Gray
GRN    Green
HAZ    Hazel
MAR    Maroon 
PNK    Pink
DIC    Dichromatic 
UNK    Unknown

</member>
        <member name="F:photopay.Keys.kSex">
Mandatory on AAMVA 01, 02, 03, 04, 05, 06, 07, 08 and Compact encoding

Gender of the cardholder. 1 = male, 2 = female.

</member>
        <member name="F:photopay.Keys.kDateOfBirth">
Mandatory on AAMVA 01, 02, 03, 04, 05, 06, 07, 08 and Compact encoding

Date on which the cardholder was born. (MMDDCCYY format)

</member>
        <member name="F:photopay.Keys.kCustomerFirstName">
Mandatory on AAMVA 01, 02, 03, 04, 05, 06, 07, 08 and Compact encoding

First name of the cardholder.

</member>
        <member name="F:photopay.Keys.kCustomerFamilyName">
Mandatory on AAMVA 01, 02, 03, 04, 05, 06, 07, 08 AND compact encoding.

Family name of the cardholder. (Family name is sometimes also called "last name" or "surname.")
Collect full name for record, print as many characters as possible on portrait side of DL/ID.

</member>
        <member name="F:photopay.Keys.kAamvaVersionNumber">
Mandatory on all AAMVA driver's license versions.

AAMVA Version Number: This is a decimal value between 00 and 99 that
specifies the version level of the PDF417 bar code format. Version "0" and "00"
is reserved for bar codes printed to the specification of the American Association
of Motor Vehicle Administrators (AAMVA) prior to the adoption of the AAMVA DL/ID-2000
standard. All bar codes compliant with the AAMVA DL/ID-2000 standard are designated
Version "01." All barcodes compliant with AAMVA Card Design Specification version
1.0, dated 09-2003 shall be designated Version "02." All barcodes compliant with
AAMVA Card Design Specification version 2.0, dated 03-2005 shall be designated
Version "03." All barcodes compliant with AAMVA Card Design Standard version 1.0,
dated 07-2009 shall be designated Version "04." All barcodes compliant with AAMVA
Card Design Standard version 1.0, dated 07-2010 shall be designated Version "05."
All barcodes compliant with AAMVA Card Design Standard version 1.0, dated 07- 2011 
shall be designated Version "06". All barcodes compliant with AAMVA Card Design 
Standard version 1.0, dated 06-2012 shall be designated Version "07". All barcodes 
compliant with this current AAMVA standard shall be designated "08". Should a need 
arise requiring major revision to the format, this field provides the means to 
accommodate additional revision. "Compact" when Compact encoding is used.

</member>
        <member name="M:DateTimeFormatter.format(DateTime!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @brief formats the datetime object to string

 @param dateTime
 @return

</member>
        <member name="M:DateTimeFormatter.parse(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,DateTime*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief parse
@param str
@param dateTime
@return

</member>
        <member name="M:DateTimeFormatter.Dispose">
Virtual destructor

</member>
        <member name="M:DateTimeFormatter.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief DateTimeFormatter
@param format

</member>
        <member name="F:DateTimeFormatter.format_">
Format 
</member>
        <member name="T:DateTimeFormatter">
 @brief Class responsible for parsing date time objects from string

 Currently supports following values:

 DD day in the month, two digit
 MM month, two digits
 YYYY year, four digits

 All combinations are allowed, e.g
 DDMMYYYY
 YYYYMMDD
 etc.

</member>
        <member name="M:DateTime.getCentury">
@brief getCentury
@return century in which the date is

</member>
        <member name="M:DateTime.getYear">
@brief getYear
@return Year of the date

</member>
        <member name="M:DateTime.getMonth">
@brief getMonth
@return Month in year from 1 to 12

</member>
        <member name="M:DateTime.getDay">
@brief getDay
@return day in month

</member>
        <member name="M:DateTime.Dispose">
Virtual destructor

</member>
        <member name="M:DateTime.create(System.Int32,System.Int32,System.Int32,DateTime*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief creates a day with a given day, month and year
@param day
@param month
@param year
@param date, returned by reference
@return true if succeded, false otherwise.

</member>
        <member name="M:DateTime.create(DateTime*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief creates a day with a current day, month and year
@param date, current date, returned by reference

</member>
        <member name="M:DateTime.#ctor">
Creates Now object

</member>
        <member name="M:DateTime.#ctor(tm)">
 Designated constructor.

 Private. Use factory method which returns a status if creation failed.

</member>
        <member name="F:DateTime.time_">
Exact time
@brief time_

</member>
        <member name="T:DateTime">
 \file

 Date.hpp

  Created on: May 22, 2014
      Author: cerovec

 Copyright (c)20114 Racuni.hr d.o.o. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.

</member>
        <member name="F:barcode.Code128PatternDetector.END_PATTERN_REVERSED">
Elements of the reversed Code128 end pattern =&gt; 2111332 
</member>
        <member name="F:barcode.Code128PatternDetector.END_PATTERN">
Elements of the Code128 end pattern =&gt; 2331112 
</member>
        <member name="F:barcode.Code128PatternDetector.END_PATTERN_SUM">
Sum of elements in the Code128 end pattern = 13 
</member>
        <member name="F:barcode.Code128PatternDetector.END_PATTERN_LENGTH">
Number of elements in the Code128 end pattern = 7 
</member>
        <member name="F:barcode.Code128PatternDetector.START_PATTERN_REVERSED_C">
Elements of the reversed Code128 start pattern for Subtype C =&gt; 31111118 
</member>
        <member name="F:barcode.Code128PatternDetector.START_PATTERN_C">
Elements of the Code128 start pattern for Subtype C =&gt; 211232 
</member>
        <member name="F:barcode.Code128PatternDetector.START_PATTERN_REVERSED_B">
Elements of the reversed Code128 start pattern for Subtype B =&gt; 412112 
</member>
        <member name="F:barcode.Code128PatternDetector.START_PATTERN_B">
Elements of the Code39 start pattern for Subtype B =&gt; 211214 
</member>
        <member name="F:barcode.Code128PatternDetector.START_PATTERN_REVERSED_A">
Elements of the reversed Code128 start pattern for Subtype A =&gt; 214112 
</member>
        <member name="F:barcode.Code128PatternDetector.START_PATTERN_A">
Elements of the Code128 start pattern for Subtype A =&gt; 211412 
</member>
        <member name="F:barcode.Code128PatternDetector.START_PATTERN_SUM">
Sum of elements in the Code128 start pattern = 11 
</member>
        <member name="F:barcode.Code128PatternDetector.START_PATTERN_LENGTH">
Number of elements in the Code128 start pattern = 6 
</member>
        <member name="F:barcode.Code128PatternDetector.PATTERN_SUM">
Sum of elements in all Code128 patterns = 11 
</member>
        <member name="F:barcode.Code128PatternDetector.PATTERN_LENGTH">
Number of elements in all Code128 patterns = 6 
</member>
        <member name="F:barcode.Code128PatternDetector.MAX_DECODING_AVERAGE_DIFFERENCE">
Maximum allowed average difference between patterns to consider them equal 
</member>
        <member name="F:barcode.Code128PatternDetector.MAX_DECODING_INDIVIDUAL_DIFFERENCE">
Maximum allowed difference between individual elements of two patterns
</member>
        <member name="F:barcode.Code39PatternDetector.PATTERN_REVERSED">
Elements of the reversed Code39 pattern =&gt; 112121121 
</member>
        <member name="F:barcode.Code39PatternDetector.PATTERN">
Elements of the Code39 pattern =&gt; 121121211 
</member>
        <member name="F:barcode.Code39PatternDetector.PATTERN_SUM">
Sum of elements in the Code39 pattern = 12 
</member>
        <member name="F:barcode.Code39PatternDetector.PATTERN_LENGTH">
Number of elements in the Code39 pattern = 9 
</member>
        <member name="M:barcode.BarcodeRecognizerDelegate.showDrawBuffer">
This is the callback which shows the image that was returned
via method getDrawBuffer.

</member>
        <member name="M:barcode.BarcodeRecognizerDelegate.getDrawBuffer">
in debug mode, gets the draw buffer for scanner to draw
@return pointer to cv::Mat which contains draw buffer

</member>
        <member name="M:barcode.BarcodeRecognizerDelegate.recognitionFinished(barcode.BarcodeData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Recognizer finished recognition with result

</member>
        <member name="M:barcode.BarcodeRecognizerDelegate.recognitionStarted">
Called when the recognizer starts recognition

</member>
        <member name="M:barcode.BarcodeRecognizerDelegate.setDetectedBarcodeModuleSize(System.Single)">
Called after detecting barcode for testing purposes

</member>
        <member name="M:barcode.BarcodeRecognizerDelegate.detectedForm(std.vector&lt;cv.Point_&lt;System.Int32&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Size_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst,barcode.tagBarcodeDetectionStatus!System.Runtime.CompilerServices.IsConst)">
 Called when recognizer detects the payment form.
 Also returns the coordinates of the payment form and the
 size of the image on which the form is detected.

 Coordinates of the payment form are expected to be in order:
  - upper left point
  - upper right point
  - lower right point
  - lower left point

 Also, the detection status is provided

</member>
        <member name="M:barcode.BarcodeRecognizerDelegate.detectionStarted">
Called when the recognizer starts detection

</member>
        <member name="M:mv.Interpolation.bresenhamInterpolation(cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst,mv.PixelHandler*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Method generates points on a straight
 line between start point and end point using Bresenham's
 algorithm. Number of points is downscaled by a given factor

 @param startPoint
 @param endPoint
 @param scaleFactor
 @param interpolatedPoints

</member>
        <member name="M:mv.Interpolation.bresenhamInterpolation(cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst,mv.PixelHandler*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Method generates a given number of points on a straight
 line between start point and end point using Bresenham's
 algorithm.

 @param startPoint
 @param endPoint
 @param numPoints
 @param interpolatedPoints

</member>
        <member name="M:mv.Interpolation.bresenhamInterpolationStraight(cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,mv.PixelHandler*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Method generates points on a straight line between start point
 and end point using Bresenham's
 algorithm.

 This method deals with horizontal or vertical lines.

 @param startPoint
 @param endPoint
 @param interpolatedPoints

</member>
        <member name="M:mv.Interpolation.bresenhamInterpolation(cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,mv.PixelHandler*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Method generates points on a straight line between start point
 and end point using Bresenham's
 algorithm.

 @param startPoint
 @param endPoint
 @param interpolatedPoints

</member>
        <member name="M:mv.Interpolation.bresenhamInterpolationPerpendicular(cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Size_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,mv.PixelHandler*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.UInt32)">
 Method generates points on a straight line starting from startPoint in a direction
 perpendicular to direction defined with vector from firstOrientationPoint to
 secondOrientationPoint using Bresenham's interpolation. Algorithm generates
 given number of points or until it reaches image edge.

 @param startPoint
 @param firstOrientationPoint
 @param secondOrientationPoint
 @param imageSize
 @param maxNumOfPoints

</member>
        <member name="M:mv.Interpolation.bresenhamInterpolationSelectiveStraight(cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst,mv.PixelHandler*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Method generates a given number of points on a straight
 line between start point and end point using Bresenham's
 algorithm.

 This method deals with horizontal or vertical lines.

 The method visits all points as regular bresenham and uses
 no divisions and multiplications

 @param startPoint
 @param endPoint
 @param numPoints
 @param interpolatedPoints

</member>
        <member name="M:mv.Interpolation.bresenhamInterpolationSelective(cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst,mv.PixelHandler*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Method generates a given number of points on a straight
 line between start point and end point using Bresenham's
 algorithm.

 The method visits all points as regular bresenham and uses
 no divisions and multiplications

 @param startPoint
 @param endPoint
 @param numPoints
 @param interpolatedPoints

</member>
        <member name="M:mv.Interpolation.bresenhamInterpolationDownsampledStraight(cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst,mv.PixelHandler*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Method generates a given number of points on a straight
 line between start point and end point using Bresenham's
 algorithm.

 This method deals with horizontal or vertical lines.

 @param startPoint
 @param endPoint
 @param numPoints
 @param interpolatedPoints

</member>
        <member name="M:mv.Interpolation.bresenhamInterpolationDownsampled(cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst,mv.PixelHandler*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Method generates a given number of points on a straight
 line between start point and end point using Bresenham's
 algorithm.

 @param startPoint
 @param endPoint
 @param numPoints
 @param interpolatedPoints

</member>
        <member name="M:mv.Interpolation.Dispose">
Destructor

</member>
        <member name="M:mv.Interpolation.#ctor">
Private constructor to prevent instantiation

</member>
        <member name="T:mv.Interpolation">
Interpolation methods

</member>
        <member name="M:mv.LineSegment.divide(System.Double!System.Runtime.CompilerServices.IsConst)">
Division function. Required for calculating mean in K-means algorithm.
@param number
@return

</member>
        <member name="M:mv.LineSegment.add(Ref&lt;mv.Sample&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Addition function. Required for calculating mean in K-means algorithm.
@param other

</member>
        <member name="M:mv.LineSegment.clone">
make a clone of itself
@return

</member>
        <member name="M:mv.LineSegment.squaredDistanceToPointInt(cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Calculates squared distance to point in integer arithmetics

</member>
        <member name="M:mv.LineSegment.squaredDistanceToPoint(cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Calculates squared distance to point

</member>
        <member name="M:mv.LineSegment.distanceToLineSegment(mv.LineSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Distance function to other segment

</member>
        <member name="M:mv.LineSegment.distance(mv.Sample!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Distance function

</member>
        <member name="M:mv.LineSegment.log(System.Int32)">
Logs the line segment to stdout

</member>
        <member name="M:mv.LineSegment.drawLine(cv.Mat*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Scalar_&lt;System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Method draws the line on the image and sets the errorstatus flag

 @param image

</member>
        <member name="M:mv.LineSegment.invertDirection">
Inverts the direction of the line;

</member>
        <member name="M:mv.LineSegment.length">
Returns the length of the line segment

</member>
        <member name="M:mv.LineSegment.getPointAtLocation(System.Double)">
Returns the point at specified location on the line.
Param represents:
	0 - startPoint of the line
	1 - endPoint of the line

</member>
        <member name="M:mv.LineSegment.getEndPoint">
 Returns the end point of the segment

 @return

</member>
        <member name="M:mv.LineSegment.op_Assign(mv.LineSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Assignment operator

 @param other
 @return

</member>
        <member name="M:mv.LineSegment.#ctor(mv.LineSegment!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Copy constructor

 @param other

</member>
        <member name="M:mv.LineSegment.Dispose">
Virtual destructor

</member>
        <member name="M:mv.LineSegment.#ctor(cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Constructor which takes two points

</member>
        <member name="F:mv.LineSegment.endPoint_">
Line end point

</member>
        <member name="M:mv.Line.drawModel(cv.Mat*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;cv.Point_&lt;System.Int32&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;cv.Point_&lt;System.Int32&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Scalar_&lt;System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Draws the model with initialization values and inliers
 For debugging purposes

 @param image
 @param initValues
 @param inliers
 @param color

</member>
        <member name="M:mv.Line.calculateModelError(std.vector&lt;cv.Point_&lt;System.Int32&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Evaluation of model based on observed values

 @param model
 @param values
 @return error cost of the model calculated on given values

</member>
        <member name="M:mv.Line.distanceToValue(cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
RansacModel methods 
 Method returns the distance from a value to the model

 @param value
 @return

</member>
        <member name="M:mv.Line.log(System.Int32)">
Logs the line to stdout

</member>
        <member name="M:mv.Line.invertDirection">
Inverts the direction of the line

</member>
        <member name="M:mv.Line.getProjectedPoint(cv.Point_&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Method calculates projection of given point to line and returns it.

</member>
        <member name="M:mv.Line.getPerpendicularLineThroughPoint(cv.Point_&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Method calculates and returns the perpendicular line through given point

</member>
        <member name="M:mv.Line.getPerpendicularVector">
 Method calculates and returnes the vector perpendicular to line direction

 @return

</member>
        <member name="M:mv.Line.findIntersectionWithImage(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,mv.LineSegment*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Finds the intersection with image rectangle

 @param image
 @param status
 @return

</member>
        <member name="M:mv.Line.findIntersectionWithRect(cv.Rect_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,mv.LineSegment*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Method returns the line segment intersection of line and rectangle

 @param rect
 @param segment
 @param status
 @return

</member>
        <member name="M:mv.Line.drawLine(cv.Mat*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Scalar_&lt;System.Double&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Method draws the line on the image and sets the errorstatus flag

 @param image

</member>
        <member name="M:mv.Line.isPointCollinear(cv.Point_&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single!System.Runtime.CompilerServices.IsConst)">
 Checks if the point is collinear to line

 @param testPoint
 @param distanceThreshold
 @return

</member>
        <member name="M:mv.Line.isPointCollinear(cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst)">
 Checks if the point is collinear to line

 @param testPoint
 @param distanceThreshold
 @return

</member>
        <member name="M:mv.Line.getCosAngle(mv.Line!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Method calculates the cosine of the angle between this and other line
@return cosine of the angle

</member>
        <member name="M:mv.Line.squaredDistanceToPoint2f(cv.Point_&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Calculates squared distance to point

</member>
        <member name="M:mv.Line.squaredDistanceToPoint(cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Calculates squared distance to point

</member>
        <member name="M:mv.Line.distanceToPoint(cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Calculates the distance to point

</member>
        <member name="M:mv.Line.getDirection">
Direction getter
@return

</member>
        <member name="M:mv.Line.getStartPoint">
End Point getter

</member>
        <member name="M:mv.Line.Dispose">
Destructor

</member>
        <member name="M:mv.Line.op_Assign(mv.Line!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment operator

</member>
        <member name="M:mv.Line.#ctor(mv.Line!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor

</member>
        <member name="M:mv.Line.#ctor(std.vector&lt;cv.Point_&lt;System.Int32&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
 Constructor that fits the line to the points

 @param points
 @params strategy
 	- strategy used for line creating. Default is 0. Values mean:
 		: 0 - least squares method
 		: 1 - RANSAC method

</member>
        <member name="M:mv.Line.#ctor(cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,mv.Direction!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Constructor which takes point and direction

</member>
        <member name="M:mv.Line.#ctor(cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Constructor which takes two points

</member>
        <member name="F:mv.Line.direction_">
Direction vector

</member>
        <member name="F:mv.Line.startPoint_">
Start point of the line

</member>
        <member name="T:mv.Line">
Line object

</member>
        <member name="T:mv.Direction">
Class for efficient line direction representation

</member>
        <member name="M:mv.Geometry.computeRotationMatrix(System.Single!System.Runtime.CompilerServices.IsConst,cv.Mat*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Generates rotation matrix which remapping coordinates from original coordinate system
 (original image) to rotated system (image where text is in horizontal position).
 Rotation is performed around the image top left corner.

 @param angle - dominant direction of image elements on original image
 @param rotationMatrix - computed rotation matrix

</member>
        <member name="M:mv.Geometry.distance(cv.Point_&lt;System.Int32&gt;,cv.Point_&lt;System.Int32&gt;)">
Returns the distance between two points in double precision

</member>
        <member name="M:mv.Geometry.spreadCornerPoints(std.vector&lt;cv.Point_&lt;System.Int32&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,std.vector&lt;cv.Point_&lt;System.Int32&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
DEPRECATED METHODS STILL USED FOR BARCODE 
 Function adds the offset to detected points

 TODO:
 	Method has a flaw because it uses flawed findCornerCoordinates

</member>
        <member name="M:mv.Geometry.findStartPointForDirection(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Vec&lt;System.Single,0x2&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Point_&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Method finds start point for line with direction

 @deprecated
	Use class Line and it's methods

</member>
        <member name="M:mv.Geometry.findStartPoint(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Point_&lt;System.Int32&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Finds end points of the line on the image

 @deprecated
 	Use class Line and it's methods

</member>
        <member name="M:mv.Geometry.checkColinearity(cv.Vec&lt;System.Single,0x2&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Vec&lt;System.Single,0x2&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Vec&lt;System.Single,0x2&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @param startPoint
 @param pdirection
 @param point
 @return

 @deprecated
 	Use class Line and it's methods

</member>
        <member name="M:mv.Geometry.checkColinearity(cv.Vec&lt;System.Single,0x2&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Vec&lt;System.Single,0x2&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 @param startPoint
 @param pdirection
 @param point
 @return

 @deprecated
 	Use class Line and it's methods

</member>
        <member name="M:mv.Geometry.zoomImage(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Mat*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
Returns the zoomed image

</member>
        <member name="M:mv.Geometry.calculateCentroid(std.vector&lt;cv.Point_&lt;System.Int32&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Calculates the centroid of all points in the vector

</member>
        <member name="M:mv.Geometry.getBoundingBoxPoints(std.vector&lt;cv.Point_&lt;System.Int32&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Size_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;cv.Point_&lt;System.Int32&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)">
Method calculates rectangle that is a bounding box of given points
in image of size imageSize. Corner points of that bounding box is
returned via boundingBoxPoints parameter. Bounding box can be expanded
up to expand pixels in each direction.
@param points Source quadrangle (detected form points)
@param imageSize Size of image
@param boundingBoxPoints Returned bounding box quadrangle
@param expand How much should bounding box be expanded.

</member>
        <member name="M:mv.Geometry.crop(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;cv.Point_&lt;System.Int32&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Mat*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Simple crop of the part of the image surrounding the given points.
Resulting image is a bounding box arount the points

</member>
        <member name="M:mv.Geometry.saturatePoint(cv.Point_&lt;System.Int32&gt;,cv.Point_&lt;System.Int32&gt;,cv.Point_&lt;System.Int32&gt;)">
Saturates point and clamps its coordinates between minPoint and maxPoint

</member>
        <member name="M:mv.Geometry.isPointInside(cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Returns true if the point a is inside rectangle of size [0, 0], [size.x, size.y]

 @deprecated
 	Use class cv::Rect

</member>
        <member name="M:mv.Geometry.roundPoint(cv.Point_&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Rounds the point to integer values
@param pointf
@return

</member>
        <member name="M:mv.Geometry.Dispose">
Private destructor

</member>
        <member name="M:mv.Geometry.#ctor">
Private constructor to prevent instantiation

</member>
        <member name="T:mv.Geometry">
Static class with geometry related methods

</member>
        <member name="M:invSqrt(System.Single)">
method calculates 1/sqrt(x)
taken from: http://www.beyond3d.com/content/articles/8/

</member>
        <member name="M:mv.ImageIO.isSupportedFileType(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
Returns true if the file with a given filename is supported by the marker

</member>
        <member name="M:FileUtils.getPlatformPath(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
returns the platform specific path from given unix path
@param unixPath path string in unix form, e.g. c:/windows/system32
@return platform specific path, e.g. on windows: c:\\windows\\system32

</member>
        <member name="T:FileUtils">
 \file

 Ransac.hpp

  Created on: Jul 11, 2012
      Author: cerovec

 \file

 ImageIO.h

  Created on: Feb 11, 2012
      Author: cerovec

 \file

 FileUtils.hpp

  Created on: Oct 29, 2013
      Author: dodo

 Copyright (c)2013 Racuni.hr d.o.o. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.

</member>
        <member name="M:mv.Sample.log(System.Int32)">
Logging method, for convenience

</member>
        <member name="M:mv.Sample.divide(System.Double!System.Runtime.CompilerServices.IsConst)">
Division function. Required for calculating mean in K-means algorithm.
@param number
@return

</member>
        <member name="M:mv.Sample.add(Ref&lt;mv.Sample&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Addition function. Required for calculating mean in K-means algorithm.
@param other

</member>
        <member name="M:mv.Sample.clone">
make a clone of itself
@return

</member>
        <member name="M:mv.Sample.distance(mv.Sample!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Distance function

</member>
        <member name="M:mv.Sample.Dispose">
Destructor

</member>
        <member name="M:mv.Sample.#ctor">
Constructor

</member>
        <member name="T:mv.Sample">
Class representing a sample for clustering

</member>
        <member name="F:barcode.Pdf417PatternDetector.END_PATTERN_REVERSED">
Elements of the reversed pdf417 end pattern =&gt; 121113117 
</member>
        <member name="F:barcode.Pdf417PatternDetector.END_PATTERN">
Elements of the pdf417 end pattern =&gt; 711311121 
</member>
        <member name="F:barcode.Pdf417PatternDetector.END_PATTERN_SUM">
Sum of elements in the pdf417 end pattern = 18 
</member>
        <member name="F:barcode.Pdf417PatternDetector.END_PATTERN_LENGTH">
Number of elements in the pdf417 end pattern = 9 
</member>
        <member name="F:barcode.Pdf417PatternDetector.START_PATTERN_REVERSED">
Elements of the reversed pdf417 start pattern =&gt; 31111118 
</member>
        <member name="F:barcode.Pdf417PatternDetector.START_PATTERN">
Elements of the pdf417 start pattern =&gt; 81111113 
</member>
        <member name="F:barcode.Pdf417PatternDetector.START_PATTERN_SUM">
Sum of elements in the pdf417 start pattern = 17 
</member>
        <member name="F:barcode.Pdf417PatternDetector.START_PATTERN_LENGTH">
Number of elements in the pdf417 start pattern = 8 
</member>
        <member name="M:barcode.PatternDetector.detectOnScanLine(barcode.ScanLine!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,barcode.LineSegment*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,barcode.LineSegment*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.pair&lt;System.Single,barcode.DetectionMode&gt;!System.Runtime.CompilerServices.IsConst,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
Used to determine if given scanLine passes true barcode. First start and stop pattern are found if they exist,
and then border follow is used to found exact position of each barcode block.

</member>
        <member name="M:barcode.PatternDetector.findStartOrStopSequences(barcode.ScanLine!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.pair&lt;System.Single,System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.pair&lt;System.Single,System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tag">
Finds start and stop sequences from given vector with edges of the barcode line

</member>
        <member name="M:barcode.PatternDetector.calcPatternMatchVariance(barcode.ScanLine!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsConst,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Boolean,std.pair&lt;System.Single,System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.pair&lt;System.Single,System.Single&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Function determines if the current edge sequence correspondes to a given patterns.
Edge sequence must start with black bar.

</member>
        <member name="F:barcode.PatternDetector.MAX_AVERAGE_DIFFERENCE">
Maximum allowed average difference between patterns to consider them equal 
</member>
        <member name="F:barcode.PatternDetector.MAX_INDIVIDUAL_DIFFERENCE">
Maximum allowed difference between individual elements of two patterns
</member>
        <member name="M:mv.MultiplicativePixelConverter.grayScalePixelConverter">
Creates default BGR to grayscale pixel converter.
@return Reference to grayscale pixel converter.

</member>
        <member name="P:Microblink.UKDLRecognizerSettings.Enabled">
If recognizer is enabled or not 
</member>
        <member name="P:Microblink.USDLRecognizerSettings.Enabled">
If recognizer is enabled or not 
</member>
        <member name="P:Microblink.MRTDRecognizerSettings.Enabled">
            <summary>
Indicates the recognizer is enabled
</summary>
        </member>
        <member name="M:Microblink.MRTDRecognizerSettings.requiresLandscapeMode">
            <summary>
Does the recognizer require to be used in landscape orientation
</summary>
        </member>
        <member name="M:Microblink.MRTDRecognizerSettings.requiresAutofocus">
            <summary>
Does the recognizer require camera with autofocus feature
</summary>
        </member>
        <member name="M:Microblink.MRTDRecognizerSettings.requiresOCREngine">
            <summary>
Does the recognizer require on OCR engine
</summary>
        </member>
        <member name="M:Microblink.MRTDRecognizerSettings.requiresFrameQualityEstimation">
            <summary>
Does the recognizer require quality estimation
of video frames captured by camera.
</summary>
        </member>
        <member name="P:Microblink.MRTDRecognizerSettings.DetectMRZPosition">
            <summary>
Should Machine Readable Zone position detection should be used.
</summary>
        </member>
        <member name="T:Microblink.MRTDRecognizerSettings">
            <summary>
MRTD recognizer settings
</summary>
        </member>
        <member name="M:gpumv.RenderingContextManager.terminateContext">
@brief terminateContext terminates singleton instance of rendering context

</member>
        <member name="M:gpumv.RenderingContextManager.getContext(tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@brief getContext return the singleton instance of adequate rendering context
@param status status of the operation
@return singleton instance of adequate rendering context

</member>
        <member name="M:gpumv.IRenderingContext.getContextType">
@brief getContextType returns the type of rendering context (Direct3D or OpenGL)
@return the type of rendering context (Direct3D or OpenGL)

</member>
        <member name="M:gpumv.IRenderingContext.getRenderingSurface">
@brief getRenderingSurface returns rendering surface on which scene can be rendered
@return rendering surface on which scene can be rendered

</member>
        <member name="M:gpumv.IRenderingContext.isContextReady">
@brief isContextReady returns true if context is ready to be used for rendering
@return true if context is ready to be used for rendering

</member>
        <member name="F:RCT_OPENGL">
Specifies family of OpenGL/OpenGL ES contexts 
</member>
        <member name="F:RCT_DIRECT3D">
Specifies family of Direct3D contexts 
</member>
        <member name="T:gpumv.IRenderingContext.RenderingContextType">
@brief The RenderingContextType enum Defines possible rendering context types.

</member>
        <member name="M:ThreadPool.getNumberOfThreads">
Returns number of threads available in pool.
@return number of threads available in pool.

</member>
        <member name="T:Runnable">
 \file

 Runnable.hpp

  Created on: May 2, 2013
      Author: dodo

Represents anything that can be run. For use with multithreaded and
multi-process execution.

</member>
        <member name="F:protection.rights.Right.appliesTo_">
List of products this right applies to. If empty, then it applies to all products 
</member>
        <member name="F:protection.rights.Right.name_">
short string defining the name of the right. This name is also used inside keygen
     *  when parsing command line parameters.

</member>
        <member name="F:protection.rights.Right.description_">
long string describing what is this right for 
</member>
        <member name="F:protection.rights.Right.bit_">
bit in licence key that defines this right 
</member>
        <member name="M:protection.rights.Right.isValid">
Returns true if Right is valid (existing). 
</member>
        <member name="M:protection.AppProtection.getLicenseToken(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,products.Product,tagErrorStatus*!Sys">
Tries to unlock the application with given key for given owner.
@param key License key that is used for unlocking the application.
@param licensee Name of the licensee. The key is paired with its licensee.
@param product Product for which license must be OK.
@param status [out] Return parameter for checking whether any error occurred.
@return License token that contains information about license.

</member>
        <member name="M:protection.AppProtection.getLicenseToken(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,protection.IPackageResolver!System.Runtime.CompilerServices.IsConst*,products.Product,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Tries to unlock the application with given key for package name obtained via
given package resolver.
@param key License key that is used for unlocking the application.
@param pkgResolver   Interface to package resolver that will be used for resolving the package
                     name of the application. For example, on android the resolver will
                     return the package name of application context, on ios it will
                     return the name of the bundle and on windows phone it will return the application id.
@param product Product for which license must be OK.
@param status [out] Return parameter for checking whether any error occured.
@return License token that contains information about license.

</member>
        <member name="M:protection.AppProtection.getActiveTokens">
@brief getActiveTokens returns list of currently active license tokens.
If there are no active license tokens, function will return empty vector.
@return list of currently active license tokens.

</member>
        <member name="M:protection.AppProtection.getYek(System.Int32,System.Int32)">
 Generates random string of given length. The random generator is initialized with given seed.
 @param length Length of the string that will be generated.
 @param seed Seed to initialize random generator.
 @return The random string.

 @note This method is public because it is also used in PaymentDataModifier and other classes that need random strings.

</member>
        <member name="M:protection.AppProtection.registerToken(Ref&lt;protection.LicenseToken&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Registers the license token in the system so that it becomes available to use.
@param lt license token to be registered
@param activeTokensConstraint if set to true, up to MAX_ACTIVE_TOKENS license tokens can be active simultaneously.
                              In order to activate new token when all token slots are used, you have to invalidate
                              at least one valid token. If set to false, token will be always registered and will
                              replace currently registered token.
@param status Status of the operation.

</member>
        <member name="M:protection.IPackageResolver.getPackageName">
Provides package name for this application. On Android, this is app package name,
on iOS, this is bundle name, etc.
@return

</member>
        <member name="F:ResourceManager.observers_">
Collection of objects notified on resource changes.

</member>
        <member name="F:ResourceManager.resources_">
Table in which resources are stored.

</member>
        <member name="M:ResourceManager.notifyObservers(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Notify all registered observer that entry with resID key changed.

</member>
        <member name="M:ResourceManager.Dispose">
Destroys the resources table

</member>
        <member name="M:ResourceManager.#ctor">
Constructor. Creates empty resources table

</member>
        <member name="M:ResourceManager.clearAllEntries">
Method empties the resource map, but does not perform any deallocations.

</member>
        <member name="M:ResourceManager.getAllResources">
Retrieves all entries. Used in DetectorStudio to free allocated memory
for all resources. On Android side, memory is freed on Java side.
@return Reference to map with all resources.

</member>
        <member name="M:ResourceManager.unregisterObserver(ResourceManagerObserver*)">
Remove an observer from this resource manager.

</member>
        <member name="M:ResourceManager.registerObserver(ResourceManagerObserver*)">
Register an observer on this resource manager.

</member>
        <member name="M:ResourceManager.getResource(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Retrieves the entry with given key string. Available resources can be obtained
with static key strings given in this class.

@param resID key string under which the data is stored in the table

</member>
        <member name="M:ResourceManager.addEntry(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
     * Adds new entry in the table
     
     * @param resID - string key under which the entry is stored
     * @param resData - data of the entry
     * @param resDataLength - length of the entry in bytes

</member>
        <member name="M:ResourceManager.getInstance">
@brief getResourceManager returns the resource manager singleton instance
@return the resource manager singleton instance

</member>
        <member name="F:ResourceManager.KEY_ABBYY_EUROPEAN_PATTERNS">
List of keys under which the data entries are stored in the table 
</member>
        <member name="T:ResourceManager">
class responsible for managing in-memory resources

</member>
        <member name="M:ResourceEntry.#ctor(System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32)">
 Creates entry from pointer to data and its length

 @param resData - pointer to data
 @param resLength - length of the data in bytes

</member>
        <member name="M:ResourceEntry.#ctor">
Creates empty entry - data points nowhere (NULL), and the length is 0

</member>
        <member name="F:ResourceEntry.resLength">
Lenght of the data in bytes 
</member>
        <member name="F:ResourceEntry.resData">
Pointer to the data 
</member>
        <member name="T:ResourceEntry">
Entry in the resources table.
Consists of the pointer to the data and length of the data 

</member>
        <member name="T:ResourceManagerObserver">
 \file

 ResourceManager.hpp

  Created on: Dec 23, 2012
      Author: dodo

 Copyright (c)2012 Racuni.hr d.o.o. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.

</member>
        <member name="F:Microblink.ScreenOrientation.LandscapeLeft">
            <summary>
Screen orientation is in left landscape mode (home button is left of screen)
</summary>
        </member>
        <member name="F:Microblink.ScreenOrientation.PortraitUpside">
            <summary>
Screen orientation is in reverse portrait mode (home button is above screen)
</summary>
        </member>
        <member name="F:Microblink.ScreenOrientation.LandscapeRight">
            <summary>
Screen orientation is in right landscape mode (home button is right of screen)
</summary>
        </member>
        <member name="F:Microblink.ScreenOrientation.Portrait">
            <summary>
Screen orientation is in portrait mode (home button is below screen)
</summary>
        </member>
        <member name="M:photopay.PPLibInfo.#ctor">
This constructor will obtain draft information about library.
Draft information will only contain information about which recognizers
are built in library, but will not contain information such as maximum
texture size, GPU availability, etc.

</member>
        <member name="M:photopay.PPLibInfo.#ctor(Ref&lt;ocr.OcrManager&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
this constructor will obtain full information about library
it is expected that the library is fully initialized before
creating object with this constructor
@param ocrManager

</member>
        <member name="T:photopay.PPLibInfo">
Provides information about library: which OCR engine is used,
what recognizers are enabled, etc.

</member>
        <member name="M:getLibraryBuildVersion">
 \file

 RCLibraryInfo.hpp

  Created on: Jan, 2014
      Author: Ljudevit

 Copyright (c)2014 Racuni.hr d.o.o. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.

 \file

 PPLibInfo.hpp

  Created on: Dec 11, 2012
      Author: dodo

 Copyright (c)2012 Racuni.hr d.o.o. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.


  Created on: 18/03/2014
      Author: dodo

 Copyright (c)2014 Racuni.hr d.o.o. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.



  Created on: 18/03/2014
      Author: dodo

 Copyright (c)2014 Racuni.hr d.o.o. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.

</member>
        <member name="P:Microblink.RecognitionData.IsEmpty">
            <summary>
Indicates whether results are empty.
</summary>
        </member>
        <member name="P:Microblink.RecognitionData.IsValid">
            <summary>
Indicates whether the recognized results are valid.
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.CustomerNumber">
            <summary>
Key for accessing customer number result
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.BillNumber">
            <summary>
Key for accessing bill number result
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.BarcodeData">
            <summary>
Key for accessing generic barcode data
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.PDF417Result">
            <summary>
Key for accessing the pdf417 2D barcode result in USDL
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.Code128Result">
            <summary>
Key for accessing the code128 1D barcode result in USDL
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.Code39Result">
            <summary>
Key for accessing the code39 1D barcode result in USDL
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.LibInfo">
            <summary>
Key for accessing the library info for barcode readers
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.DisplayData">
            <summary>
Key for accessing the display data information in Austrian payslips
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.ContractAccount">
            <summary>
Key for accessing the contract account information in Austrian payslips
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.Belegnummer">
            <summary>
Key for accessing the document type information in Austrian payslips
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.Prufziffer">
            <summary>
Key for accessing the check digit of Austrian SEPA payslips
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.RawResult">
            <summary>
Key for accessing the raw result of OCR/barcode decode.
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.CustomerData">
            <summary>
Key for accessing Tax number element.
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.TaxNumber">
            <summary>
Key for accessing Tax number element.
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.PayBullURL">
            <summary>
Key for accessing PayBull URL element.
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.PurposeCode">
            <summary>
Key for accessing Purpose Code element.
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.PaymentDescriptionCode">
            <summary>
Key for accessing Payment Description code element.
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.DueDate">
            <summary>
Key for accessing Due date element.
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.PayerName">
            <summary>
Key for accessing Payer name element.
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.PayerID">
            <summary>
Key for accessing Payer ID element.
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.PayerReferenceModel">
            <summary>
Key for accessing Payer reference model element.
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.PayerReference">
            <summary>
Key for accessing Payer reference element.
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.PayerBankCode">
            <summary>
Key for accessing Payer bank code element.
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.PayerAccountNumber">
            <summary>
Key for accessing Payer Account number element.
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.PayerIBAN">
            <summary>
Key for accessing Payer IBAN element.
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.PaymentDescription">
            <summary>
Key for accessing PaymentDescription element.
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.SlipID">
            <summary>
Key for accessing SlipID element.
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.FormID">
            <summary>
Key for accessing Form ID element.
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.BankName">
            <summary>
Key for accessing Bank name element.
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.RecipientDetailedAddress">
            <summary>
Key for accessing Recipient detailed address element.
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.RecipientAddress">
            <summary>
Key for accessing Recipient address element.
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.RecipientName">
            <summary>
Key for accessing Recipient name element.
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.BankCode">
            <summary>
Key for accessing Bank code element.
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.ReferenceModel">
            <summary>
Key for accessing Reference model element.
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.Reference">
            <summary>
Key for accessing Reference element.
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.AccountNumber">
            <summary>
Key for accessing Account number element.
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.BIC">
            <summary>
Key for accessing BIC element.
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.IBAN">
            <summary>
Key for accessing IBAN element.
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.Currency">
            <summary>
Key for accessing Currency element.
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.Amount">
            <summary>
Key for accessing Amount element.
</summary>
        </member>
        <member name="P:Microblink.RecognitionDataKeys.RecognitionDataType">
            <summary>
Key for accessing Recognition data type element.
</summary>
        </member>
        <member name="F:photopay.CroBarPaymentData.croQRCode">
PaymentDataType Constant for QR Code

</member>
        <member name="F:photopay.CroBarPaymentData.croPdf417Barcode">
PaymentDataType Constant for Pdf417 Barcode

</member>
        <member name="F:photopay.CroBarPaymentData.hub3Barcode">
Slip ID constant for HUB3

</member>
        <member name="F:photopay.CroBarPaymentData.hub1Barcode">
Slip ID constant for HUB1

</member>
        <member name="M:photopay.CroBarPaymentData.addResult(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
 Adds payment data results from a given barcode string

 @param paymentDataType
 @param barcodeResult
 @param dataIsUncertain

</member>
        <member name="M:photopay.CroBarPaymentData.splitBarcodeResult(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Splits the barcode result into separate lines according to standards

 @param barcodeResult
 @return

</member>
        <member name="M:photopay.CroBarPaymentData.Dispose">
Destructor

</member>
        <member name="M:photopay.CroBarPaymentData.#ctor(System.Boolean,photopay.RecognitionDataType)">
Default constructor

</member>
        <member name="F:photopay.CroBarPaymentData.HUB3_OPTIONAL_DATA_ROW">
Optional data is places in the 14th row 
</member>
        <member name="F:photopay.CroBarPaymentData.HUB3_PAYMENT_DESCRIPTION_ROW">
Payment description is placed in the 13th row 
</member>
        <member name="F:photopay.CroBarPaymentData.HUB3_PURPOSE_CODE">
Purpose code is placed in the 12th row 
</member>
        <member name="F:photopay.CroBarPaymentData.HUB3_REFERENCE_NUMBER_ROW">
Reference number is placed in the 11th row 
</member>
        <member name="F:photopay.CroBarPaymentData.HUB3_REFERENCE_MODEL_ROW">
Reference model is placed in the 10th row 
</member>
        <member name="F:photopay.CroBarPaymentData.HUB3_IBAN_ACCOUNT_NUMBER_ROW">
Account number or IBAN is placed in the ninth 
</member>
        <member name="F:photopay.CroBarPaymentData.HUB3_RECEIVER_ADDRESS2">
Receiver address, 2st part is in the eight row 
</member>
        <member name="F:photopay.CroBarPaymentData.HUB3_RECEIVER_ADDRESS1">
Receiver address, 1st part is in the seventh row 
</member>
        <member name="F:photopay.CroBarPaymentData.HUB3_RECEIVER_NAME_ROW">
Receiver name is in the sixth row 
</member>
        <member name="F:photopay.CroBarPaymentData.HUB3_PAYER_NAME_ROW">
Payer name is in the third row 
</member>
        <member name="F:photopay.CroBarPaymentData.HUB3_AMOUNT_ROW">
Amount is placed in the second row 
</member>
        <member name="F:photopay.CroBarPaymentData.HUB1_DUE_DATE_ROW">
Due date is placed in the 17th row of the HUB1 pdf417 result 
</member>
        <member name="F:photopay.CroBarPaymentData.HUB1_PAYMENT_DESCRIPTION_ROW">
Payment description is placed in the 16th row of the HUB1 pdf417 result 
</member>
        <member name="F:photopay.CroBarPaymentData.HUB1_PAYMENT_DESCRIPTION_CODE_ROW">
Payment description code is placed in the 15th row of the HUB1 pdf417 result 
</member>
        <member name="F:photopay.CroBarPaymentData.HUB1_REFERENCE_NUMBER_ROW">
Reference number is placed in the 13th row of the HUB1 pdf417 result 
</member>
        <member name="F:photopay.CroBarPaymentData.HUB1_REFERENCE_MODEL_ROW">
Reference model is placed in the 12th row of the HUB1 pdf417 result 
</member>
        <member name="F:photopay.CroBarPaymentData.HUB1_ACCOUNT_NUMBER_ROW">
Account number is placed in the 11th row of the HUB1 pdf417 result 
</member>
        <member name="F:photopay.CroBarPaymentData.HUB1_RECEIVER_ADDRESS_ROW">
Receiver address is in the tenth row of the HUB1 pdf427 result 
</member>
        <member name="F:photopay.CroBarPaymentData.HUB1_RECEIVER_NAME_ROW">
Receiver name is in the ninth row of the HUB1 pdf427 result 
</member>
        <member name="F:photopay.CroBarPaymentData.HUB1_PAYER_NAME_ROW">
Payer name is in the fourth row of the HUB1 pdf417 result 
</member>
        <member name="F:photopay.CroBarPaymentData.HUB1_AMOUNT_ROW">
================ HUB1 ===============*
Amount is placed in the third row of the HUB1 pdf417 result 
</member>
        <member name="F:photopay.CroBarPaymentData.STANDARD_ROW">
Coding standard is placed in the first row. Standard can be HUB1 or HUB2.
</member>
        <member name="T:photopay.CroBarPaymentData">
Ecapsulates the decoding of croatian payment data from pdf417 barcode

</member>
        <member name="F:photopay.CroPaymentData.paymentDataTypeCroatianSlip">
String constant for payment data type "Croatian slip"

</member>
        <member name="F:photopay.CroPaymentData.referenceStatusInvalidChecksum">
Reference status declaring that reference has model, has checksums and
at least one checksum is not valid.

</member>
        <member name="F:photopay.CroPaymentData.referenceStatusNoChecksum">
Reference status declaring that reference has model, but model is not
protected by the checksums.

</member>
        <member name="F:photopay.CroPaymentData.referenceStatusModelUnknown">
Reference status declaring that reference has no model.

</member>
        <member name="F:photopay.CroPaymentData.referenceStatusValid">
Reference status declaring that reference has model, has checksums and
all checksums are valid.

</member>
        <member name="F:photopay.CroPaymentData.referenceStatusInvalid">
Reference status declaring that recognizer cannot conclude anything about
the reference.

</member>
        <member name="F:photopay.CroPaymentData.slipIdHub3Left">
Name of the slip id for HUB3 left 
</member>
        <member name="F:photopay.CroPaymentData.slipIdHub1Left">
Name of the slip id for HUB1 left 
</member>
        <member name="F:photopay.CroPaymentData.slipIdHub3Right">
Name of the slip id for HUB3 right 
</member>
        <member name="F:photopay.CroPaymentData.slipIdHub1Right">
Name of the slip id for HUB1 right 
</member>
        <member name="M:photopay.CroPaymentData.Dispose">
Destructor

</member>
        <member name="M:photopay.CroPaymentData.resetData">
Resets the data to default values

</member>
        <member name="M:photopay.CroPaymentData.op_Assign(photopay.CroPaymentData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assign

</member>
        <member name="M:photopay.CroPaymentData.#ctor(photopay.CroPaymentData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor

</member>
        <member name="M:photopay.CroPaymentData.#ctor(System.Boolean,System.Boolean,System.Boolean)">
Default constructor

</member>
        <member name="T:photopay.CroPaymentData">
Holds the result of recognition for croatian payments

</member>
        <member name="F:photopay.CroPaymentDataThresholds.slipIdConfidenceThreshold">
Threshold for slip id confidence level 
</member>
        <member name="F:photopay.CroPaymentDataThresholds.paymentDescriptionCodeConfidenceThreshold">
Threshold for payment description code confidence level 
</member>
        <member name="F:photopay.CroPaymentDataThresholds.payerNameConfidenceThreshold">
Threshold for payment description confidence level 
</member>
        <member name="F:photopay.CroPaymentDataThresholds.paymentDescriptionConfidenceThreshold">
Threshold for payment description confidence level 
</member>
        <member name="F:photopay.CroPaymentDataThresholds.referenceConfidenceLowerThreshold">
Threshold for reference confidence level 
</member>
        <member name="F:photopay.CroPaymentDataThresholds.accountNumberConfidenceLowerThreshold">
Threshold for account number confidence level 
</member>
        <member name="F:photopay.CroPaymentDataThresholds.amountConfidenceLowerThreshold">
Threshold for amount confidence level 
</member>
        <member name="F:photopay.CroPaymentDataThresholds.referenceConfidenceThreshold">
Threshold for reference confidence level 
</member>
        <member name="F:photopay.CroPaymentDataThresholds.accountNumberConfidenceThreshold">
Threshold for account number confidence level 
</member>
        <member name="F:photopay.CroPaymentDataThresholds.amountConfidenceThreshold">
Threshold for amount confidence level 
</member>
        <member name="M:Microblink.RecognizerDelegateBridge.isDrawBufferAvailable">
@return true if draw buffer is available, otherwise false

</member>
        <member name="M:Microblink.RecognizerDelegateBridge.isImageShowingAvailable">
@return true if calling showImage will do something

</member>
        <member name="M:Microblink.RecognizerDelegateBridge.setNewDrawBuffer(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Use this callback to create new draw buffer based on given
image. This is for cases when draw buffer is not standard
frame input.
@param original

</member>
        <member name="M:Microblink.RecognizerDelegateBridge.showDrawBuffer">
This is the callback which shows the image that was returned
via method getDrawBuffer.

</member>
        <member name="M:Microblink.RecognizerDelegateBridge.showImage(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
This is the callback which shows arbitrary image during recognition process

</member>
        <member name="M:Microblink.RecognizerDelegateBridge.reportFailedDetection">
Method should report back to UI if the whole chain failed
to detect anything.

</member>
        <member name="M:Microblink.RecognizerDelegateBridge.showDewarpedElement(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ocr.OcrResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
This is the callback with dewarped element image and ocr result on this
image. This method is called by recognizers that perform multiple dewarpings.
In release mode, this method should not do anything, and in debug mode
it should save or show given image.
@param dewarpedElement Image of the dewarped element.
@param ocrResult OCR result on given image.
@param elementName Name of the dewarped element.

</member>
        <member name="M:Microblink.RecognizerDelegateBridge.showDewarpedImage(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;cv.Rect_&lt;System.Int32&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
this is the callback with dewarped image
and dewarped element locations
In release mode, this method should not do anything, and in debug
mode it should for example save images and dewarped elements.
@param dewarpedImage Result of dewarping
@param dewarpedElementLocations Locations of dewarped elements.

</member>
        <member name="M:Microblink.RecognizerDelegateBridge.getDrawBuffer">
in debug mode, gets the draw buffer for scanner to draw
@return pointer to cv::Mat which contains draw buffer

</member>
        <member name="M:Microblink.RecognizerDelegateBridge.publishProgress(System.Int32)">
 Publishes progress of ocr engine

 @param progress progress in range [0, 1]

</member>
        <member name="M:Microblink.RecognizerDelegateBridge.recognitionShouldStop">
Returns true if the caller wants recognition to stop as soon as possible

</member>
        <member name="M:Microblink.RecognizerDelegateBridge.recognitionFinished(photopay.RecognitionData*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Recognizer finished recognition with result

</member>
        <member name="M:Microblink.RecognizerDelegateBridge.recognitionStarted">
Called when the recognizer starts recognition

</member>
        <member name="M:Microblink.RecognizerDelegateBridge.detectedForm(std.vector&lt;cv.Point_&lt;System.Int32&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Size_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst,photopay.tagDetectionStatus!System.Runtime.CompilerServices.IsConst)">
 Called when recognizer detects the payment form.
 Also returns the coordinates of the payment form and the
 size of the image on which the form is detected.

 Coordinates of the payment form are expected to be in order:
  - upper left point
  - upper right point
  - lower left point
  - lower right point

 Also, the detection status is provided

</member>
        <member name="M:Microblink.RecognizerDelegateBridge.detectionStarted">
Called when the recognizer starts detection

</member>
        <member name="M:Microblink.RecognizerDelegateBridge.Dispose">
Destructor

</member>
        <member name="M:Microblink.RecognizerDelegateBridge.#ctor(Microblink.WPRecognizerDelegate)">
 Constructor

 @param javaEnvironment
 @param jDelegateInstance

</member>
        <member name="M:Microblink.WPRecognizerDelegate.ShowImageDewarped(Microblink.RecognizerImage)">
            <summary>
Dewarped image used by the recognizer.
</summary>
        </member>
        <member name="M:Microblink.WPRecognizerDelegate.ShowImageSuccessfulScan(Microblink.RecognizerImage)">
            <summary>
Successfully scaned image by the recognizer.
</summary>
        </member>
        <member name="M:Microblink.WPRecognizerDelegate.ShowImageOriginal(Microblink.RecognizerImage)">
            <summary>
Original image used by the recognizer.
</summary>
        </member>
        <member name="M:Microblink.WPRecognizerDelegate.SetPaused(System.Boolean)">
            <summary>
Tells the delegate to return paused on next should stop callback.
</summary>
        </member>
        <member name="M:Microblink.WPRecognizerDelegate.ReportFailedDetection">
            <summary>
This method is called from library when all enabled recognizers reported
failed detection on image. This notification can be used for updating the UI.
NOTE:	This method will be called from the thread in which the recognition
		process is performed.
</summary>
        </member>
        <member name="M:Microblink.WPRecognizerDelegate.PublishProgress(System.Int32)">
            <summary>
This method is called from within OCR engine to inform user
about the current progress of the OCR process. The progress
is a integer percentage of the process (integer from interval
[0, 100]).

NOTE:	This progress is reported only from OCR engine, and presents
		the progress only of the OCR process, not the whole recognition
		process which consists of form detection, image enhancing, OCR
		and interpretation of OCR result.

NOTE 2:	In future this behavior might change to present a percentage of
		a whole recognition process.

NOTE 3:	This method will be called from the thread in which the recognition
		process is performed.
</summary>
            <param name="progress">Integer progress of OCR process.</param>
        </member>
        <member name="M:Microblink.WPRecognizerDelegate.ShouldRecognitionStop">
            <summary>
This method is called from within OCR engine and should return
a boolean indicating whether or not OCR process should be canceled.
This is useful in cases OCR process lasts for a longer time, but
user wants to cancel the process.
This method is called ONLY if OCR process is performed.

NOTE:	If you cancel the OCR process, you will get an empty result
		in onRecognitionFinished callback and as a result of method
		recognize in class ManagedPhotoPay.

NOTE 2:	This method will be called from the thread in which the recognition
		process is performed.
</summary>
            <returns>true if OCR process should be canceled, otherwise false</returns>
        </member>
        <member name="M:Microblink.WPRecognizerDelegate.OnRecognitionFinished(Microblink.IRecognitionResult)">
            <summary>
This method is called from library after form recognition ends. 
Recognition result is given via parameter result and can be null, 
invalid or empty. The same result is given as a result of method
recognize in class ManagedPhotoPay.
No matter if form detection has been successful or not, this
method will ALWAYS be called.

NOTE:	This method will be called from the thread in which the recognition
		process is performed.
</summary>
        </member>
        <member name="M:Microblink.WPRecognizerDelegate.OnRecognitionStarted">
            <summary>
This method is called from library before OCR and form recognition begins, but after the form
detection process has finished. No matter if form detection has been successful or not, this
method will ALWAYS be called.

NOTE:	This method will be called from the thread in which the recognition
		process is performed.
</summary>
        </member>
        <member name="M:Microblink.WPRecognizerDelegate.OnDetectedForm(Windows.Foundation.Collections.IVector`1{Windows.Foundation.Point},Microblink.DetectionStatus,System.Int32)">
            <summary>
This method is called from library when payment form detection
process finishes. Library sends list of corner points of detected
form, or empty list - that depends on what has been detected and
that information can be obtained from detectionStatus parameter.

DetectionStatus parameter gives information about detection - whether
detection has failed or has been successful. Furthermore, this parameter
can be used to get information if image is too blurry for OCR or if
it is too far away on image to perform a successful OCR.

Method should return a boolean that should inform library whether
or not it should continue to the OCR process. If this method returns false,
OCR will not be performed (this is useful for just performing payment form
detection test in different conditions without wasting time on OCR).
If this method returns true, library will continue with the OCR and recognition
process.

NOTE:	If form was not successfully detected, OCR will not be performed even if
		this method returns true. It just makes no sense to perform OCR on images
		on which payment slip is too far away on the scene or if image is blurry.

NOTE 2:	Even if OCR is not performed (either because this method returned false, or
		because form detection has not been successful, callback methods onRecognitionStarted
		and onRecognitionFinished WILL be called. The difference is just that onRecognitionFinished
		will contain empty result.

NOTE 3:	This method will be called from the thread in which the recognition
		process is performed.
</summary>
            <param name="points">List of corner points of detected form.</param>
            <param name="detectionStatus">Information about detection</param>
            <returns>True if you want to continue OCR and recognition process, otherwise false.</returns>
        </member>
        <member name="M:Microblink.WPRecognizerDelegate.OnDetectionStarted">
            <summary>
This method is called from library when payment form detection 
process starts. Method is called for each detection separately
i.e. if multiple recognizers are enabled, method will be called
for each recognizer until one recognizer successfully reads the form.

NOTE:	This method will be called from the thread in which the recognition
		process is performed.
</summary>
        </member>
        <member name="M:Microblink.RecognizerImage.GetImageStride">
            <summary>
Returns the row step of the contained image data.
</summary>
        </member>
        <member name="M:Microblink.RecognizerImage.GetImageHeight">
            <summary>
Returns the height of the contained image data.
</summary>
        </member>
        <member name="M:Microblink.RecognizerImage.GetImageWidth">
            <summary>
Returns the width of the contained image data.
</summary>
        </member>
        <member name="M:Microblink.RecognizerImage.GetImageChannels">
            <summary>
Returns the number of color channels contained in the image data.
</summary>
        </member>
        <member name="M:Microblink.RecognizerImage.GetImageData">
            <summary>
Returns the contained image data as an array. Note that this method is
expensive since the data needs to be copied from an internal buffer.
</summary>
        </member>
        <member name="T:Microblink.RecognizerImage">
            <summary>
Represents a container for recognizer images.
</summary>
        </member>
        <member name="T:Microblink.DetectionStatus">
            <summary>
This enum contains possible detection statuses that can be result
payment form detection.
</summary>
        </member>
        <member name="F:Microblink.DetectionStatus.CameraAtAngle">
            <summary>
Form detected, but camera is at too big angle
</summary>
        </member>
        <member name="F:Microblink.DetectionStatus.PartialForm">
            <summary>
Form is detected, but parts of the form are not in image
</summary>
        </member>
        <member name="F:Microblink.DetectionStatus.PDF417Success">
            <summary>
PDF417 barcode detected
</summary>
        </member>
        <member name="F:Microblink.DetectionStatus.FallbackSuccess">
            <summary>
Fallback detection was successful
</summary>
        </member>
        <member name="F:Microblink.DetectionStatus.QRSuccess">
            <summary>
QR code detected
</summary>
        </member>
        <member name="F:Microblink.DetectionStatus.CameraTooHigh">
            <summary>
Form detected, but the camera is too far above the payment form
</summary>
        </member>
        <member name="F:Microblink.DetectionStatus.Fail">
            <summary>
Indicates form detection has failed
</summary>
        </member>
        <member name="F:Microblink.DetectionStatus.Success">
            <summary>
Indicates payment form is successfully detected
</summary>
        </member>
        <member name="M:saveTextToFile(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Save text to IsolatedStorage of application.

</member>
        <member name="M:saveImageToFile(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Save cvMat to IsolatedStorage of application. Image is automatically prefixed with timestamp.

</member>
        <member name="M:createRecognitionResultList(std.vector&lt;Ref&lt;photopay.RecognitionData&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Create vector of result data.

</member>
        <member name="M:createRecognitionResult(photopay.RecognitionData*)">
**
**
Create appropriate result

</member>
        <member name="P:Microblink.IRecognizerSettings.Enabled">
            <summary>
Indicates the recognizer is enabled
</summary>
        </member>
        <member name="M:Microblink.IRecognizerSettings.requiresLandscapeMode">
            <summary>
Does the recognizer require to be used in landscape orientation
</summary>
        </member>
        <member name="M:Microblink.IRecognizerSettings.requiresAutofocus">
            <summary>
Does the recognizer require camera with autofocus feature
</summary>
        </member>
        <member name="M:Microblink.IRecognizerSettings.requiresOCREngine">
            <summary>
Does the recognizer require on OCR engine
</summary>
        </member>
        <member name="M:Microblink.IRecognizerSettings.requiresFrameQualityEstimation">
            <summary>
Does the recognizer require quality estimation
of video frames captured by camera.
</summary>
        </member>
        <member name="T:Microblink.IRecognizerSettings">
            <summary>
Base interface for all recognizer settings classes
</summary>
        </member>
        <member name="F:Microblink.RecognitionMode.DetectionTestMode">
            <summary>
will perform only detection and will profile the performance of slip
detection
</summary>
        </member>
        <member name="F:Microblink.RecognitionMode.RecognitionTestMode">
            <summary>
will perform indefinite scan and will profile the performance of scans
</summary>
        </member>
        <member name="F:Microblink.RecognitionMode.Normal">
            <summary>
indicates normal scanning operation
</summary>
        </member>
        <member name="F:photopay.PhotoPaySettings.zxingReaders_">
Other settings 
which ZXing readers are enabled

</member>
        <member name="F:photopay.PhotoPaySettings.photomathRecognizerSettings">
PhotoMath recognizer

</member>
        <member name="F:photopay.PhotoPaySettings.ocrRecognizerSettings">
Use segment scanner recognizer 

</member>
        <member name="F:photopay.PhotoPaySettings.recognizersStopOnFirstSuccess_">
Stop recognizers on first valid payment data

</member>
        <member name="F:photopay.PhotoPaySettings.useSanitization_">
Use data santization

</member>
        <member name="F:photopay.PhotoPaySettings.scanPaymentDescription_">
Fields 
Use scanning of payment description field

</member>
        <member name="F:photopay.PhotoPaySettings.scanOCRQuality_">
use OcrQuality estimator recognizer

</member>
        <member name="F:photopay.PhotoPaySettings.scanMRTD_">
Scan MRTD

</member>
        <member name="F:photopay.PhotoPaySettings.scanPhotoMath_">
use PhotoMath

</member>
        <member name="F:photopay.PhotoPaySettings.useZXing_">
use ZXing barcode readers

</member>
        <member name="F:photopay.PhotoPaySettings.scanUSDriverLicense_">
Scan US Driver's License

</member>
        <member name="F:photopay.PhotoPaySettings.scanInverse_">
Use for decoding barcode with inverse intensities
(white barcode on black surface)

</member>
        <member name="F:photopay.PhotoPaySettings.autoScaleDetection_">
Use to improve detection when image scale is not known.
It may unneccessarily slow down the detection and decoding
on images of known scale.

</member>
        <member name="F:photopay.PhotoPaySettings.allowNullQuietZone_">
Use to improve detection when barcode doesn't have quiet zone
(text concatenated with barcode)

</member>
        <member name="F:photopay.PhotoPaySettings.scanUncertain_">
Use uncertain scanning

</member>
        <member name="F:photopay.PhotoPaySettings.scanPdf417_">
use PDF417 barcode reader

</member>
        <member name="F:photopay.PhotoPaySettings.ocrLineStartPercentage_">
Percentage of image height where OCR line detection starts.

</member>
        <member name="F:photopay.PhotoPaySettings.scanSwissSlip_">
Scan Swiss paymentSlip

</member>
        <member name="F:photopay.PhotoPaySettings.scanKosSlip_">
Scan Kosovo payment slip

</member>
        <member name="F:photopay.PhotoPaySettings.scanKosCode128_">
Scan Kosovo code128 barcode

</member>
        <member name="F:photopay.PhotoPaySettings.scanUkBarcodes_">
Scan UK Barcodes

</member>
        <member name="F:photopay.PhotoPaySettings.scanUkGiroSlip_">
Scan UK Giro Credit payment slip

</member>
        <member name="F:photopay.PhotoPaySettings.scanNlSlip_">
Scan Dutch OCR line

</member>
        <member name="F:photopay.PhotoPaySettings.scanBeSlip_">
use Belgian slip

</member>
        <member name="F:photopay.PhotoPaySettings.ocrOnly_">
use OCROnly recognizer

</member>
        <member name="F:photopay.PhotoPaySettings.scanPhotoBull_">
use PhotoBull

</member>
        <member name="F:photopay.PhotoPaySettings.scanDeQRCode_">
Use German QR code

</member>
        <member name="F:photopay.PhotoPaySettings.scanDeSlip_">
use German slip

</member>
        <member name="F:photopay.PhotoPaySettings.scanAusQRCode_">
use Austrian QR code

</member>
        <member name="F:photopay.PhotoPaySettings.scanAusSlip_">
scan Austrian slip

</member>
        <member name="F:photopay.PhotoPaySettings.croSlipReadPaymentDescription_">
read payment description from Croatian slip

</member>
        <member name="F:photopay.PhotoPaySettings.croSlipReadPayerName_">
read payer name from Croatian slip

</member>
        <member name="F:photopay.PhotoPaySettings.scanCroSlip_">
scan Croatian slip

</member>
        <member name="F:photopay.PhotoPaySettings.scanCroQrCode_">
scan Croatian QR Code

</member>
        <member name="F:photopay.PhotoPaySettings.scanCroPdf417_">
scan Croatian Pdf417

</member>
        <member name="F:photopay.PhotoPaySettings.scanSloSlip_">
scan Slovenian slip

</member>
        <member name="F:photopay.PhotoPaySettings.scanHuSlip_">
Countries 
scan Hungarian slip

</member>
        <member name="M:photopay.PhotoPaySettings.toString">
Serializes the settings to string for easy logging 
</member>
        <member name="M:barcode.Readers.toString">
Serializes the settings to string for easy logging 
</member>
        <member name="F:protection.LicenseToken.licensee_">
Name of application for which rights apply to 
</member>
        <member name="F:protection.LicenseToken.pingInterval_">
ping interval in days. If set to 0, ping interval is disabled.
</member>
        <member name="F:protection.LicenseToken.validUntil_">
timestamp until license is valid. If set to 0, timestamp will not be checked.
</member>
        <member name="M:protection.LicenseToken.getNumberOfDaysSinceMicroblinkEpoch">
Returns the number of days since 1.1.2015.
@return the number of days since 1.1.2015.

</member>
        <member name="M:protection.LicenseToken.getPingInterval">
Returns the maximum allowed interval in days between two pings.
Should be used only if USE_PING right is set.
@return

</member>
        <member name="M:protection.LicenseToken.getRightsManager">
Returns the reference to the rights manager which can be used for querying
application rights.
@return reference to rights manager

</member>
        <member name="M:protection.LicenseToken.isTimeRestricted">
Returns true if licence has time restriction bit set.
@return true if licence has time restriction bit set.

</member>
        <member name="M:protection.LicenseToken.hasPing">
Returns true if licence has ping bit set.
@return true if licence has ping bit set.

</member>
        <member name="M:protection.LicenseToken.checkPing(System.Int64)">
Checks if the ping interval has passed since last time successful ping was sent.
Returns true if ping interval has not passed (i.e. it is OK to use the library).
Returns false if ping interval has passed (i.e. library cannot be used until next successful ping).
@param lastPingTimestamp unix timestamp of moment when last ping was done
@return true if ping interval has not passed, false otherwise

</member>
        <member name="M:protection.LicenseToken.invalidate">
Locks the token and invalidates the license.
Call this method when you want to lock your application. Any subsequent calls to
isValid() will return false and any subsequent call to getRightsManager will
return reference to rights manager that has no enabled rights.

</member>
        <member name="M:protection.LicenseToken.getValidVersionString">
@brief returns the string that contains maximum version number for which this license is valid
@return the string that contains maximum version number for which this license is valid

</member>
        <member name="M:protection.LicenseToken.getValidUntilString">
@brief returns the string that contains timestamp until license is valid
@return the string that contains timestamp until license is valid

</member>
        <member name="M:protection.LicenseToken.getJsonInfo(protection.RightsSerializator!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Constructs a JSON string with information about license.
@return License information summary in JSON.

</member>
        <member name="M:protection.LicenseToken.getInfo">
Constructs a string that contains information about license.
@return License information summary.

</member>
        <member name="M:protection.LicenseToken.isValid">
Checks whether application is unlocked by proper license key.
@return True if application is unlocked, otherwise false.

</member>
        <member name="T:protection.LicenseToken">
required for clearing rights 
</member>
        <member name="T:protection.AppProtection">
contains static member of rights manager which has to be initialized 
</member>
        <member name="T:protection.Keygen">
required for granting rights 

Keygen is a friend of this class so that it can access seeds.  
</member>
        <member name="T:protection.RightsManagerSerializator">
required for enabling serialization and deserialization 
</member>
        <member name="M:protection.RightsManager.clear">
Clears all rights from this rights manager and purges the owning package name.

</member>
        <member name="M:protection.RightsManager.op_Assign(protection.RightsManager*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
move assignment operator (also allowed only to friend classes)
@param other
@return

</member>
        <member name="M:protection.RightsManager.op_Assign(protection.RightsManager!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
assignment operator
assignment is allowed only to friend classes
@param other the rights manager to assign
@return reference to self for chaining the operators

</member>
        <member name="M:protection.RightsManager.#ctor(protection.RightsManager*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Same as with copy constructor, move constructor is also available only to friends.
@param other

</member>
        <member name="M:protection.RightsManager.#ctor(protection.RightsManager!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor is also private. Application parts can only use const reference
to this object obtained via AppProtection::getRightsManager
@param other

</member>
        <member name="M:protection.RightsManager.#ctor">
Constructor is private because only RightsManagerSerializator, Keygen and AppProtection
classes can construct this object.

</member>
        <member name="F:protection.RightsManager.rights_">
Set of rights enabled for this application 
</member>
        <member name="M:protection.RightsManager.getSummary">
Constructs a string that contains information about rights and owning package.
@return License information summary.

</member>
        <member name="M:protection.RightsManager.getRights">
Returns the set of rights for this application.
@return The set of rights

</member>
        <member name="M:protection.RightsManager.isRightEnabled(System.Int32)">
Checks if particular right is enabled in application
@param right The particular right to be checked
@return true if right is enabled

</member>
        <member name="M:protection.RightsManager.Dispose">
destructor

</member>
        <member name="T:protection.RightsManager">
Class responsible for managing application rights.

</member>
        <member name="F:photopay.MasterRecognizer.bestResults_">
Saves the the best found until some moment in time 
</member>
        <member name="F:photopay.MasterRecognizer.imCache_">
Object for cacheing of images 
</member>
        <member name="F:photopay.MasterRecognizer.paymentRecognizer_">
Object for recognition of payment data 
</member>
        <member name="F:photopay.MasterRecognizer.ocrManager_">
Instance of object responsible for ocr 
</member>
        <member name="F:photopay.MasterRecognizer.currentChain_">
Map: recognizer id, recognizer position in current chain 
</member>
        <member name="M:photopay.MasterRecognizer.updateRecognizers(Ref&lt;ocr.OcrManager&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;Ref&lt;photopay.RecognizerSettings&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
 Method updates the recognizer chain with given device Info, ocr Manager, and PhotoPaySettings object.

 This method enables reconfiguration of recognizer chain.

 New recognizers can be created in this method, unneded recognizers can be deleted, and used ones can be updated using
 their update method.

 @param deviceInfo
 @param ocrManager
 @param settings

</member>
        <member name="M:photopay.MasterRecognizer.setScreenOrientation(screenOrientation.ScreenOrientation)">
Sets the new screen orientation information to all recognizer objects
@param orientation orientation of the screen

</member>
        <member name="M:photopay.MasterRecognizer.resetRecognizers">
Resets the results of the recognizer objects

</member>
        <member name="M:photopay.MasterRecognizer.recognize(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean,System.Boolean,cv.Rect_&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,photopay.PaymentRecognizerDelegate*)">
 Performs recognition on the given image

 @param image             image that should be recognized
 @param isImageInFocus    is given image focused
 @param isDeviceMoving    is device moving
 @param isImageYUV        is image in YUV format
 @param isImagePhoto      is image a photography, and not a video frame
 @param cDelegate         delegate to communicate progress with UI
 @return                  first valid payment data

</member>
        <member name="M:photopay.MasterRecognizer.chainRecognize(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean,System.Boolean,cv.Rect_&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,photopay.PaymentRecognizerDelegate*)">
 Performs recognition on the given image

 @param image             image that should be recognized
 @param isImageInFocus    is given image focused
 @param isDeviceMoving    is device moving
 @param isImageYUV        is image in YUV format
 @param isImagePhoto      is image a photography, and not a video frame
 @param cDelegate         delegate to communicate progress with UI
 @param stopOnFirstSuccess true if recognition should stop when found first valid data
 @return                  recognition results

</member>
        <member name="M:photopay.MasterRecognizer.Dispose">
Designated destructor

</member>
        <member name="M:photopay.MasterRecognizer.#ctor(DeviceInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Ref&lt;ocr.OcrManager&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;Ref&lt;photopay.RecognizerSettings&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean!System.Runtime.CompilerServices.IsConst,Ref&lt;protection.LicenseToken&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">

 @param deviceInfo information about device
 @param ocrManager OCR manager object
 @param photoPayMode recognition, recognition_test or detection_test
 @param settings settings for initializing recognizers

</member>
        <member name="M:photopay.MasterRecognizer.#ctor(DeviceInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Ref&lt;ocr.OcrManager&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,photopay.PhotoPaySettings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Ref&lt;protection.LicenseToken&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
 Designated constructor

 @param deviceInfo information about device
 @param ocrManager OCR manager object
 @param photoPayMode recognition, recognition_test or detection_test
 @param settings settings for initializing recognizers

</member>
        <member name="M:photopay.MasterRecognizer.#ctor(DeviceInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Ref&lt;ocr.OcrManager&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,photopay.PhotoPaySettings!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
 Designated constructor

 @param deviceInfo information about device
 @param ocrManager OCR manager object
 @param photoPayMode recognition, recognition_test or detection_test
 @param settings settings for initializing recognizers

</member>
        <member name="M:photopay.RecognizerSettings.#ctor(System.Boolean,photopay.RecognizerType)">
Designated constructor 
</member>
        <member name="M:photopay.RecognizerSettings.setEnabled(System.Boolean!System.Runtime.CompilerServices.IsConst)">
Sets recognizer to enabled or not enabled 
</member>
        <member name="M:photopay.RecognizerSettings.isEnabled">
Returns is recognizer enabled or not 
</member>
        <member name="M:photopay.RecognizerSettings.Dispose">
Virtual destructor 
</member>
        <member name="F:RECOGNIZER_TYPE_GENERIC">
Generic recognizer type. 
</member>
        <member name="F:RECOGNIZER_TYPE_PAYBULL">
PayBull recognizer 
</member>
        <member name="F:RECOGNIZER_TYPE_OCR_QUALITY">
OCR quality estimation recognizer 
</member>
        <member name="F:RECOGNIZER_TYPE_OCR_ONLY">
OCR only recognizer 
</member>
        <member name="F:RECOGNIZER_TYPE_OCR">
Generic OCR recognizer 
</member>
        <member name="F:RECOGNIZER_TYPE_MRTD">
Machine readable travel document recognizer 
</member>
        <member name="F:RECOGNIZER_TYPE_MATH">
PhotoMath recognizer 
</member>
        <member name="F:RECOGNIZER_TYPE_NETHERLANDS_SLIP">
Dutch slip recognizer 
</member>
        <member name="F:RECOGNIZER_TYPE_KOSOVO_SLIP">
Kosovo slip recognizer 
</member>
        <member name="F:RECOGNIZER_TYPE_HUNGARY_SLIP">
Hungarian slip recognizer 
</member>
        <member name="F:RECOGNIZER_TYPE_GERMANY_SLIP">
German slip recognizer 
</member>
        <member name="F:RECOGNIZER_TYPE_UK_DRIVER_LICENSE">
UK Driver License recognizer 
</member>
        <member name="F:RECOGNIZER_TYPE_UK_SLIP">
UK slip recognizer 
</member>
        <member name="F:RECOGNIZER_TYPE_SWITZERLAND_SLIP">
Swiss slip recognizer 
</member>
        <member name="F:RECOGNIZER_TYPE_SLOVENIA_SLIP">
Slovenian slip recognizer 
</member>
        <member name="F:RECOGNIZER_TYPE_CROATIA_SLIP">
Croatian slip recognizer 
</member>
        <member name="F:RECOGNIZER_TYPE_BELGIUM_SLIP">
Belgian slip recognizer 
</member>
        <member name="F:RECOGNIZER_TYPE_AUSTRIA_SLIP">
Austrian slip recognizer 
</member>
        <member name="F:RECOGNIZER_TYPE_BARCODE">
Custom 1D barcode recognizer 
</member>
        <member name="F:RECOGNIZER_TYPE_ZXING">
ZXing recognizer 
</member>
        <member name="F:RECOGNIZER_TYPE_USDL">
US Drivers's Licence recognizer 
</member>
        <member name="F:RECOGNIZER_TYPE_UK_QR_CODE">
UK QR code recognizer 
</member>
        <member name="F:RECOGNIZER_TYPE_PDF417">
PDF417 recognizer 
</member>
        <member name="F:RECOGNIZER_TYPE_KOSOVO_CODE128">
Kosovo code128 barcode recognizer 
</member>
        <member name="F:RECOGNIZER_TYPE_GERMANY_QR_CODE">
German QR code recognizer 
</member>
        <member name="F:RECOGNIZER_TYPE_CROATIA_QR_CODE">
Croatian barcode data code recognizer 
</member>
        <member name="F:RECOGNIZER_TYPE_CROATIA_PDF417">
Croatian barcode data PDF417 recognizer 
</member>
        <member name="F:RECOGNIZER_TYPE_AUSTRIA_QR_CODE">
Austrian QR code recognizer 
</member>
        <member name="F:ocr.OcrManager.availableEngines_">
vector of all available engines 
</member>
        <member name="M:ocr.OcrManager.getAvailableEngines">
@return returns vector with all available engines. Entry that is NULL is unabailable.

</member>
        <member name="M:ocr.OcrManager.Dispose">
Virtual destructor

</member>
        <member name="M:ocr.OcrManager.#ctor(tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Constructor, creates a list of available OCR engines.

 In order for OCR engine to be available, the define statement for this
 OCR engine must be provided, and all required resources for given engine
 must be available.

 @param status [out parameter] contains result of initialization

</member>
        <member name="M:ocr.OcrEngine.processImageRegions(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;cv.Rect_&lt;System.Int32&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Ref&lt;ocr.OcrEngineOptions&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ocr.OcrEngineDelegate*,System.Boolean)">
Processes multiple image regions and creates mutiple ocr results

</member>
        <member name="M:ocr.OcrEngine.processImageRegion(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Rect_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Ref&lt;ocr.OcrEngineOptions&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ocr.OcrEngineDelegate*,System.Boolean)">
Processes the given image region and creats ocr layout

</member>
        <member name="M:ocr.OcrEngine.processImage(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Ref&lt;ocr.OcrEngineOptions&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ocr.OcrEngineDelegate*,System.Boolean)">
Processes the given image and creates ocr layout

</member>
        <member name="M:ocr.OcrEngine.Dispose">
Destructor

</member>
        <member name="M:ocr.OcrEngine.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Constructor

</member>
        <member name="T:ocr.OcrEngine">
Abstraction of ocr engines

</member>
        <member name="M:ocr.OcrResult.resultByAppendingTwoResults(ocr.OcrResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ocr.OcrResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Creates a new OCR result by appending two diferent results.
 Method just appends blocks of the second result to blocks of the first result.

  @param first  first result
  @param second second result

  @return result with appended two results

</member>
        <member name="M:ocr.OcrResult.verify">
 Method performs verification

 @return true if verifiable object has no errors, false otherwise

</member>
        <member name="M:ocr.OcrResult.setTransform(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Sets the transform property

  @param transform

</member>
        <member name="M:ocr.OcrResult.getTransform">
 Returns transform parameteres for tranforming OCR result to device UI

  @return transform

</member>
        <member name="M:ocr.OcrResult.isFlipped">
Returns true if the result is rotated by 180 degrees

</member>
        <member name="M:ocr.OcrResult.isEmpty">
Returns true if the result is empty

</member>
        <member name="M:ocr.OcrResult.getAvgQuality">
 Estimates quality of ocr block

 @return

</member>
        <member name="M:ocr.OcrResult.getSumQuality">
 Estimates quality of ocr block

 @return

</member>
        <member name="M:ocr.OcrResult.drawResult(cv.Mat*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
Method draws the ocrResult on a given image

</member>
        <member name="M:ocr.OcrResult.getBoundingBox">
Returns the bounding box arount the ocr result

</member>
        <member name="M:ocr.OcrResult.log(System.Int32,System.Boolean)">
Logs the result to std stream

</member>
        <member name="M:ocr.OcrResult.createIterator">
Returns the object which can iterate through the result

</member>
        <member name="M:ocr.OcrResult.toString">
Returns the result as string

</member>
        <member name="M:ocr.OcrResult.removeBlockAt(std._List_iterator&lt;std._List_val&lt;std._List_simple_types&lt;ocr.OcrBlock&gt;&gt;&gt;)">
Erases block at given iterator and returns the iterator that points
to the block that follows the removed one. If the removed block was
last in result, the returned iterator points to past last block in
the result (value that can be obtained with method @{link getResultEnd}).

</member>
        <member name="M:ocr.OcrResult.getResultEnd">
Returns the iterator that points to past last block in the result


Returns the iterator that points to past last block in the result

</member>
        <member name="M:ocr.OcrResult.getResultBeginning">
Returns the iterator that points to the first block in the result


Returns the const iterator that points to the first block in the result

</member>
        <member name="M:ocr.OcrResult.getCharCount">
 Returns number of chars in the result

 @return

</member>
        <member name="M:ocr.OcrResult.getBlockCount">
Returns the number of blocks in result

</member>
        <member name="M:ocr.OcrResult.Dispose">
Destructor

</member>
        <member name="M:ocr.OcrResult.op_Assign(ocr.OcrResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment operator

</member>
        <member name="M:ocr.OcrResult.#ctor(ocr.OcrResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor

</member>
        <member name="M:ocr.OcrResult.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Constructor which takes string

</member>
        <member name="M:ocr.OcrResult.#ctor(std.list&lt;ocr.OcrBlock&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ocr.Box,System.Boolean)">
Constructor which takes prebuild blocks

</member>
        <member name="F:ocr.OcrResult.transform_">
Transformation matrix for transforming OCR result coordinates into coordiantes on the 
device UI.

</member>
        <member name="F:ocr.OcrResult.boundingBox_">
Bounding box around ocr result

</member>
        <member name="F:ocr.OcrResult.blocks_">
Blocks in result

</member>
        <member name="T:ocr.OcrResult">
Encapsulates the OCR results

</member>
        <member name="M:ocr.OcrBlock.verify">
 Method performs verification

 @return true if verifiable object has no errors, false otherwise

</member>
        <member name="M:ocr.OcrBlock.getSumQuality">
 Estimates quality of ocr block

 @return

</member>
        <member name="M:ocr.OcrBlock.log(System.Int32,System.Boolean)">
Logs the result to std stream

</member>
        <member name="M:ocr.OcrBlock.removeLineAt(std._List_iterator&lt;std._List_val&lt;std._List_simple_types&lt;ocr.OcrLine&gt;&gt;&gt;)">
Removes the line at specific index and returns the iterator that
points to the line that follows the removed one. If the removed
line was the last in block, the returned iterator points to past
last line in block (the same value that can be obtained with
method @{link getBlockEnd}).

</member>
        <member name="M:ocr.OcrBlock.getBlockEnd">
Returns the iterator that points to past last line in block


Returns the iterator that points to past last line in block

</member>
        <member name="M:ocr.OcrBlock.getBlockBeginning">
Returns the iterator that points to first line in block


Returns the iterator that points to first line in block

</member>
        <member name="M:ocr.OcrBlock.getCharCount">
 Returns number of chars in the block

 @return

</member>
        <member name="M:ocr.OcrBlock.getLineCount">
Returns the character count in the line

</member>
        <member name="M:ocr.OcrBlock.Dispose">
Destructor

</member>
        <member name="M:ocr.OcrBlock.op_Assign(ocr.OcrBlock!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignmet operator

</member>
        <member name="M:ocr.OcrBlock.#ctor(ocr.OcrBlock!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor

</member>
        <member name="M:ocr.OcrBlock.#ctor(std.list&lt;ocr.OcrLine&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ocr.Box)">
Constructor

</member>
        <member name="F:ocr.OcrBlock.box_">
Bounding box of the block

</member>
        <member name="F:ocr.OcrBlock.lines_">
lines in block

</member>
        <member name="T:ocr.OcrBlock">
Represents the block of text in ocr result

</member>
        <member name="M:ocr.OcrLine.verify">
 Method performs verification

 @return true if verifiable object has no errors, false otherwise

</member>
        <member name="M:ocr.OcrLine.getSumQuality">
 Estimates quality of ocr line

 @return

</member>
        <member name="M:ocr.OcrLine.containsValue(System.UInt16!System.Runtime.CompilerServices.IsConst)">
 Returns true if line contains given value

 @return

</member>
        <member name="M:ocr.OcrLine.log(System.Int32,System.Boolean)">
Logs the result to std stream

</member>
        <member name="M:ocr.OcrLine.getAvgQuality">
 Method iterates through all chars and returns average char quality

 @return

</member>
        <member name="M:ocr.OcrLine.appendNewline">
Appends the newline character at the end of the line

</member>
        <member name="M:ocr.OcrLine.prependNewline">
Prepends the newline character at the front of the line

</member>
        <member name="M:ocr.OcrLine.lineWithTrimmedWhitespace">
 Creates the Ocr Line which has trimmed all whitespace from front and end of the line

 @return

</member>
        <member name="M:ocr.OcrLine.removeCharAt(std._List_iterator&lt;std._List_val&lt;std._List_simple_types&lt;ocr.OcrChar&gt;&gt;&gt;)">
Removes the char at specific iterator and returns an iterator
to the char after the removed one. If the removed character was
the last in line, the returned iterator points to past the end
of line (value that can be obtained with @{link getLineEnd}).

</member>
        <member name="M:ocr.OcrLine.getLineEnd">
Returns the iterator that points to past end of line


Returns the iterator that points to past end of line

</member>
        <member name="M:ocr.OcrLine.getLineBeginning">
Returns the iterator that points to first character in line


Returns the iterator that points to first character in line

</member>
        <member name="M:ocr.OcrLine.getCharCount">
Returns the character count in the line

</member>
        <member name="M:ocr.OcrLine.Dispose">
Destructor

</member>
        <member name="M:ocr.OcrLine.op_Assign(ocr.OcrLine!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignmet operator

</member>
        <member name="M:ocr.OcrLine.#ctor(ocr.OcrLine!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor

</member>
        <member name="M:ocr.OcrLine.#ctor(std.list&lt;ocr.OcrChar&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ocr.Box)">
Constructor

</member>
        <member name="F:ocr.OcrLine.box_">
Bounding box of the line

</member>
        <member name="F:ocr.OcrLine.chars_">
Chars in line

</member>
        <member name="T:ocr.OcrLine">
Represents the line in ocr result

</member>
        <member name="M:ocr.OcrChar.verify">
 Method performs verification

 @return true if verifiable object has no errors, false otherwise

</member>
        <member name="M:ocr.OcrChar.getEstimatedQuality">
 Estimates quality of the char

 @return

</member>
        <member name="M:ocr.OcrChar.log(System.Int32,System.Boolean)">
Logs the result to std stream

</member>
        <member name="M:ocr.OcrChar.setUncertain(System.Boolean)">
 Sets the uncertain valie

 @param uncertain

</member>
        <member name="M:ocr.OcrChar.isUncertain">
Returns true if character is uncertain

</member>
        <member name="M:ocr.OcrChar.isItalic">
Returns true if character is italic

</member>
        <member name="M:ocr.OcrChar.isBold">
Returns true if character is bold

</member>
        <member name="M:ocr.OcrChar.addQualityFactor(System.Single)">
 Sets the quality of ocr char

 @param quality

</member>
        <member name="M:ocr.OcrChar.getQualityFactor">
Returns the quality factor of the char

</member>
        <member name="M:ocr.OcrChar.setQuality(System.Int32)">
 Sets the quality of ocr char

 @param quality

</member>
        <member name="M:ocr.OcrChar.getQuality">
Returns the quality of the char in interval [0, 100];

</member>
        <member name="M:ocr.OcrChar.setBoundingBox(ocr.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Sets the new Box for the char

 @param newBox

</member>
        <member name="M:ocr.OcrChar.getBoundingBox">
Returns the bounding box around the character

</member>
        <member name="M:ocr.OcrChar.setFont(ocr.OcrFont!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Sets the new font of the character

</member>
        <member name="M:ocr.OcrChar.getFont">
Returns the font of the character

</member>
        <member name="M:ocr.OcrChar.setHeight(System.UInt16)">
Sets the new height of the character

</member>
        <member name="M:ocr.OcrChar.getHeight">
Returns the height of the character

</member>
        <member name="M:ocr.OcrChar.setValue(System.UInt16!System.Runtime.CompilerServices.IsConst)">
Sets the new value for this char

</member>
        <member name="M:ocr.OcrChar.getValue">
Returns the value of the character in UNICODE format

</member>
        <member name="M:ocr.OcrChar.Dispose">
Destructor

</member>
        <member name="M:ocr.OcrChar.getRecognitionVariants">
returns the list of recognition variants for current OcrChar 
</member>
        <member name="M:ocr.OcrChar.op_Assign(ocr.OcrChar!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment operator

</member>
        <member name="M:ocr.OcrChar.#ctor(ocr.OcrChar!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor

</member>
        <member name="M:ocr.OcrChar.#ctor(System.UInt16,System.UInt16,ocr.Box,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Single,ocr.OcrFont,std.list&lt;ocr.OcrChar&gt;!System.Runtime.CompilerServices.IsConst)">
Constructor

</member>
        <member name="F:ocr.OcrChar.variants_">
Recognition variants for current OCR char 
</member>
        <member name="F:ocr.OcrChar.font_">
Ocr font 
</member>
        <member name="F:ocr.OcrChar.qualityFactor_">
Factor which multiplies quality estimate

</member>
        <member name="F:ocr.OcrChar.isUncertain_">
Is character uncertain?

</member>
        <member name="F:ocr.OcrChar.isItalic_">
Is character italic?

</member>
        <member name="F:ocr.OcrChar.isBold_">
Is character bold?

</member>
        <member name="F:ocr.OcrChar.quality_">
Quality of the char

</member>
        <member name="F:ocr.OcrChar.box_">
Bounding box of the char

</member>
        <member name="F:ocr.OcrChar.height_">
Height of the char

</member>
        <member name="F:ocr.OcrChar.value_">
Return the value of char

</member>
        <member name="T:ocr.OcrChar">
Character representation

</member>
        <member name="M:Verifiable.verify">
 Method performs verification

 @return true if verifiable object has no errors, false otherwise

</member>
        <member name="M:Verifiable.Dispose">
Virtual destructor 
</member>
        <member name="M:Verifiable.#ctor">
 Constructor

 Private to prevent instantiation.

</member>
        <member name="T:Verifiable">
Interface for all classes which integrity can be verified at runtime

</member>
        <member name="M:isWordSeparator(System.Char)">
@param value UTF16 char
@return true if UTF16 char representation separates words

</member>
        <member name="M:isPunctuation(System.Char)">
@param value UTF16 char
@return true if UTF16 char representation separates words

</member>
        <member name="M:isWhitespace(System.Char)">
@param value UTF16 char
@return true if UTF16 char representation is whitespace

</member>
        <member name="M:isAlphaNumerical(System.Char)">
@param value UTF16 char
@return true if UTF16 char representation is letter or digit

</member>
        <member name="M:isDigit(System.Char)">
@param value UTF16 char
@return true if UTF16 char representation is digit

</member>
        <member name="M:isAlpha(System.Char)">
 \file

 OcrEngine.hpp

  Created on: Jun 12, 2012
      Author: cerovec

 \file

 OcrResult.h

  Created on: May 6, 2012
      Author: cerovec

 Copyright (c)2012 Racuni.hr d.o.o. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.

 \file

 OcrBlock.h

  Created on: May 6, 2012
      Author: cerovec

 Copyright (c)2012 Racuni.hr d.o.o. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.

 \file

 OcrLine.h

  Created on: May 6, 2012
      Author: cerovec

 Copyright (c)2012 Racuni.hr d.o.o. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.

 \file

 OcrChar.h

  Created on: May 6, 2012
      Author: cerovec

 Copyright (c)2012 Racuni.hr d.o.o. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.

 \file

 wchar.h

  Created on: Nov 28, 2012
      Author: dodo

 Copyright (c)2012 Racuni.hr d.o.o. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.

@param value UTF16 char
@return true if UTF16 char representation is letter


@param value UTF16 char
@return true if UTF16 char representation is letter


 \file

 PPLibInfo.hpp

  Created on: Dec 11, 2012
      Author: dodo

 Copyright (c)2012 Racuni.hr d.o.o. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.

 \file

 OcrEngine.hpp

  Created on: Jun 12, 2012
      Author: cerovec

 \file

 OcrResult.h

  Created on: May 6, 2012
      Author: cerovec

 Copyright (c)2012 Racuni.hr d.o.o. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.

 \file

 OcrBlock.h

  Created on: May 6, 2012
      Author: cerovec

 Copyright (c)2012 Racuni.hr d.o.o. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.

 \file

 OcrLine.h

  Created on: May 6, 2012
      Author: cerovec

 Copyright (c)2012 Racuni.hr d.o.o. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.

 \file

 OcrChar.h

  Created on: May 6, 2012
      Author: cerovec

 Copyright (c)2012 Racuni.hr d.o.o. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.

 \file

 wchar.h

  Created on: Nov 28, 2012
      Author: dodo

 Copyright (c)2012 Racuni.hr d.o.o. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.

@param value UTF16 char
@return true if UTF16 char representation is letter

</member>
        <member name="M:photopay.PaymentRecognizerDelegate.sortPoints(std.vector&lt;cv.Point_&lt;System.Single&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;cv.Point_&lt;System.Single&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Method sorts the given points in clockwise order starting from upperleft

</member>
        <member name="M:photopay.PaymentRecognizerDelegate.publishProgress(System.Int32)">
 Publishes progress of ocr engine

 @param progress progress in range [0, 100]

</member>
        <member name="M:photopay.PaymentRecognizerDelegate.willOcrImage(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Method which reports the image which will be OCR-ed

 @param image which will be sent to segmentation and classification in the OCR process

</member>
        <member name="M:photopay.PaymentRecognizerDelegate.recognitionShouldStop">
Returns true if the caller wants recognition to stop as soon as possible

</member>
        <member name="M:photopay.PaymentRecognizerDelegate.reportFailedDetection">
Method should report back to UI if the whole chain failed
to detect anything.

</member>
        <member name="M:photopay.PaymentRecognizerDelegate.resetFailedDetection">
Method resets the failed detection flag to true, i.e. it appears
as if detection was failed.

</member>
        <member name="M:photopay.PaymentRecognizerDelegate.Dispose">
Destructor

</member>
        <member name="M:photopay.PaymentRecognizerDelegate.#ctor">
Default constructor

</member>
        <member name="M:photopay.PaymentRecognizerDelegate.showLineDetectionResult(std.vector&lt;mv.LineSegment&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,cv.Size_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,mv.Quadrangle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,mv.Quadrangle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
this is the callback with the line detection results performed on
dewarped image
In release mode, this method should not do anything, and in debug
mode it should draw line segments on dewarped image.
@param result line detection result

</member>
        <member name="M:photopay.PaymentRecognizerDelegate.showOcrResult(ocr.OcrResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,cv.Size_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,mv.Quadrangle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,mv.Quadrangle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
The same as showOcrResults above, but includes more information about each specific ocr result

</member>
        <member name="M:photopay.PaymentRecognizerDelegate.showOcrResults(std.vector&lt;ocr.OcrResult&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
this is the callback with the ocr results performed on
dewarped image
In release mode, this method should not do anything, and in debug
mode it should for example mark recognized chars on dewarped image.
@param results vector of OCR results
@deprecated This method should not be used anymore (use showOcrResult instead)

</member>
        <member name="M:photopay.PaymentRecognizerDelegate.showDewarpedElement(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ocr.OcrResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
This is the callback with dewarped element image and ocr result on this
image. This method is called by recognizers that perform multiple dewarpings.
In release mode, this method should not do anything, and in debug mode
it should save or show given image.
@param dewarpedElement Image of the dewarped element.
@param ocrResult OCR result on given image.
@param elementName Name of the dewarped element.

</member>
        <member name="M:photopay.PaymentRecognizerDelegate.showDewarpedImage(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;cv.Rect_&lt;System.Int32&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
this is the callback with dewarped image
and dewarped element locations
In release mode, this method should not do anything, and in debug
mode it should for example save images and dewarped elements.
@param dewarpedImage Result of dewarping
@param dewarpedElementLocations Locations of dewarped elements.
@deprecated This method should not be used anymore (use showDewarpedElement instead)

</member>
        <member name="M:photopay.PaymentRecognizerDelegate.setNewDrawBuffer(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Use this callback to create new draw buffer based on given
image. This is for cases when draw buffer is not standard
frame input.
@param original

</member>
        <member name="M:photopay.PaymentRecognizerDelegate.showDrawBuffer">
This is the callback which shows the image that was returned
via method getDrawBuffer.

</member>
        <member name="M:photopay.PaymentRecognizerDelegate.showImageCache(mv.StaticImageCache*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,photopay.ShowImageType._ImageType!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
This is the callback that shows image cache
@param imCache

</member>
        <member name="M:photopay.PaymentRecognizerDelegate.showImage(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,photopay.ShowImageType._ImageType!System.Runtime.CompilerServices.IsConst,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
This is the callback which shows arbitrary image during recognition process.
Image type is passed so that callee can decide whether to save image or not.

</member>
        <member name="M:photopay.PaymentRecognizerDelegate.showImage(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
This is the callback which shows arbitrary image during recognition process

</member>
        <member name="M:photopay.PaymentRecognizerDelegate.getAffineTransformToScreen(cv.Size_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,mv.Quadrangle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,mv.Quadrangle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Transforms the dewarped location of the object to the location of the object on screen.

  @param imageSize        size of the video frame
  @param imageLocation    location of the object on image
  @param dewarpedLocation location of the object in dewarped coordinates.

  @return cv::Mat with affine transform from dewarped location to screen location

</member>
        <member name="M:photopay.PaymentRecognizerDelegate.isImageShowingAvailable">
@return true if calling showImage will do something

</member>
        <member name="M:photopay.PaymentRecognizerDelegate.getDrawBuffer">
in debug mode, gets the draw buffer for scanner to draw
@return pointer to cv::Mat which contains draw buffer

</member>
        <member name="M:photopay.PaymentRecognizerDelegate.isDrawBufferAvailable">
@return true if draw buffer is available, otherwise false

</member>
        <member name="M:photopay.PaymentRecognizerDelegate.recognitionFinished(photopay.RecognitionData*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Recognizer finished recognition with result

</member>
        <member name="M:photopay.PaymentRecognizerDelegate.recognitionStarted">
Called when the recognizer starts recognition

</member>
        <member name="M:photopay.PaymentRecognizerDelegate.detectedForm(std.vector&lt;cv.Point_&lt;System.Int32&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Size_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst,photopay.tagDetectionStatus!System.Runtime.CompilerServices.IsConst)">
 Called when recognizer detects the payment form.
 Also returns the coordinates of the payment form and the
 size of the image on which the form is detected.

 Coordinates of the payment form are expected to be in order:
  - upper left point
  - upper right point
  - lower left point
  - lower right point

 Also, the detection status is provided

</member>
        <member name="M:photopay.PaymentRecognizerDelegate.detectionStarted">
Called when the recognizer starts detection

</member>
        <member name="T:photopay.PaymentRecognizerDelegate">
Abstract delegate object which is responsible for recognition notifications
Appropriate callback functions are called on events:
	- recognizer started recognition
	- recognizer detected a payment form
	- recognizer finished with result

</member>
        <member name="T:photopay.ShowImageType">
Enumeration of image types which are in delegate

</member>
        <member name="F:photopay.PaymentRecognizer.stopOnFirstSuccess_">
True if this recognizer should stop on first success;

</member>
        <member name="F:photopay.PaymentRecognizer.successor_">
Next recognizer in chain 

</member>
        <member name="M:photopay.PaymentRecognizer.chainReturn(mv.StaticImageCache*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;Ref&lt;photopay.RecognitionData&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagErrorStatus,photopay.PaymentRecognizerDelegate*,Ref&lt;photopay.RecognitionData&gt;,System.Boolean)">
 @brief chainReturn
 A method for proper returning from Payment recognizers

 @return true if chain resulted with a successful recognition, false otherwise

</member>
        <member name="M:photopay.PaymentRecognizer.setScreenOrientation(screenOrientation.ScreenOrientation)">
Notifies the whole chain of new screen orientation
@param orientation orientation of the screen

</member>
        <member name="M:photopay.PaymentRecognizer.resetResults">
Resets the best results in the whole chain

</member>
        <member name="M:photopay.PaymentRecognizer.recognize(mv.StaticImageCache*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,photopay.PaymentRecognizerDelegate*)">
     * Method fills the recognition result object with
     * payment data recognized from given image

     * Returns first valid data, or the last data in chain.

</member>
        <member name="M:photopay.PaymentRecognizer.updateSettings(Ref&lt;photopay.RecognizerSettings&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@param settings

</member>
        <member name="M:photopay.PaymentRecognizer.recognize(mv.StaticImageCache*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;Ref&lt;photopay.RecognitionData&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,photopay.PaymentRecognizerDelegate*)">
     * Method fills the recognition result object with
     * payment data recognized from given image

     * Returns true if scanning was successful, false otherwise

</member>
        <member name="M:photopay.PaymentRecognizer.Dispose">
Destructor

</member>
        <member name="M:photopay.PaymentRecognizer.#ctor">
Constructor

</member>
        <member name="F:photopay.PaymentRecognizer.bestResult_">
Result with hightest confidence shared between recognitions

</member>
        <member name="T:photopay.PaymentRecognizer">
Abstract Payment Recognizer

</member>
        <member name="M:photopay.PaymentDetector.getRoi">
 Return the ROI

  @return region of interest

</member>
        <member name="M:photopay.PaymentDetector.setRoi(cv.Rect_&lt;System.Single&gt;)">
 Set the roi

  @param roi region of interest in which the MRTD is scanned

</member>
        <member name="M:photopay.PaymentDetector.setScreenOrientation(screenOrientation.ScreenOrientation)">
Defines the screen orientation of the device
@param orientation orientation of the screen

</member>
        <member name="M:photopay.PaymentDetector.resetState">
If any detector state exists (counting of failed detections) or similar,
this method resets it.

</member>
        <member name="M:photopay.PaymentDetector.getPixelConverters">
@return All pixel converters used in this detector.

</member>
        <member name="M:photopay.PaymentDetector.ocrBoxToCvRect(ocr.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convenience method for format conversions

</member>
        <member name="M:photopay.PaymentDetector.calcDewarpedElementsLocations(mv.Quadrangle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,std.vector&lt;cv.Rect_&lt;System.Int32&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Method calculates the dewarped coordinates of decoding elements

 @param dewarpedLocation
 @param resultCode
 @param dewarpedElementLocations

</member>
        <member name="M:photopay.PaymentDetector.calcDewarpedLocations(std.vector&lt;mv.Quadrangle&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,std.vector&lt;mv.Quadrangle&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Method calculates the dewarped coordinates of all dewarped areas
@param decodingLocations
@param resultCode
@param dewarpedLocations

</member>
        <member name="M:photopay.PaymentDetector.calcDewarpedLocation(mv.Quadrangle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,mv.Quadrangle*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Method calculates the dewarped coordinates of the dewarped area

 @param detectionLocation
 @param dewarpedLocation

</member>
        <member name="M:photopay.PaymentDetector.calcDecodingLocations(mv.Quadrangle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,std.vector&lt;mv.Quadrangle&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Method calculates all locations of the decoding areas on the image
@param detectionLocation
@param resultCode
@param decodingLocations

</member>
        <member name="M:photopay.PaymentDetector.calcDecodingLocation(mv.Quadrangle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,mv.Quadrangle*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Method calculates the location of the decoding area on the image

 @param detectionLocation
 @param resultCode
 @param decodingLocation

</member>
        <member name="M:photopay.PaymentDetector.calcDisplayLocation(mv.Quadrangle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,mv.Quadrangle*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Method calculates the location of the form which will be displayed

 @param detectionLocation
 @param displayLocation

</member>
        <member name="M:photopay.PaymentDetector.calcDetectionStatus(mv.Quadrangle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Size_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst)">
Method calculates the detection status for a given detection location
@param detectionLocation
@param resultCode
@return

</member>
        <member name="M:photopay.PaymentDetector.detectPaymentFormLocation(mv.StaticImageCache*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,mv.Quadrangle*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Mat*)">
 Method finds the payment form on the given image and returns the result code

 @param imageCache Image cache that will provide camera's frame
 @param detectionLocation Detection result will be saved in this variable.
 @param drawBuffer If not NULL, this buffer will be used for debugging of
        scanners.
 @return detection result code as defined in each specific detector

</member>
        <member name="M:photopay.PaymentDetector.Dispose">
Destructor

</member>
        <member name="M:photopay.PaymentDetector.#ctor">
Constructor

</member>
        <member name="F:photopay.PaymentDetector.RESULT_CODE_DETECTION_FAILED">
Indicates detector failed to find austrian form 
</member>
        <member name="T:photopay.PaymentDetector">
 Class responsible for detection of payment forms.
 Each recognizer has a companion detector for finding location of the payment form.

 This object is responsible for determining:
  - Location of payment form on the image
  - Detections status
  - Location of payment form which will be presented on the screen
  - Location of the area which will be decoded
  - Location of payment form in dewarped perspective
  - Locations of payment form elements which need decoding in dewarped perspective

</member>
        <member name="T:photopay.tagDetectionStatus">
Detection status enum

</member>
        <member name="F:SCREEN_ORIENTATION_COUNT">
Number of available screen orientations. This must be last enum entry 
</member>
        <member name="F:SCREEN_ORIENTATION_LANDSCAPE_LEFT">
Screen orientation is in left landscape mode (home button is left of screen) 
</member>
        <member name="F:SCREEN_ORIENTATION_PORTRAIT_UPSIDE">
Screen orientation is in reverse portrait mode (home button is above screen) 
</member>
        <member name="F:SCREEN_ORIENTATION_LANDSCAPE_RIGHT">
Screen orientation is in right landscape mode (home button is right of screen) 
</member>
        <member name="F:SCREEN_ORIENTATION_PORTRAIT">
Screen orientation is in portrait mode (home button is below screen) 
</member>
        <member name="M:mv.PixelConverter.hashValue">
Method calculates and returns the unique hash value of the converter
that can be used for comparison of different pixel converters.
@return

</member>
        <member name="M:mv.PixelConverter.isUsingContrastStrech">
Used by white balance analyzer to check if current pixelConverter
should also perform contrast stretch.
@return

</member>
        <member name="M:mv.PixelConverter.getPcType">
Method return the type of the converter.
@return

</member>
        <member name="M:mv.PixelConverter.getOriginalOffset(System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Method returns original offset (float version) of the converter
(not modified by the white balance analyzer).
@param offset

</member>
        <member name="M:mv.PixelConverter.getOriginalFloatFactors(System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Method returns original factors (float version) of the converter (those factors
are not modified by the white balance analyzer).
@param redFactor
@param greenFactor
@param blueFactor

</member>
        <member name="M:mv.PixelConverter.getOriginaOffset(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Method returns original offset of the converter
(not modified by the white balance analyzer).
@param offset

</member>
        <member name="M:mv.PixelConverter.getOriginalFactors(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Method returns original factors of the converter (those factors
are not modified by the white balance analyzer).
@param redFactor
@param greenFactor
@param blueFactor

</member>
        <member name="M:mv.PixelConverter.getFloatOffset(System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Method returns current offset (float version) of the converter
(might be changed by the white balance analyzer)
@param offset

</member>
        <member name="M:mv.PixelConverter.getFloatFactors(System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Method returns current factors (float version) of the converter (those factors
might be modified by the white balance analyzer).
@param redFactor
@param greenFactor
@param blueFactor

</member>
        <member name="M:mv.PixelConverter.getOffset(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Method returns current offset of the converter (might be changed
by the white balance analyzer).
@param offset

</member>
        <member name="M:mv.PixelConverter.getFactors(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Method returns current factors of the converter (those factors
might be modified by the white balance analyzer).
@param redFactor
@param greenFactor
@param blueFactor

</member>
        <member name="M:mv.PixelConverter.convertPixel(cv.Vec&lt;System.Byte,0x4&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Method converts color pixel to gray
@param pixel
@return

</member>
        <member name="M:mv.PixelConverter.convertPixel(cv.Vec&lt;System.Byte,0x3&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Method converts color pixel to gray
@param pixel
@return

</member>
        <member name="M:mv.PixelConverter.setNewFloatOffset(System.Int32!System.Runtime.CompilerServices.IsConst)">
Method sets new offset (float version) of the converter. This method is used
by white balance analyzers to update factors according to
white balance of the frame.
@param offset

</member>
        <member name="M:mv.PixelConverter.setNewFloatFactors(System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst)">
Method sets new factors (float version) of the converter. This method is used
by white balance analyzers to update factors according to
white balance of the frame.
@param rFact
@param gFact
@param bFact

</member>
        <member name="M:mv.PixelConverter.setNewOffset(System.Int32!System.Runtime.CompilerServices.IsConst)">
Method sets new offset of the converter. This method is used
by white balance analyzers to update factors according to
white balance of the frame.
@param offset

</member>
        <member name="M:mv.PixelConverter.setNewFactors(System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst,System.Int32!System.Runtime.CompilerServices.IsConst)">
Method sets new factors of the converter. This method is used
by white balance analyzers to update factors according to
white balance of the frame.
@param rFact
@param gFact
@param bFact

</member>
        <member name="M:mv.PixelConverter.makeCopy">
Method make an almost exact copy of current object.
'Almost exact' means that frame dependend data (such as
AWB modified factors) are not copied.
@return

</member>
        <member name="M:mv.PixelConverter.convertPixel(System.Int32,System.Int32,System.Int32)">
Method converts color pixel to gray
@param r
@param g
@param b
@return

</member>
        <member name="M:mv.GammaCorrection.sRGBgammaCompression(System.Int32)">
method compresses gamma value of given pixel intensity according to
sRGB gamma compression definition {@link http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale}
This is required for compressing RGB colorspace
@param val pixel intensity
@return compressed pixel intensity

</member>
        <member name="M:mv.GammaCorrection.sRGBgammaExpansion(System.Int32)">
method expands gamma value of given pixel intensity according to
sRGB gamma expansion definition {@link http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale}
This is required for linearizing RGB colorspace
@param val pixel intensity
@return expanded pixel intesity

</member>
        <member name="F:mv.StaticImageCache.cameraImageSize_">
Camera image size.

</member>
        <member name="M:mv.StaticImageCache.getBgrOrBgraImage_">
Retrieves the reference to BGR or BGRA image (whichever is available)
does not call analyze frame

</member>
        <member name="F:mv.StaticImageCache.arbitraryTransformedImages_">
Images converted with various pixel converters 
</member>
        <member name="F:mv.StaticImageCache.whiteBalanceAnalyzer_">
White point finder that will be used to determine white point in picture
in order to perform white balance correction.

</member>
        <member name="F:mv.StaticImageCache.visibleROI_">
Rectangle that defines the visible part of camera frame that should only be processed 
</member>
        <member name="F:mv.StaticImageCache.awbBgrImageUpdated_">
Flag indicating white balance adjusted BGR image is updated 
</member>
        <member name="F:mv.StaticImageCache.awbBgrImage_">
White balance adjusted BGR image 
</member>
        <member name="F:mv.StaticImageCache.invertedGrayscaleImageUpdated_">
Flag that indicates that the current inverted grayscale image is updated to the last frame 
</member>
        <member name="F:mv.StaticImageCache.grayscaleImageUpdated_">
Flag that indicates that the current grayscale image is updated to the last frame 
</member>
        <member name="F:mv.StaticImageCache.invertedGrayscaleImage_">
Classic grayscale image 
</member>
        <member name="F:mv.StaticImageCache.grayscaleImage_">
Classic grayscale image 
</member>
        <member name="F:mv.StaticImageCache.yuv420ImageUpdated_">
Flag that indicates that the current yuv420Image is updated to the last frame 
</member>
        <member name="F:mv.StaticImageCache.yuv420Image_">
Color image in YUV420 format 
</member>
        <member name="F:mv.StaticImageCache.bgrImageUpdated_">
Flag that indicates that the current bgrImage is updated to the last frame 
</member>
        <member name="F:mv.StaticImageCache.bgrImage_">
Color image in BGR order 
</member>
        <member name="F:mv.StaticImageCache.bgraImageUpdated_">
Flag that indicates that the current bgraImage is updated to the last frame 
</member>
        <member name="F:mv.StaticImageCache.bgraImage_">
Color image in BGRA order 
</member>
        <member name="M:mv.StaticImageCache.getCameraImageSize">
Returns camera image size.
@return camera image size

</member>
        <member name="M:mv.StaticImageCache.getWhiteBalanceAnalyzer">
Method retrieves white balance analyzer for this image cache object

</member>
        <member name="M:mv.StaticImageCache.isOriginalFrameYUV">
@return Returns true if the originally set frame was in YUV format.

</member>
        <member name="M:mv.StaticImageCache.isPhotoFrame">
Returns true if the frame is actually a photography and not a video frame

</member>
        <member name="M:mv.StaticImageCache.isFocused">
Returns true if the frame is focused

</member>
        <member name="M:mv.StaticImageCache.analyzeFrame">
Method analyzes frame and sets the static vars parameters
This is called every time the new frame is set so static vars are always updated

</member>
        <member name="M:mv.StaticImageCache.getAwbBgrImage(mv.RGBFactors!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Retrieves the reference to white balance adjusted BGR image

</member>
        <member name="M:mv.StaticImageCache.getInvertedGrayscaleImage(mv.RGBFactors!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Retrieves the reference to inverted grayscale image

</member>
        <member name="M:mv.StaticImageCache.getGrayscaleImage(mv.RGBFactors!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Retrieves the reference to grayscale image

</member>
        <member name="M:mv.StaticImageCache.getYUV420Image">
Retrieves the reference to android YUV420sp image

</member>
        <member name="M:mv.StaticImageCache.getBgrOrBgraImage">
Retrieves the reference to BGR or BGRA image (whichever is available)

</member>
        <member name="M:mv.StaticImageCache.getBgraImage">
Retrives the reference to BGRA image

</member>
        <member name="M:mv.StaticImageCache.getBgrImage">
Retrives the reference to BGR image

</member>
        <member name="M:mv.StaticImageCache.getFrameSize">
Returns the size of the frame

</member>
        <member name="M:mv.StaticImageCache.calculateRealRoi(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Rect_&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
Calculates the ROI from percentage ROI for given image.
@param origFrame
@param percRoi
@param isYuv
@return

</member>
        <member name="M:mv.StaticImageCache.setNewFrame(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
backward compatibility function 
</member>
        <member name="M:mv.StaticImageCache.setNewFrame(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean,cv.Rect_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Refresh the cache with new frame
@param frame actual frame
@param isFocused is frame focused
@param isYUV is frame in YUV format
@param isPhotoFrame is frame a photograph
@param visibleRoi visible area of the frame (calculated, in coordinates of image)
@param status status of the operation

</member>
        <member name="M:mv.StaticImageCache.setNewFrame(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,System.Boolean,cv.Rect_&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Refresh the cache with new frame
@param frame actual frame
@param isFocused is frame focused
@param isYUV is frame in YUV format
@param isPhotoFrame is frame a photograph
@param visibleRoi visible area of the frame (relative)
@param status status of the operation

</member>
        <member name="M:mv.StaticImageCache.Dispose">
Destructor

</member>
        <member name="M:mv.StaticImageCache.#ctor">
Constructor

</member>
        <member name="T:mv.StaticImageCache">
Cache for all used image types across the application

</member>
        <member name="M:mv.WhiteBalanceAnalyzer.transformFactors(mv.RGBFactors!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,mv.RGBFactors*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Method transforms given RGB factors in order to achieve white balance correction.

</member>
        <member name="M:mv.WhiteBalanceAnalyzer.updatePixelConverter(Ref&lt;mv.PixelConverter&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Method updates given pixel converter's factors according to given whitePoint parameter so
that given pixel converter will perform white balance correction.

</member>
        <member name="M:mv.WhiteBalanceAnalyzer.findWhitePoint(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte!System.Runtime.CompilerServices.IsConst,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Method searches for a white point in image bgrImage with search step searchStep.
The result is returned via parameter whitePoint and average gray value of traversed pixels
is returned in parameter avgGray.
NOTE: whitePoint doesn't have to be a whitest point in image. This is merely a parameter
that defines the white balance correction using implemented algorithm. For example,
in white patch algorithm, whitePoint will be the whitest point in image. On the other hand,
in grey world algorithm, whitePoint will be the average color in image.
The returned whitePoint parameter should then be given to methods updatePixelConverter
or transformFactors which will calculate the real white balance correction factors
based on whitePoint parameter.

</member>
        <member name="M:mv.Quadrangle.toRect">
Method returns an OpenCV rectangle from this quandrangle
Method loses some accuracy since quadrangle isn't neccesarily aligned to the axes.

</member>
        <member name="M:mv.Quadrangle.toVector">
 Method returns the vector of points the points to vector

 @param points

</member>
        <member name="M:mv.Quadrangle.toIntArray(System.Int32*)">
 Method pushes the points to int array in form (x_ul, y_ul, x_ur, y_ur, x_lr, y_lr, x_ll, y_ll).

 @param points

</member>
        <member name="M:mv.Quadrangle.toFloatArray(System.Single*)">
 Method pushes the points to float array in form (x_ul, y_ul, x_ur, y_ur, x_lr, y_lr, x_ll, y_ll).

 @param points

</member>
        <member name="M:mv.Quadrangle.toVector(std.vector&lt;cv.Point_&lt;System.Int32&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Method pushes the points to vector

 @param points

</member>
        <member name="M:mv.Quadrangle.getWarpedRectangle(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Method warps the perspective of the current quadrangle and creates a new warped quadrangle

 @param transformationMatrix
 @return

</member>
        <member name="M:mv.Quadrangle.getAffineTransform(mv.Quadrangle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Calculates the affine transform which transform this to other quadrangle

</member>
        <member name="M:mv.Quadrangle.getPerspectiveTransform(mv.Quadrangle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Calculates the perspective transform which transform this to other quadrangle

</member>
        <member name="M:mv.Quadrangle.draw(cv.Mat*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Scalar_&lt;System.Double&gt;)">
 Method draws the quadrangle on the given image

 @param image
 @param color

</member>
        <member name="M:mv.Quadrangle.getBoundingRectangle">
Method created a new rectangle which encloses this quadrangle.

</member>
        <member name="M:mv.Quadrangle.scaleBy(System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst)">
Meothd creates a new quadrangle which is a scaled version of this quadrangle.

</member>
        <member name="M:mv.Quadrangle.interpolateTo(mv.Quadrangle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double!System.Runtime.CompilerServices.IsConst)">
Method creates a new quadrangle which is an interpolation between this and given other quadrangle
Interpolation depends on the given interpolation factor
 If 1, resulting quadrangle will be equal to other quadrangle
 If 0 or smaller, resulting quandrangle will be equal to this quadrangle
 If other value, linear interpolation will be performed to obtain result

</member>
        <member name="M:mv.Quadrangle.getVerticalRectangle(System.Double!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst)">
 Calculates the rectangle that has the same left and right bounding lines,
 but upper and lower border positiones are given with relative positions to current rectangle

 @param upperPos
 @param lowerPos
 @return

</member>
        <member name="M:mv.Quadrangle.getHorizontalRectangle(System.Double!System.Runtime.CompilerServices.IsConst,System.Double!System.Runtime.CompilerServices.IsConst)">
 Calculates the rectangle that has the same upper and lower bounding lines,
 but left and right border positiones are given with relative positions to current rectangle

 @param leftPos
 @param rightPos
 @return

</member>
        <member name="M:mv.Quadrangle.getSpreadedRectangle(System.Double!System.Runtime.CompilerServices.IsConst)">
 Spreads the corner points of the rectangle by a certain percentage

 @param spreadRatio
 @return

</member>
        <member name="M:mv.Quadrangle.getSkewMeasure">
Returns the skew measure of the quadrangle on scale [0, 1].
If the quadrangle is skewed or warped, this measure will be close to 1.
If the quadrangle has 90 degrees angles, the measure will be 0

</member>
        <member name="M:mv.Quadrangle.getWidthToHeightRatio">
Returns the width to height aspect ratio
@return aspect ratio

</member>
        <member name="M:mv.Quadrangle.getWidth">
Returns the average width of the quadrangle
@return width

</member>
        <member name="M:mv.Quadrangle.getHeight">
Returns the average height of the quadrangle
@return height

</member>
        <member name="M:mv.Quadrangle.getArea">
Returns the area of the quadrangle
@return area

</member>
        <member name="M:mv.Quadrangle.getCenter">
Returns the center of the quadrangle
@return

</member>
        <member name="M:mv.Quadrangle.getUpperRight">
 Upper right getter

 @return

</member>
        <member name="M:mv.Quadrangle.getUpperLeft">
 Upper left getter

 @return

</member>
        <member name="M:mv.Quadrangle.getLowerRight">
 Lower right getter

 @return

</member>
        <member name="M:mv.Quadrangle.getLowerLeft">
 Lower left getter

 @return

</member>
        <member name="M:mv.Quadrangle.op_AdditionAssignment(cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Operator +=

</member>
        <member name="M:mv.Quadrangle.Dispose">
Destructor

</member>
        <member name="M:mv.Quadrangle.op_Assign(mv.Quadrangle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Assignment operator

 @param other
 @return

</member>
        <member name="M:mv.Quadrangle.#ctor(mv.Quadrangle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Copy constructor

 @param other

</member>
        <member name="M:mv.Quadrangle.#ctor(cv.Rect_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Constructor for OpenCV rectangle

</member>
        <member name="M:mv.Quadrangle.#ctor(std.vector&lt;cv.Point_&lt;System.Int32&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Constructor for vector

</member>
        <member name="M:mv.Quadrangle.#ctor(cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv.Point_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Constructor

</member>
        <member name="T:mv.Quadrangle">
Quadrangle class

</member>
        <member name="M:ocr.OcrEngineDelegate.publishProgress(System.Int32)">
 Publishes progress of ocr engine

 @param progress progress in range [0, 100]

</member>
        <member name="M:ocr.OcrEngineDelegate.willOcrImage(cv.Mat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Method which reports the image which will be OCR-ed

 @param image which will be sent to segmentation and classification in the OCR process

</member>
        <member name="M:ocr.OcrEngineDelegate.recognitionShouldStop">
 Method which determines if ocr process should stop

 @return true if ocr engine should stop, false otherwise

</member>
        <member name="M:ocr.OcrEngineDelegate.Dispose">
Destructor

</member>
        <member name="M:ocr.OcrEngineDelegate.#ctor">
Constructor

</member>
        <member name="T:ocr.OcrEngineDelegate">
Delegate object through which the information about OCR process is returned to caller

</member>
        <member name="F:DeviceInfo.data_">
other data about device 
</member>
        <member name="F:DeviceInfo.maxCPUFrequency_">
Maximum CPU frequency in MHz of processor 0 
</member>
        <member name="F:DeviceInfo.numberOfProcessors_">
How many processors does the device have? 
</member>
        <member name="F:DeviceInfo.isHQ_">
Is device of high quality? 
</member>
        <member name="F:DeviceInfo.manufacturer_">
Device manufacturer 
</member>
        <member name="F:DeviceInfo.model_">
Device model 
</member>
        <member name="F:DeviceInfo.deviceName_">
Device name 
</member>
        <member name="F:DeviceInfo.osVersion_">
OS version 
</member>
        <member name="F:DeviceInfo.operatingSystem_">
OS name 
</member>
        <member name="F:DeviceInfo.OS_ANDROID">
Available operating systems 
</member>
        <member name="F:DeviceInfo.DEVICE_DEFAULT">
Available devices 
</member>
        <member name="M:DeviceInfo.getDeviceSpeedLevel">
 Returns the speed level of the device

 0 - extra slow device
 6 - very fast device with at least 1100MHz processor or multicore.
 10 - extra fast device

 Other values are determined by number of processors and processor speed.

</member>
        <member name="M:DeviceInfo.setMaxCPUFrequency(System.Int32)">
Sets the maximum frequency in MHz of processor 0.
@param maxFreq maximum frequency of processor 0.

</member>
        <member name="M:DeviceInfo.getMaxCPUFrequency">
Returns the maximum CPU frequency in MHz of processor 0.
@return

</member>
        <member name="M:DeviceInfo.setNumberOfProcessors(System.Int32)">
Sets the number of available processors on device.
@param procNum number of processors available at the moment

</member>
        <member name="M:DeviceInfo.getNumberOfProcessors">
Returns the number of available processors on device.
Not all processors have to be active at the moment.
@return

</member>
        <member name="M:DeviceInfo.isMobileDevice">
Method returns true for mobile devices. For now these are only Android and iOS

</member>
        <member name="M:DeviceInfo.setHQ(System.Boolean)">
Method sets whether device is of high quality.
@param hq True if device is HQ, otherwise false.

</member>
        <member name="M:DeviceInfo.isHQDevice">
Method returns true if device is of high quality.
@return True if device is HQ, false otherwise.

</member>
        <member name="M:DeviceInfo.setManufacturer(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Method set the device manufacturer.
@param manufacturer Device manufacturer.

</member>
        <member name="M:DeviceInfo.getManufacturer">
 Method returns the device manufacturer

 @return Device manufacturer

</member>
        <member name="M:DeviceInfo.setModel(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Method set the device model.
@param model Device model.

</member>
        <member name="M:DeviceInfo.getModel">
 Method returns the device model

 @return Device model

</member>
        <member name="M:DeviceInfo.setDeviceName(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Method sets the name of the device.
@param deviceName Device name

</member>
        <member name="M:DeviceInfo.getDeviceName">
 Method returns the name of the device

 @return Device name

</member>
        <member name="M:DeviceInfo.setOsVersion(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Method sets the OS version of the device.
@param osVer OS version

</member>
        <member name="M:DeviceInfo.getOsVersion">
 Method returns the OS version of the device

 @return OS version

</member>
        <member name="M:DeviceInfo.setOperatingSystem(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Method sets the OS name of the device.
@param os OS name

</member>
        <member name="M:DeviceInfo.getOperatingSystem">
 Method returns the OS name of the device

 @return OS name

</member>
        <member name="M:DeviceInfo.Dispose">
Virtual destructor

</member>
        <member name="M:DeviceInfo.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerService">
 Constructor

 @param operatingSystem Device's operating system (eg. Android)
 @param osVersion Device's operating system version (eg. 4.1)
 @param manufacturer Manufacturer of the device (eg. Samsung)
 @param model Device model
 @param deviceName Device name
 @param isHQ whether or not device has high quality camera (at least HD)
 @param numOfProcessors Number of processors on the device
 @param maxCPUFrequency Maximum CPU frequency in MHz of processor 0

</member>
        <member name="M:DeviceInfo.initializeSharedInstance(DeviceInfo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Initialize shared instance with values of given device info.
@param deviceInfo Device information that needs to become shared.

</member>
        <member name="M:DeviceInfo.getSharedInstance">
Returns the shared instance of device info
@return Pointer to device info structure

</member>
        <member name="T:DeviceInfo">
Device information holder

</member>
        <member name="M:StringMap.getHashMap">
Returns the native STL hash map that is contained as member. Useful for efficient iteration over keys.
@return the native STL hash map that is contained as member. Useful for efficient iteration over keys.

</member>
        <member name="M:StringMap.readFromJson(rapidjson.GenericValue&lt;rapidjson.UTF8&lt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Reads the hashmap from JSON.
@param jsonObj
@param status

</member>
        <member name="M:StringMap.writeToJson(rapidjson.Writer&lt;rapidjson.GenericStringBuffer&lt;rapidjson.UTF8&lt;&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Writes the hashmap to JSON.
@param writer
@param status

</member>
        <member name="M:StringMap.log(System.Int32)">
Logs the hashmap to log.
@param loglevel

</member>
        <member name="M:StringMap.keyExists(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Return whether or not given key exists in map.
@param key Name of the key.
@return true if key exists, otherwise false

</member>
        <member name="M:StringMap.getValueForKey(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Gets the value for given key. If no value is set for given key, returns empty string.
@param key Name of the key
@return Value for the key or "" if nothing is set for key.

</member>
        <member name="M:StringMap.setValueForKey(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Sets the given value to given key.
@param key Name of the key
@param value Value for the key

</member>
        <member name="T:StringMap">
 \file

 StringMap.hpp

  Created on: Sep 29, 2013
      Author: dodo

 Copyright (c)2013 Racuni.hr d.o.o. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.

</member>
        <member name="T:Counted">
 \file

 DeviceInfo.hpp

  Created on: Oct 31, 2012
      Author: dodo

 Copyright (c)2012 Racuni.hr d.o.o. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.



  Created on: May 2015
      Author: zivac

 Copyright (c)2015 Microblink Ltd. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.


  Created on: May 2015
      Author: zivac

 Copyright (c)2015 Microblink Ltd. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.


  Created on: May 2015
      Author: zivac

 Copyright (c)2015 Microblink Ltd. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.



  Created on: May 2015
      Author: zivac

 Copyright (c)2015 Microblink Ltd. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.


  Created on: May 2015
      Author: zivac

 Copyright (c)2015 Microblink Ltd. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.


  Created on: May 2015
      Author: zivac

 Copyright (c)2015 Microblink Ltd. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.


 \file

 BarcodeDetailedData.hpp

  Created on: Aug 21, 2013
      Author: dodo

 Copyright (c)2013 Racuni.hr d.o.o. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.



  Created on: June 2015
      Author: zivac

 Copyright (c)2015 Microblink Ltd. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.


  Created on: June 2015
      Author: zivac

 Copyright (c)2015 Microblink Ltd. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.


  Created on: May 2015
      Author: zivac

 Copyright (c)2015 Microblink Ltd. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.


 \file

 PaymentRecognizerDelegateBridge.hpp

  Created on: Jan, 2014
      Author: Ljudevit

 Copyright (c)2014 Racuni.hr d.o.o. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.

 \file

 PaymentRecognizer.h

  Created on: Feb 13, 2012
      Author: cerovec



  Created on: May 2015
      Author: zivac

 Copyright (c)2015 Microblink Ltd. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.


  Created on: May 2015
      Author: zivac

 Copyright (c)2015 Microblink Ltd. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.


  Created on: May 2015
      Author: zivac

 Copyright (c)2015 Microblink Ltd. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.

</member>
        <member name="P:Microblink.MRTDRecognitionResult.Elements">
            <summary>
String -&gt; Object map of result elements. 
</summary>
            <remarks> Result data can
be retrieved from this map instead of using the specific
properties in IRecognitionResult implementing classes.
In the instances when specific property is not implemented
the only way of retrieving the data is via this map.
</remarks>
        </member>
        <member name="P:Microblink.MRTDRecognitionResult.Empty">
            <summary>
Indicates if the result is empty
</summary>
        </member>
        <member name="P:Microblink.MRTDRecognitionResult.Valid">
            <summary>
Indicates if the result is valid
</summary>
        </member>
        <member name="P:Microblink.MRTDRecognitionResult.MRZText">
            <summary>
Entire Machine Readable Zone text from MRTD
</summary>
        </member>
        <member name="P:Microblink.MRTDRecognitionResult.Optional2">
            <summary>
Machine readable zone Second Optional Data field
</summary>
        </member>
        <member name="P:Microblink.MRTDRecognitionResult.Optional1">
            <summary>
Machine readable zone First Optional Data field
</summary>
        </member>
        <member name="P:Microblink.MRTDRecognitionResult.DateOfExpiry">
            <summary>
Machine readable zone document Date of Expiry field
</summary>
            <remarks>
Date is in <code>YYMMDD</code> format
</remarks>
        </member>
        <member name="P:Microblink.MRTDRecognitionResult.DocumentCode">
            <summary>
Machine readable zone Document Code field
</summary>
            <remarks>
Document code contains two characters. For MRTD the first character shall
be A, C or I.The second character shall be discretion of the issuing State or organization except
that V shall not be used, and `C` shall not be used after `A` except in the crew member certificate.
On machine - readable passports(MRP) first character shall be `P` to designate an MRP.One additional
letter may be used, at the discretion of the issuing State or organization, to designate a particular
MRP.If the second character position is not used for this purpose, it shall be filled by the filter
character <code>&lt;</code>.
</remarks>
        </member>
        <member name="P:Microblink.MRTDRecognitionResult.Sex">
            <summary>
Machine readable zone holder's Sex field
</summary>
            <remarks>
Sex is specified by use of the single initial, capital letter F for female,
M for male or <code>&lt;</code> for unspecified.
</remarks>
        </member>
        <member name="P:Microblink.MRTDRecognitionResult.Nationality">
            <summary>
Machine readable zone holder's Nationality field
</summary>
            <remarks>
Three-letter or two-letter code which indicate the issuing State. Three-letter codes are based
on Aplha - 3 codes for entities specified in ISO 3166 - 1, with extensions for certain States.Two - letter
 codes are based on Aplha - 2 codes for entities specified in ISO 3166 - 1, with extensions for certain States.
</remarks>
        </member>
        <member name="P:Microblink.MRTDRecognitionResult.DocumentNumber">
            <summary>
Machine readable zone Document Number field
</summary>
            <remarks>
Contains up to 9 characters
</remarks>
        </member>
        <member name="P:Microblink.MRTDRecognitionResult.DateOfBirth">
            <summary>
Machine readable zone holder's Date of Birth field
</summary>
            <remarks>
Date is in <code>YYMMDD</code> format
</remarks>
        </member>
        <member name="P:Microblink.MRTDRecognitionResult.Issuer">
            <summary>
Machine readable zone Issuer field
</summary>
            <remarks>
Three-letter or two-letter code which indicate the issuing State. Three-letter codes are based
on Aplha - 3 codes for entities specified in ISO 3166 - 1, with extensions for certain States.Two - letter
 codes are based on Aplha - 2 codes for entities specified in ISO 3166 - 1, with extensions for certain States.
</remarks>
        </member>
        <member name="P:Microblink.MRTDRecognitionResult.SecondaryID">
            <summary>
Machine readable zone Secondary ID field
</summary>
            <remarks>
If there is more than one component, they are separated with space.
</remarks>
        </member>
        <member name="P:Microblink.MRTDRecognitionResult.PrimaryID">
            <summary>
Machine readable zone Primary ID field
</summary>
            <remarks>
If there is more than one component, they are separated with space.
</remarks>
        </member>
        <member name="T:Microblink.MRTDRecognitionResult">
            <summary>
MRTD recognition result
</summary>
        </member>
        <member name="T:PlatformStringUtils">
 \file

 PlatformStringUtils.hpp

  Created on: Jan, 2014
      Author: Ljudevit

 Copyright (c)2014 Racuni.hr d.o.o. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.


 \file

 RCRecognitionData.hpp

  Created on: Jan, 2014
      Author: Ljudevit

 Copyright (c)2014 Racuni.hr d.o.o. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.

 \file

 PlatformStringUtils.hpp

  Created on: Jan, 2014
      Author: Ljudevit

 Copyright (c)2014 Racuni.hr d.o.o. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.

</member>
        <member name="M:photopay.MRTDCandidate.isEmpty(ocr.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Examines the candidate and returns true if the candidate is empty

 @return

</member>
        <member name="M:photopay.MRTDCandidate.getConfidenceLevel">
Returns the confidence value of the candidate

</member>
        <member name="M:photopay.MRTDCandidate.log(System.Int32)">
Prints the candidate to log

</member>
        <member name="M:photopay.MRTDCandidate.op_Assign(photopay.MRTDCandidate!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
copy assignment operator

</member>
        <member name="M:photopay.MRTDCandidate.#ctor(photopay.MRTDCandidate!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor

</member>
        <member name="M:photopay.MRTDCandidate.#ctor(System.Int32,System.Int32,ocr.OcrResultIterator!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,photopay.ElementExtractor!System.Runtime.CompilerServices.IsConst*)">
Constructor.
Accepts the ocr result iterator

</member>
        <member name="M:photopay.MRTDCandidate.Dispose">
Destructor

</member>
        <member name="F:photopay.ElementCandidate.MAX_CONFIDENCE">
Maximum value of confidence level, means 100% accuracy 
</member>
        <member name="M:photopay.ElementCandidate.getCandidatePosition">
Returns the position of the candidate in current OcrResult

</member>
        <member name="M:photopay.ElementCandidate.isEmpty(ocr.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Examines the candidate and returns true if the candidate is empty

 @return

</member>
        <member name="M:photopay.ElementCandidate.invalidate">
Invalidates the candidate text in OcrResult

</member>
        <member name="M:photopay.ElementCandidate.compareTo(photopay.ElementCandidate*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Compares to other candidate.
If result &gt; 0, this candidate is more confident that other.

</member>
        <member name="M:photopay.ElementCandidate.getValue">
Returns the string representation of this candidate

</member>
        <member name="M:photopay.ElementCandidate.skipChars(ocr.String16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Skips all chars until skipTerminator is reached
@param skipTerminator

</member>
        <member name="M:photopay.ElementCandidate.processReplacementChars(ocr.String16!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ocr.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.UInt16!System.Runtime.CompilerServices.IsConst)">
Processes the replacement chars instead of nCharsToSkip upcoming characters from
OcrResultIterator.

</member>
        <member name="M:photopay.ElementCandidate.processNextOcrChar">
Processes the upcoming ocr character from OcrResultIterator

</member>
        <member name="M:photopay.ElementCandidate.getConfidenceLevel">
Returns the confidence value of the candidate

</member>
        <member name="M:photopay.ElementCandidate.logi">
Prints the candidate to error log

</member>
        <member name="M:photopay.ElementCandidate.log(System.Int32)">
Prints the candidate to log

</member>
        <member name="M:photopay.ElementCandidate.getEndOcrResultIterator">
Returns the ocr result iterator from the end of the candidate

</member>
        <member name="M:photopay.ElementCandidate.getStartOcrResultIterator">
Returns the ocr result iterator from start of the candidate

</member>
        <member name="M:photopay.ElementCandidate.addToCost(System.Single)">
Increases the error cost for a specified value

</member>
        <member name="M:photopay.ElementCandidate.setErrorCost(System.Single)">
Sets the error cost to specified value

</member>
        <member name="M:photopay.ElementCandidate.getErrorCost">
Returns the error cost

</member>
        <member name="M:photopay.ElementCandidate.getLength">
Returns the length of the candidate

</member>
        <member name="M:photopay.ElementCandidate.getStatus">
Returns the status of the candidate

</member>
        <member name="M:photopay.ElementCandidate.Dispose">
Destructor

</member>
        <member name="M:photopay.ElementCandidate.op_Assign(photopay.ElementCandidate!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
copy assignment operator

</member>
        <member name="M:photopay.ElementCandidate.#ctor(photopay.ElementCandidate!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor

</member>
        <member name="M:photopay.ElementCandidate.#ctor(ocr.OcrResultIterator!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,photopay.ElementExtractor!System.Runtime.CompilerServices.IsConst*)">
Constructor.

</member>
        <member name="M:photopay.ElementCandidate.updateState(ocr.OcrChar*)">
Updates the internal state of the class

</member>
        <member name="M:photopay.ElementCandidate.addChar(ocr.OcrChar*)">
Adds a given char to the value of the candidate

</member>
        <member name="F:photopay.ElementCandidate.extractor_">
Pointer to extractor that works with this candidate.

</member>
        <member name="F:photopay.ElementCandidate.candidatePosition_">
Position of the candidate inside OcrResult

</member>
        <member name="F:photopay.ElementCandidate.endOcrResultIterator_">
Points to a character in the ocr result which corresponds to the
last character of the candidate

</member>
        <member name="F:photopay.ElementCandidate.startOcrResultIterator_">
Points to a character in the ocr result which corresponds to the
first character of the candidate

</member>
        <member name="F:photopay.ElementCandidate.sumSize_">
Sum of character sizes

</member>
        <member name="F:photopay.ElementCandidate.nBoldChars_">
Number of bold chars

</member>
        <member name="F:photopay.ElementCandidate.nUncertainChars_">
Number of uncertain chars

</member>
        <member name="F:photopay.ElementCandidate.sumQuality_">
Sum of quality measures of recognized chars

</member>
        <member name="F:photopay.ElementCandidate.errorCost_">
Error cost of the candidate. Less is better

</member>
        <member name="F:photopay.ElementCandidate.status_">
Status

</member>
        <member name="F:photopay.ElementCandidate.value_">
candidate string value, in unicode

</member>
        <member name="F:photopay.ElementCandidate.length_">
Length of the candidate

</member>
        <member name="F:photopay.ElementCandidate.maxLength">
Candidate constants 
Largest possible lenght of the candidate value 
</member>
        <member name="T:photopay.ElementCandidate.CandidateStatus">
Status of a candidate

</member>
        <member name="T:photopay.ElementCandidate">
 Abstract class for element candidates.

 Note:
 Every subclass should:
 	- provide constructor that takes const reference to OcrResultIterator and const pointer to ElementExtractor
 	- provide copy constructor
 	- provide assignment operator (important)

 	And to provide your functionality you should
 	- have state variables
 	- provide updateStateMethod
 	- provide getConfidenceLevel method for candidate ranking
 	- provide log method (not necessary, but helpful)

</member>
        <member name="M:ocr.OcrResultIterator.getCurrentCharIndexInResult">
Finds the index of the current char in the result

</member>
        <member name="M:ocr.OcrResultIterator.op_Inequality(ocr.OcrResultIterator!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
compares two iterators for equality and returns false if they are equal

</member>
        <member name="M:ocr.OcrResultIterator.op_Equality(ocr.OcrResultIterator!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
compares two iterators for equality and returns true if they are equal

</member>
        <member name="M:ocr.OcrResultIterator.reset">
Resets the iterator to the beginning of the ocr result

</member>
        <member name="M:ocr.OcrResultIterator.deleteCurrentChar(tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Deletes the current character in the layout and moves
iterator to the next character (same as consumeNextChar)
@param status

</member>
        <member name="M:ocr.OcrResultIterator.consumeNextChar(tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Consumes the next character in the layout

</member>
        <member name="M:ocr.OcrResultIterator.getFollowingText(System.Int32)">
Iterates through the ocr result from the current point to next n characters
(iterates to end if n==0) and returns the obtained string

</member>
        <member name="M:ocr.OcrResultIterator.isOutOfBounds">
Returns true if the interator passed the last char in the whole layout

</member>
        <member name="M:ocr.OcrResultIterator.isEndOfLayout">
Returns true if the interator is on the last char in the whole layout

</member>
        <member name="M:ocr.OcrResultIterator.isEndOfBlock">
Returns true if the interator is on the last char in the current block

</member>
        <member name="M:ocr.OcrResultIterator.isEndOfLine">
Returns true if the iterator is on the last char in the current line

</member>
        <member name="M:ocr.OcrResultIterator.getCurrentLineLength">
Returns the length of the line the iterator is currently on.

</member>
        <member name="M:ocr.OcrResultIterator.getCurrentChar(tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the pointer to the current ocr character

</member>
        <member name="M:ocr.OcrResultIterator.Dispose">
Destructor

</member>
        <member name="M:ocr.OcrResultIterator.op_Assign(ocr.OcrResultIterator!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment operator

</member>
        <member name="M:ocr.OcrResultIterator.#ctor(ocr.OcrResultIterator!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor

</member>
        <member name="M:ocr.OcrResultIterator.#ctor(ocr.OcrResult*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Constructor

</member>
        <member name="F:ocr.OcrResultIterator.currentCharacter_">
current OCR character 
</member>
        <member name="F:ocr.OcrResultIterator.currentLine_">
current OCR line 
</member>
        <member name="F:ocr.OcrResultIterator.currentBlock_">
current OCR block 
</member>
        <member name="F:ocr.OcrResultIterator.ocrResult_">
Result over which we wish to iterate 
</member>
        <member name="T:ocr.OcrResultIterator">
Class responsible for iterating over OcrResult

</member>
        <member name="M:photopay.StringValidator.isStringValid(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Method that performs the validation

 @param val string which is validated
 @return non-zero if string is valid, zero otherwise

</member>
        <member name="M:photopay.StringValidator.Dispose">
Virtual destructor

</member>
        <member name="M:photopay.StringValidator.#ctor">
Constructor

</member>
        <member name="T:photopay.StringValidator">
Abstract class for validating string data

</member>
        <member name="M:photopay.OcrPaymentData.setIntElement(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,photopay.ExtractionResultHistory!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,photopay.ExtractionResultHistoryFilter!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Boolean*,System.Boolean*,System.Int32!System.Runtime.Compile">
 Method sets int element value based on it's extraction history,
 filter method and confidence thresholds

 @param elementHistory
 @param filter
 @param elementValidThreshold
 @param element

</member>
        <member name="M:photopay.OcrPaymentData.setStringElement(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,photopay.ExtractionResultHistory!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,photopay.ExtractionResultHistoryFilter!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsConst,System.Boolean*,System.Boolean*,System.Int32!System.Runtime.Comp">
 Method sets string element value based on it's extraction history,
 filter method and confidence tresholds

 @param elementHistory
 @param filter
 @param elementValidThreshold
 @param element

</member>
        <member name="M:photopay.ExtractionResultHistoryFilter.getFilteredResult(photopay.ExtractionResultHistory!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Method performs traversing through result history and estimating the
 correct extraction data, based on some criterium

 @param resultHistory history of past extractions
 @return estimated extraction results

</member>
        <member name="M:photopay.ExtractionResultHistoryFilter.Dispose">
Virtual destructor

</member>
        <member name="M:photopay.ExtractionResultHistoryFilter.#ctor(Ref&lt;photopay.ElementEmptyValidator&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Constructor

 @param emptyValidator    object that will decide if element is empty based
                          on history of recognitions

</member>
        <member name="T:photopay.ExtractionResultHistoryFilter">
Object which goes through the history of extraction results and gives
the best estimate about the observed result.

</member>
        <member name="M:photopay.ElementEmptyValidator.isElementEmpty(photopay.ExtractionResultHistory!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Method performs traversing through result history and decides if the element is empty.

</member>
        <member name="T:photopay.ElementEmptyValidator">
Class of objects responsible for keeping track if some element is nonexistent on the payment form

</member>
        <member name="M:photopay.ExtractionResultHistory.getHistory">
 Getter method for retrieveing history list

 @return history list

</member>
        <member name="M:photopay.ExtractionResultHistory.resetHistory">
Method deletes all results from history

</member>
        <member name="M:photopay.ExtractionResultHistory.addToHistory(photopay.ExtractionResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Method takes a new Extraction result and appends it to history
@param result

</member>
        <member name="M:photopay.ExtractionResultHistory.appendOtherHistory(photopay.ExtractionResultHistory!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Method takes other extraction history and appends it to this

 @param other
 @return

</member>
        <member name="M:photopay.ExtractionResultHistory.Dispose">
Virtual destructor

</member>
        <member name="M:photopay.ExtractionResultHistory.op_Assign(photopay.ExtractionResultHistory!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Assignment operator

 @param other
 @return

</member>
        <member name="M:photopay.ExtractionResultHistory.#ctor(photopay.ExtractionResultHistory!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Copy constructor

 @param other

</member>
        <member name="M:photopay.ExtractionResultHistory.#ctor">
Default constructor

</member>
        <member name="F:photopay.ExtractionResultHistory.history_">
A list of past extraction results

</member>
        <member name="T:photopay.ExtractionResultHistory">
Class responsible for keeping track of the whole history of extractions,
and providing different strategies for using this redundancy for
determining the most probable extraction results.

</member>
        <member name="M:photopay.RecognitionData.sanitize">
Performs sanitization

</member>
        <member name="M:photopay.RecognitionData.Dispose">
Destructor 
</member>
        <member name="M:photopay.RecognitionData.addExtractionResults(std.vector&lt;photopay.ExtractionResult&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Adds extraction results to history

 @param extractionResults

</member>
        <member name="M:photopay.RecognitionData.clone">
@return clone of self

</member>
        <member name="M:photopay.RecognitionData.op_Assign(photopay.RecognitionData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment

</member>
        <member name="M:photopay.RecognitionData.#ctor(photopay.RecognitionData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor

</member>
        <member name="M:photopay.RecognitionData.#ctor(photopay.RecognitionDataType,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Constructor that does not take currency 
</member>
        <member name="M:photopay.RecognitionData.#ctor(photopay.RecognitionDataType,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Constructor 
</member>
        <member name="M:photopay.RecognitionData.isValid">
checks if the payment data is valid. If true, payment is ready for execution 
</member>
        <member name="M:photopay.RecognitionData.getElement(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Generic element getter
@param elementName name of the element
@return element value

</member>
        <member name="M:photopay.RecognitionData.getMathElement(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Math data element getter.
@param elementName name of the element
@return element value or nullptr

</member>
        <member name="M:photopay.RecognitionData.getOcrResultElement(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
OCR data element getter
@param elementName name of the element
@return element value or nullptr

</member>
        <member name="M:photopay.RecognitionData.getBarcodeDataElement(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
barcode data element getter
@param elementName name of the element
@return element value or nullptr

</member>
        <member name="M:photopay.RecognitionData.getIntElement(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
integer element getter
@param elementName name of the element
@param defaultValue default value that will be returned if element does not exist or is not integer
@return element value or default value

</member>
        <member name="M:photopay.RecognitionData.getBoolElement(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
Bool element getter
@param element name of the element
@param defaultValue default value that will be returned if element does not exist or is not a bool
@return  element value or default value

</member>
        <member name="M:photopay.RecognitionData.getStringElement(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
string element getter
@param elementName name of the element
@param defaultValue default value that will be returned if element does not exist or is not string
@return element value or default value

</member>
        <member name="M:photopay.RecognitionData.elementExists(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns true if element with given name exists

</member>
        <member name="M:photopay.RecognitionData.getDataType">
Returns the PaymentData type

</member>
        <member name="M:photopay.RecognitionData.#ctor(photopay.RecognitionDataType)">
Constructor used by serializer only - should not be used by derived classes 
</member>
        <member name="M:photopay.RecognitionData.getSanitizer">
Returns the appropriate sanitizer object for this payment data.

</member>
        <member name="F:photopay.RecognitionData.locationOnImage_">
Exact location of found element on the image 
TODO: Currently supported only in PDF417 recognizer. 
     make this work in all PaymentRecognizers, when the need arises. 
</member>
        <member name="F:photopay.RecognitionData.empty_">
flag indicating empty payment data 
</member>
        <member name="F:photopay.RecognitionData.valid_">
flag indicating valid payment data 
</member>
        <member name="F:photopay.RecognitionData.validElements_">
valid elements - all elements that are in this set are considered
                 valid and payment recognizer may decide not to perform
                 additional OCR on these elements

</member>
        <member name="F:photopay.RecognitionData.elements_">
string elements, such as IBAN, BIC, receiver name, ... 
</member>
        <member name="T:photopay.RecognitionData">
Represents information on payment slips. Facade to results of various recognition methods.

</member>
        <member name="F:RECOGNITION_DATA_TYPE_COUNT">
number of entries 
</member>
        <member name="F:RECOGNITION_DATA_TYPE_LIBRARY_INFO">
Information about library and licence 
</member>
        <member name="F:RECOGNITION_DATA_TYPE_ZXING">
ZXing data 
</member>
        <member name="F:RECOGNITION_DATA_TYPE_USDL">
US Drivers's Licence data 
</member>
        <member name="F:RECOGNITION_DATA_TYPE_UK_QR_CODE">
UK QR code data 
</member>
        <member name="F:RECOGNITION_DATA_TYPE_UK_DRIVER_LICENSE">
UK Driver License 
</member>
        <member name="F:RECOGNITION_DATA_TYPE_UK_SLIP">
UK slip data 
</member>
        <member name="F:RECOGNITION_DATA_TYPE_SWITZERLAND_SLIP">
Swiss slip data 
</member>
        <member name="F:RECOGNITION_DATA_TYPE_SLOVENIA_SLIP">
Slovenian slip data 
</member>
        <member name="F:RECOGNITION_DATA_TYPE_MATH">
PhotoMath data 
</member>
        <member name="F:RECOGNITION_DATA_TYPE_PAYBULL">
PayBull data 
</member>
        <member name="F:RECOGNITION_DATA_TYPE_PDF417">
PDF417 data 
</member>
        <member name="F:RECOGNITION_DATA_TYPE_OCR_QUALITY">
Ocr Quality dat 
</member>
        <member name="F:RECOGNITION_DATA_TYPE_OCR">
Generic OCR data 
</member>
        <member name="F:RECOGNITION_DATA_TYPE_NETHERLANDS_SLIP">
Dutch slip data 
</member>
        <member name="F:RECOGNITION_DATA_TYPE_MRTD">
Machine readable travel document data 
</member>
        <member name="F:RECOGNITION_DATA_TYPE_KOSOVO_CODE128">
Kosovo code128 barcode data 
</member>
        <member name="F:RECOGNITION_DATA_TYPE_KOSOVO_SLIP">
Kosovo slip data 
</member>
        <member name="F:RECOGNITION_DATA_TYPE_HUNGARY_SLIP">
Hungarian slip data 
</member>
        <member name="F:RECOGNITION_DATA_TYPE_GERMANY_QR_CODE">
German QR code data 
</member>
        <member name="F:RECOGNITION_DATA_TYPE_GERMANY_SLIP">
German slip data 
</member>
        <member name="F:RECOGNITION_DATA_TYPE_CROATIA_QR_CODE">
Croatian barcode data QR code 
</member>
        <member name="F:RECOGNITION_DATA_TYPE_CROATIA_BARCODE">
Croatian barcode data PDF417 
</member>
        <member name="F:RECOGNITION_DATA_TYPE_CROATIA_SLIP">
Croatian slip data 
</member>
        <member name="F:RECOGNITION_DATA_TYPE_BELGIUM_SLIP">
Belgian slip data 
</member>
        <member name="F:RECOGNITION_DATA_TYPE_BARCODE">
Custom 1D barcode data 
</member>
        <member name="F:RECOGNITION_DATA_TYPE_AUSTRIA_QR_CODE">
Austrian QR code data 
</member>
        <member name="F:RECOGNITION_DATA_TYPE_AUSTRIA_SLIP">
Austrian slip data 
</member>
        <member name="F:RECOGNITION_DATA_TYPE_GENERIC">
Generic recognition data type. 
</member>
        <member name="F:photopay.RecognitionValue.impl_">
Pimpl object 
</member>
        <member name="M:photopay.RecognitionValue.getPhotoMathValue">
Getter for PhotoMath data. If type is not PhotoMath, this method will return undefined value.
@return a pointer to internal PhotoMath result structure

</member>
        <member name="M:photopay.RecognitionValue.getOcrValue">
Getter for OCR data. If type is not OCR, this method will return undefined value.
@return a pointer to internal OCR structure

</member>
        <member name="M:photopay.RecognitionValue.getBarcodeValue">
Getter for barcode detailed data. If type is not barcode, this method will return undefined value.
@return a pointer to internal barcode structure

</member>
        <member name="M:photopay.RecognitionValue.getRawStringValue">
Getter for string value.
Returns a pointer to the internal string.
If type is not string, this method will return undefined value.
@return a pointer to the internal string.

</member>
        <member name="M:photopay.RecognitionValue.getStringValue">
Getter for string value.
Returns a copy of the internal string (convenience method)
If type is not string, this method will return undefined value.

</member>
        <member name="M:photopay.RecognitionValue.getIntValue">
Getter for integer value. If type is not integer, this method will return undefined value.
@return integer representation of the value

</member>
        <member name="M:photopay.RecognitionValue.getBoolValue">
Getter for boolean value. If type is not boolean, this method will return undefined value.
@return boolean representation of the value;

</member>
        <member name="M:photopay.RecognitionValue.toString">
Returns the string representation of value. For logging 
</member>
        <member name="M:photopay.RecognitionValue.getType">
Getter for type 
</member>
        <member name="M:photopay.RecognitionValue.Dispose">
Virtual destructor 
</member>
        <member name="M:photopay.RecognitionValue.op_Assign(System.Boolean!System.Runtime.CompilerServices.IsConst)">
Assignment operator with boolean data 
</member>
        <member name="M:photopay.RecognitionValue.op_Assign(photomath.PhotoMathResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment operator with PhotoMath data 
</member>
        <member name="M:photopay.RecognitionValue.op_Assign(ocr.OcrResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment operator with OCR data 
</member>
        <member name="M:photopay.RecognitionValue.op_Assign(barcode.BarcodeDetailedData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment operator with barcode data 
</member>
        <member name="M:photopay.RecognitionValue.op_Assign(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Assignment operator with c-string data 
</member>
        <member name="M:photopay.RecognitionValue.op_Assign(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment operator with string data 
</member>
        <member name="M:photopay.RecognitionValue.op_Assign(System.Int32!System.Runtime.CompilerServices.IsConst)">
Assignment operator with integer data 
</member>
        <member name="M:photopay.RecognitionValue.op_Assign(photopay.RecognitionValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment operator 
</member>
        <member name="M:photopay.RecognitionValue.#ctor(photopay.RecognitionValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor 
</member>
        <member name="M:photopay.RecognitionValue.#ctor(System.Boolean!System.Runtime.CompilerServices.IsConst)">
Creates value with boolean data 
</member>
        <member name="M:photopay.RecognitionValue.#ctor(photomath.PhotoMathResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Creates value with PhotoMath data 
</member>
        <member name="M:photopay.RecognitionValue.#ctor(ocr.OcrResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Creates value with OCR data 
</member>
        <member name="M:photopay.RecognitionValue.#ctor(barcode.BarcodeDetailedData!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Creates value with barcode data 
</member>
        <member name="M:photopay.RecognitionValue.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Creates value with c-string data 
</member>
        <member name="M:photopay.RecognitionValue.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Creates value with string data 
</member>
        <member name="M:photopay.RecognitionValue.#ctor(System.Int32!System.Runtime.CompilerServices.IsConst)">
Creates value with integer data 
</member>
        <member name="M:photopay.RecognitionValue.#ctor">
Default constructor used in STL containers 
</member>
        <member name="T:photopay.RecognitionValue">
Value stored in Recognition data map

</member>
        <member name="M:photopay.ScanDataSanitizer.sanitizeString(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Method performs sanitization

@param value   value which needs to be sanitized
@param key     key for the given value (e.g. account number, payment description

</member>
        <member name="M:photopay.ScanDataSanitizer.sanitizeChars(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the string with removed all the chars which are not in allowed chars string

</member>
        <member name="M:photopay.ScanDataSanitizer.sanitizeLength(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)">
Returns the string with given length, but makes sure that truncation
is performed on UTF8 string, i.e. no multibyte chars are split

</member>
        <member name="T:photopay.ScanDataSanitizer">
Class used for sanitizing of data obtained by scanning

</member>
        <member name="M:photopay.ExtractionResult.setEmpty(System.Boolean)">
Sets the isEmpty property 

</member>
        <member name="M:photopay.ExtractionResult.isEmpty">
Returns true of the result is empty, i.e. nothing was found for this element in extraction process

</member>
        <member name="M:photopay.ExtractionResult.getConfidenceLevel">
Confidence level getter

</member>
        <member name="M:photopay.ExtractionResult.getName">
Name getter

</member>
        <member name="M:photopay.ExtractionResult.setValue(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Value setter 
</member>
        <member name="M:photopay.ExtractionResult.getValue">
Value getter

</member>
        <member name="M:photopay.ExtractionResult.op_LessThan(photopay.ExtractionResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Comparison operator
@return

</member>
        <member name="M:photopay.ExtractionResult.op_Assign(photopay.ExtractionResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assignment operator

</member>
        <member name="M:photopay.ExtractionResult.#ctor(photopay.ExtractionResult!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor

</member>
        <member name="M:photopay.ExtractionResult.Dispose">
NOTE: isEmpty must be default set to false because when performing multiple
      reads if one element is successfuly read the first time, next time
      it won't be read and then empty result will be added to history.
      To prevent history confusion, default extraction result must be
      defined as non-empty!

Frees the memory used to store recognition result

</member>
        <member name="M:photopay.ExtractionResult.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Boolean,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ocr.Box!System.Ru">
Creates an empty recognition result

</member>
        <member name="F:photopay.ExtractionResult.position_">
position of the result

</member>
        <member name="F:photopay.ExtractionResult.resultName_">
string name for result

</member>
        <member name="F:photopay.ExtractionResult.empty_">
Flag indicating the extraction found nothing

</member>
        <member name="F:photopay.ExtractionResult.confidenceLevel_">
Confidence level

</member>
        <member name="F:photopay.ExtractionResult.resultValue_">
string value for result

</member>
        <member name="T:photopay.ExtractionResult">
Encapsulates the recognition result

</member>
        <member name="M:ocr.Box.logi">
Log function

</member>
        <member name="F:ocr.Box.height_">
Height of the box

</member>
        <member name="F:ocr.Box.width_">
Width of the box

</member>
        <member name="F:ocr.Box.y_">
Y coordinate of upper left point

</member>
        <member name="F:ocr.Box.x_">
X coordinate of upper left point

</member>
        <member name="M:ocr.Box.Dispose">
Destructor

</member>
        <member name="M:ocr.Box.isEmpty">
Returns if the box is empty, i.e. NULL box;
@return

</member>
        <member name="M:ocr.Box.getAlignmentMeasureForMultipleBoxes(std.vector&lt;ocr.Box&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;ocr.Box&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Method is a generalization of getAlignmentMeasure and works for arbitrary number of boxes
@param first
@param second
@return

</member>
        <member name="M:ocr.Box.getAlignmentMeasure(ocr.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Method returns a double from 0 to 1 which correspond to how well are the boxes aligned.

 @param other
 @return

</member>
        <member name="M:ocr.Box.relativeTranslate(System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst)">
Returns the box translated by given relative factors.
@param xFactor factor of width used for horizontal translation
@param yFactor factor of height used for vertical translation
@return

</member>
        <member name="M:ocr.Box.getSpreadBox(System.Single!System.Runtime.CompilerServices.IsConst)">
 Returns the box spread by a constant factor in all directions

 @param spreadFactor
 @return

</member>
        <member name="M:ocr.Box.getHorizontalSlice(System.UInt32,System.UInt32)">
Gets the horizontal slice of box.
+-----------------+
|                 |
|                 |
|                 |
|-----------------|
|                 |
+-----------------+
@param sliceIndex
@param numSlices
@return

</member>
        <member name="M:ocr.Box.getVerticalSlice(System.UInt32,System.UInt32)">
Gets the vertical slice of box.
+----------------+
|    |           |
|    |           |
+----------------+
@param sliceIndex
@param numSlices
@return

</member>
        <member name="M:ocr.Box.getCorners">
 Returns vector with corner points

 @return

</member>
        <member name="M:ocr.Box.isSubsetOf(ocr.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Returns true if this box is a subset of the other box

 @param other
 @return

</member>
        <member name="M:ocr.Box.getOverlappingBox(ocr.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Method returns a new Box which represents overlapping area of this box and other
 @param other

 @return overlapping box

</member>
        <member name="M:ocr.Box.getCenter">
 Returns the center of the box

 @return

</member>
        <member name="M:ocr.Box.getArea">
 Returns the area of the box

 @return area

</member>
        <member name="M:ocr.Box.op_Equality(ocr.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Comparison operator

</member>
        <member name="M:ocr.Box.op_Addition(ocr.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Plus operator

</member>
        <member name="M:ocr.Box.op_AdditionAssignment(ocr.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Plus equal (increment) operator

</member>
        <member name="M:ocr.Box.op_Assign(ocr.Box*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Move-Assignment operator

</member>
        <member name="M:ocr.Box.op_Assign(ocr.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy-Assignent operator

</member>
        <member name="M:ocr.Box.#ctor(ocr.Box*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Move constructor

</member>
        <member name="M:ocr.Box.#ctor(ocr.Box!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Copy constructor

</member>
        <member name="M:ocr.Box.toRectf">
 Converts box to a opencv float rectangle format

 @return

</member>
        <member name="M:ocr.Box.toRect">
 Converts box to a opencv rect format

 @return

</member>
        <member name="M:ocr.Box.#ctor(cv.Rect_&lt;System.Int32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Creates a box from opencv rect format

 @param rect

</member>
        <member name="M:ocr.Box.#ctor(System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst,System.Single!System.Runtime.CompilerServices.IsConst)">
 Constructor

 @param x
 @param y
 @param width
 @param height

</member>
        <member name="F:ocr.Box.emptyHeight">
Height of empty Box 
</member>
        <member name="F:ocr.Box.emptyWidth">
Width of empty Box 
</member>
        <member name="F:ocr.Box.emptyY">
Y coordinate of empty Box 
</member>
        <member name="F:ocr.Box.emptyX">
X coordinate of empty Box 
</member>
        <member name="T:ocr.Box">
Box class.
Has upper left point and size.

</member>
        <member name="M:rapidjson.JsonSerializable.queryObjectMembers(rapidjson.GenericValue&lt;rapidjson.UTF8&lt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,std.function&lt;(rapidjson.GenericValue&lt;rapidjson.UTF8&lt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)(rapidjson.GenericValue&lt;rapidjson.UTF8&lt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;,System.">
Utility method for retrieving member elements from the JSON object.
@param jsonObj           JSON object that will be tested to have required element
                         identified by name.
@param name              Name of the element that should be retrieved.
@param elementHandler    Function that will be called for every element in JSON object.
                         Function should return true if element handling was OK or false
                         if there was an error while handling the element. In case of error,
                         element iteration may stop.
                         Function receives an element, its name in object and ErrorStatus
                         which it can use to report errors.
@param status    [out]   If success, status will be set to ERROR_STATUS_SUCCESS, otherwise it
                         will be set to ERROR_STATUS_DESERIALIZATION_FAILED and val will not be changed.
@param mandatory         If set to true and error occurs, it will be logged and status will be set to ERROR_STATUS_DESERIALIZATION_FAILED. Default is true.

</member>
        <member name="M:rapidjson.JsonSerializable.queryObject(rapidjson.GenericValue&lt;rapidjson.UTF8&lt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,std.function&lt;(rapidjson.GenericValue&lt;rapidjson.UTF8&lt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)(rapidjson.GenericValue&lt;rapidjson.UTF8&lt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;)&gt;,tagErrorStatus*!System.Runtime.CompilerService">
Utility method for retrieving object elements from the JSON object.
@param jsonObj           JSON object that will be tested to have required element
                         identified by name.
@param name              Name of the element that should be retrieved.
@param objectHandler     Function that will be called for handling object if it exists.
                         Function receives JSON object so it can further process it and
                         ErrorStatus which it can use to report errors.
@param status    [out]   If success, status will be set to ERROR_STATUS_SUCCESS, otherwise it
                         will be set to ERROR_STATUS_DESERIALIZATION_FAILED and val will not be changed.
@param mandatory         If set to true and error occurs, it will be logged and status will be set to ERROR_STATUS_DESERIALIZATION_FAILED. Default is true.

</member>
        <member name="M:rapidjson.JsonSerializable.queryArray(rapidjson.GenericValue&lt;rapidjson.UTF8&lt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,std.function&lt;(rapidjson.GenericValue&lt;rapidjson.UTF8&lt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)(rapidjson.GenericValue&lt;rapidjson.UTF8&lt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;,System.UInt32,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced&amp;)&gt;,tagErrorStatus*!Sys">
Utility method for retrieving array of elements from the JSON object.
@param jsonObj           JSON object that will be tested to have required element array
                         identified by name.
@param name              Name of the element array that should be retrieved.
@param elementHandler    Function that will be called for every element in JSON array.
                         Function should return true if element handling was OK or false
                         if there was an error while handling the element. In case of error,
                         element iteration may stop.
                         Function receives array element, its index in array and ErrorStatus
                         which it can use to report errors.
@param status    [out]   If success, status will be set to ERROR_STATUS_SUCCESS, otherwise it
                         will be set to ERROR_STATUS_DESERIALIZATION_FAILED and val will not be changed.
@param mandatory         If set to true and error occurs, it will be logged and status will be set to ERROR_STATUS_DESERIALIZATION_FAILED. Default is true.

</member>
        <member name="M:rapidjson.JsonSerializable.queryString(rapidjson.GenericValue&lt;rapidjson.UTF8&lt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
Utility method for retrieving string element of the JSON object.
@param jsonObj           JSON object that will be tested to have required element
                         identified by name.
@param name              Name of the element that should be retrieved.
@param val       [out]   Variable to which result of retrieveal will be saved. If error occurs,
                         existing value will not be changed.
@param status    [out]   If success, status will be set to ERROR_STATUS_SUCCESS, otherwise it
                         will be set to ERROR_STATUS_DESERIALIZATION_FAILED and val will not be changed.
@param mandatory         If set to true and error occurs, it will be logged and status will be set to ERROR_STATUS_DESERIALIZATION_FAILED. Default is true.

</member>
        <member name="M:rapidjson.JsonSerializable.queryUInt64(rapidjson.GenericValue&lt;rapidjson.UTF8&lt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
Utility method for retrieving 64-bit unsigned int element of the JSON object.
@param jsonObj           JSON object that will be tested to have required element
                         identified by name.
@param name              Name of the element that should be retrieved.
@param val       [out]   Variable to which result of retrieveal will be saved. If error occurs,
                         existing value will not be changed.
@param status    [out]   If success, status will be set to ERROR_STATUS_SUCCESS, otherwise it
                         will be set to ERROR_STATUS_DESERIALIZATION_FAILED and val will not be changed.
@param mandatory         If set to true and error occurs, it will be logged and status will be set to ERROR_STATUS_DESERIALIZATION_FAILED. Default is true.

</member>
        <member name="M:rapidjson.JsonSerializable.queryInt64(rapidjson.GenericValue&lt;rapidjson.UTF8&lt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
Utility method for retrieving 64-bit int element of the JSON object.
@param jsonObj           JSON object that will be tested to have required element
                         identified by name.
@param name              Name of the element that should be retrieved.
@param val       [out]   Variable to which result of retrieveal will be saved. If error occurs,
                         existing value will not be changed.
@param status    [out]   If success, status will be set to ERROR_STATUS_SUCCESS, otherwise it
                         will be set to ERROR_STATUS_DESERIALIZATION_FAILED and val will not be changed.
@param mandatory         If set to true and error occurs, it will be logged and status will be set to ERROR_STATUS_DESERIALIZATION_FAILED. Default is true.

</member>
        <member name="M:rapidjson.JsonSerializable.queryUInt(rapidjson.GenericValue&lt;rapidjson.UTF8&lt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
Utility method for retrieving unsigned int element of the JSON object.
@param jsonObj           JSON object that will be tested to have required element
                         identified by name.
@param name              Name of the element that should be retrieved.
@param val       [out]   Variable to which result of retrieveal will be saved. If error occurs,
                         existing value will not be changed.
@param status    [out]   If success, status will be set to ERROR_STATUS_SUCCESS, otherwise it
                         will be set to ERROR_STATUS_DESERIALIZATION_FAILED and val will not be changed.
@param mandatory         If set to true and error occurs, it will be logged and status will be set to ERROR_STATUS_DESERIALIZATION_FAILED. Default is true.

</member>
        <member name="M:rapidjson.JsonSerializable.queryInt(rapidjson.GenericValue&lt;rapidjson.UTF8&lt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
Utility method for retrieving int element of the JSON object.
@param jsonObj           JSON object that will be tested to have required element
                         identified by name.
@param name              Name of the element that should be retrieved.
@param val       [out]   Variable to which result of retrieveal will be saved. If error occurs,
                         existing value will not be changed.
@param status    [out]   If success, status will be set to ERROR_STATUS_SUCCESS, otherwise it
                         will be set to ERROR_STATUS_DESERIALIZATION_FAILED and val will not be changed.
@param mandatory         If set to true and error occurs, it will be logged and status will be set to ERROR_STATUS_DESERIALIZATION_FAILED. Default is true.

</member>
        <member name="M:rapidjson.JsonSerializable.queryBool(rapidjson.GenericValue&lt;rapidjson.UTF8&lt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
Utility method for retrieving bool element of the JSON object.
@param jsonObj           JSON object that will be tested to have required element
                         identified by name.
@param name              Name of the element that should be retrieved.
@param val       [out]   Variable to which result of retrieveal will be saved. If error occurs,
                         existing value will not be changed.
@param status    [out]   If success, status will be set to ERROR_STATUS_SUCCESS, otherwise it
                         will be set to ERROR_STATUS_DESERIALIZATION_FAILED and val will not be changed.
@param mandatory         If set to true and error occurs, it will be logged and status will be set to ERROR_STATUS_DESERIALIZATION_FAILED. Default is true.

</member>
        <member name="M:rapidjson.JsonSerializable.queryGeneralizedDouble(rapidjson.GenericValue&lt;rapidjson.UTF8&lt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
Utility method for retrieving double element even if he doesn't have decimal places of the JSON object.
@param jsonObj           JSON object that will be tested to have required element
                         identified by name.
@param name              Name of the element that should be retrieved.
@param val       [out]   Variable to which result of retrieveal will be saved. If error occurs,
                         existing value will not be changed.
@param status    [out]   If success, status will be set to ERROR_STATUS_SUCCESS, otherwise it
                         will be set to ERROR_STATUS_DESERIALIZATION_FAILED and val will not be changed.
@param mandatory         If set to true and error occurs, it will be logged and status will be set to ERROR_STATUS_DESERIALIZATION_FAILED. Default is true.

</member>
        <member name="M:rapidjson.JsonSerializable.queryGeneralizedFloat(rapidjson.GenericValue&lt;rapidjson.UTF8&lt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
Utility method for retrieving float element even if he doesn't have decimal places of the JSON object.
@param jsonObj           JSON object that will be tested to have required element
                         identified by name.
@param name              Name of the element that should be retrieved.
@param val       [out]   Variable to which result of retrieveal will be saved. If error occurs,
                         existing value will not be changed.
@param status    [out]   If success, status will be set to ERROR_STATUS_SUCCESS, otherwise it
                         will be set to ERROR_STATUS_DESERIALIZATION_FAILED and val will not be changed.
@param mandatory         If set to true and error occurs, it will be logged and status will be set to ERROR_STATUS_DESERIALIZATION_FAILED. Default is true.

</member>
        <member name="M:rapidjson.JsonSerializable.queryFloat(rapidjson.GenericValue&lt;rapidjson.UTF8&lt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,tagErrorStatus*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
Utility method for retrieving float element of the JSON object.
@param jsonObj           JSON object that will be tested to have required element
                         identified by name.
@param name              Name of the element that should be retrieved.
@param val       [out]   Variable to which result of retrieveal will be saved. If error occurs,
                         existing value will not be changed.
@param status    [out]   If success, status will be set to ERROR_STATUS_SUCCESS, otherwise it
                         will be set to ERROR_STATUS_DESERIALIZATION_FAILED and val will not be changed.
@param mandatory         If set to true and error occurs, it will be logged and status will be set to ERROR_STATUS_DESERIALIZATION_FAILED. Default is true.

</member>
        <member name="M:StringUtils.stringWithCString(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Inits std::string with cString and encoding

</member>
        <member name="M:StringUtils.countOccurrences(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Counts the number of occurrences of string string in string instring.

 @return number of occurrences

</member>
        <member name="M:StringUtils.trimRight(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Trim string from right

</member>
        <member name="M:StringUtils.trimLeft(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Trim string from left

</member>
        <member name="M:StringUtils.trim(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Trim from both ends

</member>
        <member name="M:StringUtils.intToString(System.Int32!System.Runtime.CompilerServices.IsConst)">
Converts integer to string.

</member>
        <member name="M:StringUtils.stringToInt(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Converts string to integer.
Ignores chars that are not digits.

</member>
        <member name="M:StringUtils.Dispose">
@brief Private destructor

</member>
        <member name="M:StringUtils.#ctor">
@brief Private constructor to prevent instantiation

</member>
        <member name="T:StringUtils">
@brief Utility class for manipulating strings

</member>
        <member name="M:IConv.convert(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Converts the input string
string should be null terminated
if s-jis is not null terminated or it has
multiple byte chars with null in them this
will not work, or to provide in other way
input buffer length....

</member>
        <member name="M:IConv.Dispose">
Destructor

</member>
        <member name="M:IConv.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Constructor

</member>
        <member name="T:IConv">
 \file

 OcrPaymentData.hpp

  Created on: Apr 10, 2013
      Author: dodo

 Copyright (c)2013 Racuni.hr d.o.o. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.

 \file

 PaymentData.h

  Created on: Feb 21, 2012
      Author: cerovec

 \file

 StringUtils.h

  Created on: Mar 23, 2012
      Author: cerovec

Charset conversion utility


 \file

 PaymentRecognizer.h

  Created on: Feb 13, 2012
      Author: cerovec

 \file

 PaymentData.h

  Created on: Feb 21, 2012
      Author: cerovec

 \file

 StringUtils.h

  Created on: Mar 23, 2012
      Author: cerovec

Charset conversion utility


 \file

 StringUtils.h

  Created on: Mar 23, 2012
      Author: cerovec

Charset conversion utility


 \file

 wchar.h

  Created on: Nov 28, 2012
      Author: dodo

 Copyright (c)2012 Racuni.hr d.o.o. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.

 \file

 StringUtils.h

  Created on: Mar 23, 2012
      Author: cerovec

Charset conversion utility


 \file

 CommonUtil.h

  Created on: Jan, 2014
      Author: dodo, Ljudevit

 Copyright (c)2014 Racuni.hr d.o.o. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.

Name of folder in which to save debug images

Allow saving of files

Whether image saving is allowed

if saving image is allowed, save all images

if image saving is allowed, save all images
* generated by scanner (no matter if detection was
* successful or not)

if image saving is allowed, save results of
* image dewarping

if image saving is allowed, save results of
* image dewarping with marked OCR char positions

if defined, XML serialized OCR results
* will be saved

Save log output to a file in isolated storage

 \file

 PaymentData.h

  Created on: Feb 21, 2012
      Author: cerovec

 \file

 StringUtils.h

  Created on: Mar 23, 2012
      Author: cerovec

Charset conversion utility


 \file

 PaymentData.h

  Created on: Feb 21, 2012
      Author: cerovec

 \file

 StringUtils.h

  Created on: Mar 23, 2012
      Author: cerovec

Charset conversion utility

</member>
        <member name="P:Microblink.IRecognitionResult.Elements">
            <summary>
String -&gt; Object map of result elements. 
</summary>
            <remarks> Result data can
be retrieved from this map instead of using the specific
properties in IRecognitionResult implementing classes.
In the instances when specific property is not implemented
the only way of retrieving the data is via this map.
</remarks>
        </member>
        <member name="P:Microblink.IRecognitionResult.Empty">
            <summary>
Indicates if the result is empty
</summary>
        </member>
        <member name="P:Microblink.IRecognitionResult.Valid">
            <summary>
Indicates if the result is valid
</summary>
        </member>
        <member name="T:Microblink.IRecognitionResult">
            <summary>
Base interface for all recognition result classes
</summary>
        </member>
        <member name="D:I_RPC_HANDLE">

  Created on: May 2015
      Author: zivac

 Copyright (c)2015 Microblink Ltd. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.


  Created on: May 2015
      Author: zivac

 Copyright (c)2015 Microblink Ltd. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.


 \file

 PhotoPayComponent.hpp

  Created on: Jan, 2014
      Author: Ljudevit

 Copyright (c)2014 Racuni.hr d.o.o. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.


 \file

 RCBarcodeRecognitionData.hpp

  Created on: Jan, 2014
      Author: Ljudevit

 Copyright (c)2014 Racuni.hr d.o.o. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.


 \file

 RCPaymentRecognizerDelegate.hpp

  Created on: Jan, 2014
      Author: Ljudevit

 Copyright (c)2014 Racuni.hr d.o.o. All rights reserved.

 ANY UNAUTHORIZED USE OR SALE, DUPLICATION, OR DISTRIBUTION
 OF THIS PROGRAM OR ANY OF ITS PARTS, IN SOURCE OR BINARY FORMS,
 WITH OR WITHOUT MODIFICATION, WITH THE PURPOSE OF ACQUIRING
 UNLAWFUL MATERIAL OR ANY OTHER BENEFIT IS PROHIBITED!
 THIS PROGRAM IS PROTECTED BY COPYRIGHT LAWS AND YOU MAY NOT
 REVERSE ENGINEER, DECOMPILE, OR DISASSEMBLE IT.

</member>
        <!-- Discarding badly formed XML document comment for member 'T:Microblink.RecognitionMode'. -->
        <!-- Discarding badly formed XML document comment for member 'F:photopay.CroBarPaymentData.HUB3_CURRENCY_ROW'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Microblink.RecognitionMode'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Microblink.RecognitionMode'. -->
        <!-- Discarding badly formed XML document comment for member 'P:Microblink.USDLRecognitionResult.kNameSuffix'. -->
        <!-- Discarding badly formed XML document comment for member 'P:Microblink.USDLRecognitionResult.kAKAMiddleName'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Microblink.RecognitionMode'. -->
        <!-- Discarding badly formed XML document comment for member 'T:cv.DynamicAdaptedFeatureDetector'. -->
        <!-- Discarding badly formed XML document comment for member 'M:cv.linemod.Detector.match(std.vector<cv.Mat>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,std.vector<cv.linemod.Match>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector<cv.String>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,cv._OutputArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector<cv.Mat>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:Microblink.RecognitionMode'. -->
    </members>
</doc>